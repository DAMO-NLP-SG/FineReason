{"inputs": {"question": "Help Donna make sense of Dr. Finklestein's appointment list for today. Using only the clues below, match the times to the options from names, ailments, and insurers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 9, 10, 11, 12.\nnames : Billy, Guy, Paul, Terry.\nailments : back pain, hip pain, shingles, vertigo.\ninsurers : Ambercare, HealthCo, Lifealign, Triflex.", "clues": {"1": {"text": "The person with Lifealign insurance has an appointment sometime before the patient suffering from shingles.", "conditions": "(T[r('Lifealign')][c('times')] < T[r('shingles')][c('times')])"}, "2": {"text": "The patient with the 12 noon appointment is either Terry or the patient with Ambercare insurance.", "conditions": "(T[r(12)][c('names')] == 'Terry' or T[r(12)][c('insurers')] == 'Ambercare') and (T[r('Terry')][c('insurers')] != 'Ambercare')"}, "3": {"text": "The patient suffering from back pain has an appointment 2 hours before Guy.", "conditions": "(T[r('back pain')][c('times')] == T[r('Guy')][c('times')] - 2)"}, "4": {"text": "The person with Ambercare insurance has an appointment sometime after the person suffering from vertigo.", "conditions": "(T[r('Ambercare')][c('times')] > T[r('vertigo')][c('times')])"}, "5": {"text": "Neither Billy nor the person suffering from shingles is the person with Lifealign insurance.", "conditions": "(T[r('Billy')][c('insurers')] != 'Lifealign' and T[r('shingles')][c('insurers')] != 'Lifealign') and (T[r('Billy')][c('ailments')] != 'shingles')"}, "6": {"text": "The person with the 9:00am appointment is either Paul or the patient suffering from back pain.", "conditions": "(T[r(9)][c('names')] == 'Paul' or T[r(9)][c('ailments')] == 'back pain') and (T[r('Paul')][c('ailments')] != 'back pain')"}, "7": {"text": "The patient with the 10:00am appointment has Triflex insurance.", "conditions": "(T[r(10)][c('insurers')] == 'Triflex')"}, "8": {"text": "Of the patient suffering from vertigo and the person with Ambercare insurance, one has the 11:00am appointment and the other is Billy.", "conditions": "((T[r('vertigo')][c('times')] == 11 and T[r('Ambercare')][c('names')] == 'Billy') or (T[r('Ambercare')][c('times')] == 11 and T[r('vertigo')][c('names')] == 'Billy')) and (T[r('vertigo')][c('insurers')] != 'Ambercare') and (T[r(11)][c('names')] != 'Billy')"}}, "initial": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], "current": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "vertigo", ""], [12, "Billy", "", "Ambercare"]], "applied_clues": ["8"], "initial_to_current": [[["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "vertigo", ""], [12, "Billy", "", "Ambercare"]]], "unsolvable_child": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Terry", "", ""], [11, "", "vertigo", ""], [12, "Billy", "", "Ambercare"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", "Lifealign"], [10, "Paul", "shingles", "Triflex"], [11, "Guy", "vertigo", "HealthCo"], [12, "Billy", "hip pain", "Ambercare"]], "current_status": "Solvable"}}
{"inputs": {"question": "Help Donna make sense of Dr. Finklestein's appointment list for today. Using only the clues below, match the times to the options from names, ailments, and insurers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 9, 10, 11, 12.\nnames : Billy, Guy, Paul, Terry.\nailments : back pain, hip pain, shingles, vertigo.\ninsurers : Ambercare, HealthCo, Lifealign, Triflex.", "clues": {"1": {"text": "The person with Lifealign insurance has an appointment sometime before the patient suffering from shingles.", "conditions": "(T[r('Lifealign')][c('times')] < T[r('shingles')][c('times')])"}, "2": {"text": "The patient with the 12 noon appointment is either Terry or the patient with Ambercare insurance.", "conditions": "(T[r(12)][c('names')] == 'Terry' or T[r(12)][c('insurers')] == 'Ambercare') and (T[r('Terry')][c('insurers')] != 'Ambercare')"}, "3": {"text": "The patient suffering from back pain has an appointment 2 hours before Guy.", "conditions": "(T[r('back pain')][c('times')] == T[r('Guy')][c('times')] - 2)"}, "4": {"text": "The person with Ambercare insurance has an appointment sometime after the person suffering from vertigo.", "conditions": "(T[r('Ambercare')][c('times')] > T[r('vertigo')][c('times')])"}, "5": {"text": "Neither Billy nor the person suffering from shingles is the person with Lifealign insurance.", "conditions": "(T[r('Billy')][c('insurers')] != 'Lifealign' and T[r('shingles')][c('insurers')] != 'Lifealign') and (T[r('Billy')][c('ailments')] != 'shingles')"}, "6": {"text": "The person with the 9:00am appointment is either Paul or the patient suffering from back pain.", "conditions": "(T[r(9)][c('names')] == 'Paul' or T[r(9)][c('ailments')] == 'back pain') and (T[r('Paul')][c('ailments')] != 'back pain')"}, "7": {"text": "The patient with the 10:00am appointment has Triflex insurance.", "conditions": "(T[r(10)][c('insurers')] == 'Triflex')"}, "8": {"text": "Of the patient suffering from vertigo and the person with Ambercare insurance, one has the 11:00am appointment and the other is Billy.", "conditions": "((T[r('vertigo')][c('times')] == 11 and T[r('Ambercare')][c('names')] == 'Billy') or (T[r('Ambercare')][c('times')] == 11 and T[r('vertigo')][c('names')] == 'Billy')) and (T[r('vertigo')][c('insurers')] != 'Ambercare') and (T[r(11)][c('names')] != 'Billy')"}}, "initial": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], "current": [["times", "names", "ailments", "insurers"], [9, "Terry", "", ""], [10, "", "", ""], [11, "", "vertigo", ""], [12, "Billy", "", "Ambercare"]], "applied_clues": ["8", "2", "4"], "initial_to_current": [[["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "vertigo", ""], [12, "Billy", "", "Ambercare"]], [["times", "names", "ailments", "insurers"], [9, "Terry", "", ""], [10, "", "", ""], [11, "", "vertigo", ""], [12, "Billy", "", "Ambercare"]], [["times", "names", "ailments", "insurers"], [9, "Terry", "", ""], [10, "", "", ""], [11, "", "vertigo", ""], [12, "Billy", "", "Ambercare"]]], "unsolvable_child": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", ""], [10, "", "", ""], [11, "Paul", "vertigo", ""], [12, "Billy", "", "Ambercare"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", "Lifealign"], [10, "Paul", "shingles", "Triflex"], [11, "Guy", "vertigo", "HealthCo"], [12, "Billy", "hip pain", "Ambercare"]], "current_status": "Solvable"}}
{"inputs": {"question": "Help Donna make sense of Dr. Finklestein's appointment list for today. Using only the clues below, match the times to the options from names, ailments, and insurers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 9, 10, 11, 12.\nnames : Billy, Guy, Paul, Terry.\nailments : back pain, hip pain, shingles, vertigo.\ninsurers : Ambercare, HealthCo, Lifealign, Triflex.", "clues": {"1": {"text": "The person with Lifealign insurance has an appointment sometime before the patient suffering from shingles.", "conditions": "(T[r('Lifealign')][c('times')] < T[r('shingles')][c('times')])"}, "2": {"text": "The patient with the 12 noon appointment is either Terry or the patient with Ambercare insurance.", "conditions": "(T[r(12)][c('names')] == 'Terry' or T[r(12)][c('insurers')] == 'Ambercare') and (T[r('Terry')][c('insurers')] != 'Ambercare')"}, "3": {"text": "The patient suffering from back pain has an appointment 2 hours before Guy.", "conditions": "(T[r('back pain')][c('times')] == T[r('Guy')][c('times')] - 2)"}, "4": {"text": "The person with Ambercare insurance has an appointment sometime after the person suffering from vertigo.", "conditions": "(T[r('Ambercare')][c('times')] > T[r('vertigo')][c('times')])"}, "5": {"text": "Neither Billy nor the person suffering from shingles is the person with Lifealign insurance.", "conditions": "(T[r('Billy')][c('insurers')] != 'Lifealign' and T[r('shingles')][c('insurers')] != 'Lifealign') and (T[r('Billy')][c('ailments')] != 'shingles')"}, "6": {"text": "The person with the 9:00am appointment is either Paul or the patient suffering from back pain.", "conditions": "(T[r(9)][c('names')] == 'Paul' or T[r(9)][c('ailments')] == 'back pain') and (T[r('Paul')][c('ailments')] != 'back pain')"}, "7": {"text": "The patient with the 10:00am appointment has Triflex insurance.", "conditions": "(T[r(10)][c('insurers')] == 'Triflex')"}, "8": {"text": "Of the patient suffering from vertigo and the person with Ambercare insurance, one has the 11:00am appointment and the other is Billy.", "conditions": "((T[r('vertigo')][c('times')] == 11 and T[r('Ambercare')][c('names')] == 'Billy') or (T[r('Ambercare')][c('times')] == 11 and T[r('vertigo')][c('names')] == 'Billy')) and (T[r('vertigo')][c('insurers')] != 'Ambercare') and (T[r(11)][c('names')] != 'Billy')"}}, "initial": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], "current": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", ""], [10, "Paul", "", "Triflex"], [11, "Guy", "vertigo", ""], [12, "Billy", "", "Ambercare"]], "applied_clues": ["8", "2", "4", "6", "3", "7"], "initial_to_current": [[["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "vertigo", ""], [12, "Billy", "", "Ambercare"]], [["times", "names", "ailments", "insurers"], [9, "Terry", "", ""], [10, "", "", ""], [11, "", "vertigo", ""], [12, "Billy", "", "Ambercare"]], [["times", "names", "ailments", "insurers"], [9, "Terry", "", ""], [10, "", "", ""], [11, "", "vertigo", ""], [12, "Billy", "", "Ambercare"]], [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", ""], [10, "Paul", "", ""], [11, "", "vertigo", ""], [12, "Billy", "", "Ambercare"]], [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", ""], [10, "Paul", "", ""], [11, "Guy", "vertigo", ""], [12, "Billy", "", "Ambercare"]], [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", ""], [10, "Paul", "", "Triflex"], [11, "Guy", "vertigo", ""], [12, "Billy", "", "Ambercare"]]], "unsolvable_child": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", "Lifealign"], [10, "Paul", "", "Triflex"], [11, "Guy", "vertigo", ""], [12, "Billy", "shingles", "Ambercare"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", "Lifealign"], [10, "Paul", "shingles", "Triflex"], [11, "Guy", "vertigo", "HealthCo"], [12, "Billy", "hip pain", "Ambercare"]], "current_status": "Solvable"}}
{"inputs": {"question": "Steve is a world-renowned herpetologist (an expert in reptiles and amphibians), and today he's been asked to bring a small collection of snakes in to Brunhilde High School for a class demonstration. Using only the clues below, match the lengths to the options from snakes, countries, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "lengths : 12, 18, 24, 30.\nsnakes : ash python, horned viper, pygmy racer, two-nosed asp.\ncountries : Cambodia, Nicaragua, Spain, Uganda.\ncolors : black & red, brown & red, green & white, yellow & blue.", "clues": {"1": {"text": "The horned viper is 12 inches long.", "conditions": "(T[r('horned viper')][c('lengths')] == 12)"}, "2": {"text": "The yellow & blue serpent is 6 inches shorter than the serpent from Uganda.", "conditions": "(T[r('yellow & blue')][c('lengths')] == T[r('Uganda')][c('lengths')] - 6)"}, "3": {"text": "The pygmy racer isn't exactly 18 inches long.", "conditions": "(T[r('pygmy racer')][c('lengths')] != 18)"}, "4": {"text": "The yellow & blue snake is 12 inches shorter than the ash python.", "conditions": "(T[r('yellow & blue')][c('lengths')] == T[r('ash python')][c('lengths')] - 12)"}, "5": {"text": "The brown & red reptile is from Nicaragua.", "conditions": "(T[r('brown & red')][c('countries')] == 'Nicaragua')"}, "6": {"text": "The black & red serpent is 6 inches longer than the snake from Nicaragua.", "conditions": "(T[r('black & red')][c('lengths')] == T[r('Nicaragua')][c('lengths')] + 6)"}, "7": {"text": "The two-nosed asp is longer than the animal from Spain.", "conditions": "(T[r('two-nosed asp')][c('lengths')] > T[r('Spain')][c('lengths')])"}}, "initial": [["lengths", "snakes", "countries", "colors"], [12, "", "", ""], [18, "", "", ""], [24, "", "", ""], [30, "", "", ""]], "current": [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "", "yellow & blue"], [18, "", "Uganda", ""], [24, "ash python", "", ""], [30, "", "", ""]], "applied_clues": ["1", "4", "2"], "initial_to_current": [[["lengths", "snakes", "countries", "colors"], [12, "", "", ""], [18, "", "", ""], [24, "", "", ""], [30, "", "", ""]], [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "", ""], [18, "", "", ""], [24, "", "", ""], [30, "", "", ""]], [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "", "yellow & blue"], [18, "", "", ""], [24, "ash python", "", ""], [30, "", "", ""]], [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "", "yellow & blue"], [18, "", "Uganda", ""], [24, "ash python", "", ""], [30, "", "", ""]]], "unsolvable_child": [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "Nicaragua", "yellow & blue"], [18, "", "Uganda", "black & red"], [24, "ash python", "", ""], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "Spain", "yellow & blue"], [18, "two-nosed asp", "Uganda", "green & white"], [24, "ash python", "Nicaragua", "brown & red"], [30, "pygmy racer", "Cambodia", "black & red"]], "current_status": "Solvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "Lucky Star", "Red Oak", ""]], "applied_clues": ["5"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "Lucky Star", "Red Oak", ""]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Paradise", "soy"], ["June 5th", "", "", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "Lucky Star", "Red Oak", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Solvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "", "", ""], ["June 6th", "", "Paradise", ""], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "applied_clues": ["5", "4"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "Lucky Star", "Red Oak", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "", "", ""], ["June 6th", "", "Paradise", ""], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "", "", ""], ["June 6th", "Meadowgrove", "Paradise", ""], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Solvable"}}
{"inputs": {"question": "The U. S. Air Force is currently testing a number of new experimental, supersonic aircraft, each built by a different aerospace company. Using only the clues below, match the prices to the options from aircraft, companies, and top speeds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 100, 125, 150, 175.\naircraft : Darkwing 6, Falcon X-2, Kesseling, Raven 12.\ncompanies : Ale and Moore, Forsyth, Pittakan, Tenerife.\ntop speeds : Mach 2.3, Mach 2.9, Mach 3.2, Mach 3.4.", "clues": {"1": {"text": "The Darkwing 6 costs 50 million dollars more than the jet built by Tenerife.", "conditions": "(T[r('Darkwing 6')][c('prices')] == T[r('Tenerife')][c('prices')] + 50)"}, "2": {"text": "The Raven 12 doesn't cost $125 million.", "conditions": "(T[r('Raven 12')][c('prices')] != 125)"}, "3": {"text": "The plane with a top speed of Mach 3.2 costs more than the jet built by Tenerife.", "conditions": "(T[r('Mach 3.2')][c('prices')] > T[r('Tenerife')][c('prices')])"}, "4": {"text": "The aircraft with a top speed of Mach 2.9, the aircraft built by Forsyth, and the $150 million aircraft are three different jets.", "conditions": "(T[r('Mach 2.9')][c('companies')]!='Forsyth') and (T[r(150)][c('companies')]!='Forsyth') and (T[r(150)][c('top speeds')]!='Mach 3.2')"}, "5": {"text": "The plane with a top speed of Mach 2.9 is either the Raven 12 or the $100 million jet.", "conditions": "(T[r('Mach 2.9')][c('aircraft')] == 'Raven 12' or T[r('Mach 2.9')][c('prices')] == 100) and (T[r('Raven 12')][c('prices')] != 100)"}, "6": {"text": "The $125 million plane, the aircraft with a top speed of Mach 3.4 and the jet built by Forsyth are all different jets.", "conditions": "(T[r(125)][c('top speeds')] != 'Mach 3.4') and (T[r('Forsyth')][c('top speeds')] != 'Mach 3.4') and (T[r(125)][c('companies')]!='Forsyth')"}, "7": {"text": "The plane with a top speed of Mach 3.2 is either the plane built by Tenerife or the plane built by Pittakan.", "conditions": "(T[r('Mach 3.2')][c('companies')] == 'Tenerife' or T[r('Mach 3.2')][c('companies')] == 'Pittakan')"}, "8": {"text": "The Falcon X-2 was built by Tenerife.", "conditions": "(T[r('Falcon X-2')][c('companies')] == 'Tenerife')"}}, "initial": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], "current": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "", "", ""], [175, "Raven 12", "", ""]], "applied_clues": ["5", "2"], "initial_to_current": [[["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "", "", ""], [175, "Raven 12", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "", "", ""], [175, "Raven 12", "", ""]]], "unsolvable_child": [["prices", "aircraft", "companies", "top speeds"], [100, "", "Forsyth", "Mach 2.9"], [125, "", "", ""], [150, "", "", "Mach 3.4"], [175, "Raven 12", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["prices", "aircraft", "companies", "top speeds"], [100, "Falcon X-2", "Tenerife", "Mach 2.9"], [125, "Kesseling", "Pittakan", "Mach 3.2"], [150, "Darkwing 6", "Ale and Moore", "Mach 3.4"], [175, "Raven 12", "Forsyth", "Mach 2.3"]], "current_status": "Solvable"}}
{"inputs": {"question": "The U. S. Air Force is currently testing a number of new experimental, supersonic aircraft, each built by a different aerospace company. Using only the clues below, match the prices to the options from aircraft, companies, and top speeds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 100, 125, 150, 175.\naircraft : Darkwing 6, Falcon X-2, Kesseling, Raven 12.\ncompanies : Ale and Moore, Forsyth, Pittakan, Tenerife.\ntop speeds : Mach 2.3, Mach 2.9, Mach 3.2, Mach 3.4.", "clues": {"1": {"text": "The Darkwing 6 costs 50 million dollars more than the jet built by Tenerife.", "conditions": "(T[r('Darkwing 6')][c('prices')] == T[r('Tenerife')][c('prices')] + 50)"}, "2": {"text": "The Raven 12 doesn't cost $125 million.", "conditions": "(T[r('Raven 12')][c('prices')] != 125)"}, "3": {"text": "The plane with a top speed of Mach 3.2 costs more than the jet built by Tenerife.", "conditions": "(T[r('Mach 3.2')][c('prices')] > T[r('Tenerife')][c('prices')])"}, "4": {"text": "The aircraft with a top speed of Mach 2.9, the aircraft built by Forsyth, and the $150 million aircraft are three different jets.", "conditions": "(T[r('Mach 2.9')][c('companies')]!='Forsyth') and (T[r(150)][c('companies')]!='Forsyth') and (T[r(150)][c('top speeds')]!='Mach 3.2')"}, "5": {"text": "The plane with a top speed of Mach 2.9 is either the Raven 12 or the $100 million jet.", "conditions": "(T[r('Mach 2.9')][c('aircraft')] == 'Raven 12' or T[r('Mach 2.9')][c('prices')] == 100) and (T[r('Raven 12')][c('prices')] != 100)"}, "6": {"text": "The $125 million plane, the aircraft with a top speed of Mach 3.4 and the jet built by Forsyth are all different jets.", "conditions": "(T[r(125)][c('top speeds')] != 'Mach 3.4') and (T[r('Forsyth')][c('top speeds')] != 'Mach 3.4') and (T[r(125)][c('companies')]!='Forsyth')"}, "7": {"text": "The plane with a top speed of Mach 3.2 is either the plane built by Tenerife or the plane built by Pittakan.", "conditions": "(T[r('Mach 3.2')][c('companies')] == 'Tenerife' or T[r('Mach 3.2')][c('companies')] == 'Pittakan')"}, "8": {"text": "The Falcon X-2 was built by Tenerife.", "conditions": "(T[r('Falcon X-2')][c('companies')] == 'Tenerife')"}}, "initial": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], "current": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "", "", "Mach 3.4"], [175, "Raven 12", "Forsyth", ""]], "applied_clues": ["5", "2", "6"], "initial_to_current": [[["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "", "", ""], [175, "Raven 12", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "", "", ""], [175, "Raven 12", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "", "", "Mach 3.4"], [175, "Raven 12", "Forsyth", ""]]], "unsolvable_child": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "", "", "Mach 3.4"], [175, "Raven 12", "Forsyth", "Mach 3.2"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["prices", "aircraft", "companies", "top speeds"], [100, "Falcon X-2", "Tenerife", "Mach 2.9"], [125, "Kesseling", "Pittakan", "Mach 3.2"], [150, "Darkwing 6", "Ale and Moore", "Mach 3.4"], [175, "Raven 12", "Forsyth", "Mach 2.3"]], "current_status": "Solvable"}}
{"inputs": {"question": "The U. S. Air Force is currently testing a number of new experimental, supersonic aircraft, each built by a different aerospace company. Using only the clues below, match the prices to the options from aircraft, companies, and top speeds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 100, 125, 150, 175.\naircraft : Darkwing 6, Falcon X-2, Kesseling, Raven 12.\ncompanies : Ale and Moore, Forsyth, Pittakan, Tenerife.\ntop speeds : Mach 2.3, Mach 2.9, Mach 3.2, Mach 3.4.", "clues": {"1": {"text": "The Darkwing 6 costs 50 million dollars more than the jet built by Tenerife.", "conditions": "(T[r('Darkwing 6')][c('prices')] == T[r('Tenerife')][c('prices')] + 50)"}, "2": {"text": "The Raven 12 doesn't cost $125 million.", "conditions": "(T[r('Raven 12')][c('prices')] != 125)"}, "3": {"text": "The plane with a top speed of Mach 3.2 costs more than the jet built by Tenerife.", "conditions": "(T[r('Mach 3.2')][c('prices')] > T[r('Tenerife')][c('prices')])"}, "4": {"text": "The aircraft with a top speed of Mach 2.9, the aircraft built by Forsyth, and the $150 million aircraft are three different jets.", "conditions": "(T[r('Mach 2.9')][c('companies')]!='Forsyth') and (T[r(150)][c('companies')]!='Forsyth') and (T[r(150)][c('top speeds')]!='Mach 3.2')"}, "5": {"text": "The plane with a top speed of Mach 2.9 is either the Raven 12 or the $100 million jet.", "conditions": "(T[r('Mach 2.9')][c('aircraft')] == 'Raven 12' or T[r('Mach 2.9')][c('prices')] == 100) and (T[r('Raven 12')][c('prices')] != 100)"}, "6": {"text": "The $125 million plane, the aircraft with a top speed of Mach 3.4 and the jet built by Forsyth are all different jets.", "conditions": "(T[r(125)][c('top speeds')] != 'Mach 3.4') and (T[r('Forsyth')][c('top speeds')] != 'Mach 3.4') and (T[r(125)][c('companies')]!='Forsyth')"}, "7": {"text": "The plane with a top speed of Mach 3.2 is either the plane built by Tenerife or the plane built by Pittakan.", "conditions": "(T[r('Mach 3.2')][c('companies')] == 'Tenerife' or T[r('Mach 3.2')][c('companies')] == 'Pittakan')"}, "8": {"text": "The Falcon X-2 was built by Tenerife.", "conditions": "(T[r('Falcon X-2')][c('companies')] == 'Tenerife')"}}, "initial": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], "current": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", "Mach 3.2"], [150, "", "", "Mach 3.4"], [175, "Raven 12", "Forsyth", ""]], "applied_clues": ["5", "2", "6", "4"], "initial_to_current": [[["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "", "", ""], [175, "Raven 12", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "", "", ""], [175, "Raven 12", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "", "", "Mach 3.4"], [175, "Raven 12", "Forsyth", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", "Mach 3.2"], [150, "", "", "Mach 3.4"], [175, "Raven 12", "Forsyth", ""]]], "unsolvable_child": [["prices", "aircraft", "companies", "top speeds"], [100, "", "Pittakan", "Mach 2.9"], [125, "", "Tenerife", "Mach 3.2"], [150, "", "Ale and Moore", "Mach 3.4"], [175, "Raven 12", "Forsyth", "Mach 2.3"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["prices", "aircraft", "companies", "top speeds"], [100, "Falcon X-2", "Tenerife", "Mach 2.9"], [125, "Kesseling", "Pittakan", "Mach 3.2"], [150, "Darkwing 6", "Ale and Moore", "Mach 3.4"], [175, "Raven 12", "Forsyth", "Mach 2.3"]], "current_status": "Solvable"}}
{"inputs": {"question": "The local foodie club met at Chez Martin last night for their monthly meal. Using only the clues below, match the prices to the options from names, wines, and entrees. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 24.99, 25.99, 26.99, 27.99.\nnames : Isabel, Joanna, Nick, Olga.\nwines : bordeaux, port, riesling, shiraz.\nentrees : beef stir-fry, blackened tuna, pork chops, sea bass.", "clues": {"1": {"text": "Isabel paid 1 dollar more than the one who had the port.", "conditions": "(T[r('Isabel')][c('prices')] == T[r('port')][c('prices')] + 1)"}, "2": {"text": "Joanna was either the diner who ordered the pork chops or the person who paid $27.99.", "conditions": "(T[r('Joanna')][c('entrees')] == 'pork chops' or T[r('Joanna')][c('prices')] == 27.99) and (T[r('pork chops')][c('prices')] != 27.99)"}, "3": {"text": "The diner who ordered the pork chops paid 1 dollar more than Nick.", "conditions": "(T[r('pork chops')][c('prices')] == T[r('Nick')][c('prices')] + 1)"}, "4": {"text": "Neither the diner who ordered the sea bass nor the one who had the bordeaux was Nick.", "conditions": "(T[r('Nick')][c('entrees')] != 'sea bass' and T[r('Nick')][c('wines')] != 'bordeaux') and (T[r('sea bass')][c('wines')] != 'bordeaux')"}, "5": {"text": "The diner who ordered the beef stir-fry paid 2 dollars less than the one who had the port.", "conditions": "(T[r('beef stir-fry')][c('prices')] == T[r('port')][c('prices')] - 2)"}, "6": {"text": "Of the one who had the riesling and Nick, one ordered the beef stir-fry and the other paid $25.99.", "conditions": "((T[r('riesling')][c('entrees')] == 'beef stir-fry' and T[r('Nick')][c('prices')] == 25.99) or (T[r('riesling')][c('prices')] == 25.99 and T[r('Nick')][c('entrees')] == 'beef stir-fry')) and (T[r('Nick')][c('wines')] != 'riesling') and (T[r('beef stir-fry')][c('prices')] != 25.99)"}}, "initial": [["prices", "names", "wines", "entrees"], [24.99, "", "", ""], [25.99, "", "", ""], [26.99, "", "", ""], [27.99, "", "", ""]], "current": [["prices", "names", "wines", "entrees"], [24.99, "Nick", "", "beef stir-fry"], [25.99, "", "riesling", ""], [26.99, "", "", ""], [27.99, "", "", ""]], "applied_clues": ["6"], "initial_to_current": [[["prices", "names", "wines", "entrees"], [24.99, "", "", ""], [25.99, "", "", ""], [26.99, "", "", ""], [27.99, "", "", ""]], [["prices", "names", "wines", "entrees"], [24.99, "Nick", "", "beef stir-fry"], [25.99, "", "riesling", ""], [26.99, "", "", ""], [27.99, "", "", ""]]], "unsolvable_child": [["prices", "names", "wines", "entrees"], [24.99, "Nick", "", "beef stir-fry"], [25.99, "", "riesling", "pork chops"], [26.99, "", "", ""], [27.99, "Joanna", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "names", "wines", "entrees"], [24.99, "Nick", "shiraz", "beef stir-fry"], [25.99, "Joanna", "riesling", "pork chops"], [26.99, "Olga", "port", "sea bass"], [27.99, "Isabel", "bordeaux", "blackened tuna"]], "current_status": "Solvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "MRT-628", ""]], "applied_clues": ["4"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "MRT-628", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "", ""], [75, "", "", ""], [100, "", "MRT-628", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Solvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", "Kansas"], [75, "Etsalle", "", ""], [100, "", "MRT-628", ""]], "applied_clues": ["4", "3"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "MRT-628", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", "Kansas"], [75, "Etsalle", "", ""], [100, "", "MRT-628", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", "Kansas"], [75, "Etsalle", "BMG-831", ""], [100, "Injitsu", "MRT-628", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Solvable"}}
{"inputs": {"question": "Using only the clues below, match the nominations to the options from movies, directors, and genres. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "nominations : 2, 3, 4, 5.\nmovies : Silk Mist, The Illusion, Thorn of Suns, Wild Ones.\ndirectors : Danny Trevor, Gabby Jones, Tank Reznor, Virgil Katz.\ngenres : comedy, drama, romance, thriller.", "clues": {"1": {"text": "The thriller is either the movie that received 4 nominations or Wild Ones.", "conditions": "(T[r('thriller')][c('nominations')] == 4 or T[r('thriller')][c('movies')] == 'Wild Ones') and (T[r(4)][c('movies')] != 'Wild Ones')"}, "2": {"text": "The film directed by Virgil Katz received one more nomination than the film directed by Danny Trevor.", "conditions": "(T[r('Virgil Katz')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] + 1)"}, "3": {"text": "The movie directed by Gabby Jones is either the film that received 4 nominations or Thorn of Suns.", "conditions": "(T[r('Gabby Jones')][c('nominations')] == 4 or T[r('Gabby Jones')][c('movies')] == 'Thorn of Suns') and (T[r(4)][c('movies')] != 'Thorn of Suns')"}, "4": {"text": "The comedy was directed by Tank Reznor.", "conditions": "(T[r('comedy')][c('directors')] == 'Tank Reznor')"}, "5": {"text": "Wild Ones received one fewer nomination than the movie directed by Danny Trevor.", "conditions": "(T[r('Wild Ones')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] - 1)"}, "6": {"text": "Silk Mist was the drama.", "conditions": "(T[r('Silk Mist')][c('genres')] == 'drama')"}, "7": {"text": "The romance received more nominations than the movie directed by Tank Reznor.", "conditions": "(T[r('romance')][c('nominations')] > T[r('Tank Reznor')][c('nominations')])"}}, "initial": [["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "", "", ""], [4, "", "", "thriller"], [5, "", "", ""]], "applied_clues": ["1"], "initial_to_current": [[["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "", "", ""], [4, "", "", "thriller"], [5, "", "", ""]]], "unsolvable_child": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "Thorn of Suns", "Gabby Jones", ""], [4, "", "", "thriller"], [5, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "comedy"], [3, "Silk Mist", "Danny Trevor", "drama"], [4, "The Illusion", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", "romance"]], "current_status": "Solvable"}}
{"inputs": {"question": "Using only the clues below, match the nominations to the options from movies, directors, and genres. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "nominations : 2, 3, 4, 5.\nmovies : Silk Mist, The Illusion, Thorn of Suns, Wild Ones.\ndirectors : Danny Trevor, Gabby Jones, Tank Reznor, Virgil Katz.\ngenres : comedy, drama, romance, thriller.", "clues": {"1": {"text": "The thriller is either the movie that received 4 nominations or Wild Ones.", "conditions": "(T[r('thriller')][c('nominations')] == 4 or T[r('thriller')][c('movies')] == 'Wild Ones') and (T[r(4)][c('movies')] != 'Wild Ones')"}, "2": {"text": "The film directed by Virgil Katz received one more nomination than the film directed by Danny Trevor.", "conditions": "(T[r('Virgil Katz')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] + 1)"}, "3": {"text": "The movie directed by Gabby Jones is either the film that received 4 nominations or Thorn of Suns.", "conditions": "(T[r('Gabby Jones')][c('nominations')] == 4 or T[r('Gabby Jones')][c('movies')] == 'Thorn of Suns') and (T[r(4)][c('movies')] != 'Thorn of Suns')"}, "4": {"text": "The comedy was directed by Tank Reznor.", "conditions": "(T[r('comedy')][c('directors')] == 'Tank Reznor')"}, "5": {"text": "Wild Ones received one fewer nomination than the movie directed by Danny Trevor.", "conditions": "(T[r('Wild Ones')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] - 1)"}, "6": {"text": "Silk Mist was the drama.", "conditions": "(T[r('Silk Mist')][c('genres')] == 'drama')"}, "7": {"text": "The romance received more nominations than the movie directed by Tank Reznor.", "conditions": "(T[r('romance')][c('nominations')] > T[r('Tank Reznor')][c('nominations')])"}}, "initial": [["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "comedy"], [3, "", "Danny Trevor", ""], [4, "", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", ""]], "applied_clues": ["1", "3", "5", "2", "4"], "initial_to_current": [[["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "", "", ""], [4, "", "", "thriller"], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "", "", ""], [4, "", "", "thriller"], [5, "Thorn of Suns", "Gabby Jones", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "", "Danny Trevor", ""], [4, "", "", "thriller"], [5, "Thorn of Suns", "Gabby Jones", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "", "Danny Trevor", ""], [4, "", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "comedy"], [3, "", "Danny Trevor", ""], [4, "", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", ""]]], "unsolvable_child": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "comedy"], [3, "", "Danny Trevor", "romance"], [4, "", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", "drama"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "comedy"], [3, "Silk Mist", "Danny Trevor", "drama"], [4, "The Illusion", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", "romance"]], "current_status": "Solvable"}}
{"inputs": {"question": "MVP Events prides itself on planning large-scale parties for 50 or more people, anywhere in the United States. This month the company has several different events to plan. Using only the clues below, match the people to the options from planners, events, and locations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "people : 50, 75, 100, 125.\nplanners : Bridget, Clarence, Herbert, Oliver.\nevents : anniversary, graduation, retreat, symposium.\nlocations : Connecticut, Delaware, Georgia, Wyoming.", "clues": {"1": {"text": "The event in Connecticut will involve 25 more people than the symposium job.", "conditions": "(T[r('Connecticut')][c('people')] == T[r('symposium')][c('people')] + 25)"}, "2": {"text": "The assignment in Delaware will involve 25 more people than Oliver's job.", "conditions": "(T[r('Delaware')][c('people')] == T[r('Oliver')][c('people')] + 25)"}, "3": {"text": "Bridget's job won't be in Wyoming.", "conditions": "(T[r('Bridget')][c('locations')] != 'Wyoming')"}, "4": {"text": "Of the event in Wyoming and Clarence's event, one will have 125 attendees and the other is the graduation.", "conditions": "((T[r('Wyoming')][c('people')] == 125 and T[r('Clarence')][c('events')] == 'graduation') or (T[r('Wyoming')][c('events')] == 'graduation' and T[r('Clarence')][c('people')] == 125)) and (T[r('graduation')][c('people')] != 125) and (T[r('Clarence')][c('locations')] != 'Wyoming')"}, "5": {"text": "The retreat assignment will involve somewhat more people than the event in Connecticut.", "conditions": "(T[r('retreat')][c('people')] > T[r('Connecticut')][c('people')])"}, "6": {"text": "Oliver's job is either the event in Georgia or the symposium assignment.", "conditions": "(T[r('Oliver')][c('locations')] == 'Georgia' or T[r('Oliver')][c('events')] == 'symposium') and (T[r('Georgia')][c('events')] != 'symposium')"}}, "initial": [["people", "planners", "events", "locations"], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""], [125, "", "", ""]], "current": [["people", "planners", "events", "locations"], [50, "", "", ""], [75, "", "", ""], [100, "Clarence", "graduation", ""], [125, "", "", "Wyoming"]], "applied_clues": ["4"], "initial_to_current": [[["people", "planners", "events", "locations"], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""], [125, "", "", ""]], [["people", "planners", "events", "locations"], [50, "", "", ""], [75, "", "", ""], [100, "Clarence", "graduation", ""], [125, "", "", "Wyoming"]]], "unsolvable_child": [["people", "planners", "events", "locations"], [50, "", "symposium", ""], [75, "", "", "Connecticut"], [100, "Clarence", "graduation", ""], [125, "", "", "Wyoming"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["people", "planners", "events", "locations"], [50, "Oliver", "anniversary", "Georgia"], [75, "Bridget", "symposium", "Delaware"], [100, "Clarence", "graduation", "Connecticut"], [125, "Herbert", "retreat", "Wyoming"]], "current_status": "Solvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "Explore More", "Sheryl", ""], [400, "", "", "Airstream"]], "applied_clues": ["2"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "Explore More", "Sheryl", ""], [400, "", "", "Airstream"]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "", "", ""], [350, "Explore More", "Sheryl", "Mack truck"], [400, "", "", "Airstream"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Solvable"}}
{"inputs": {"question": "Gil Glabbers has lived on the coast of Guernsey, in the English Channel, for more than a decade. In that time he's found a number of difference \"messages in a bottle\" washed up on his beach. Using only the clues below, match the year sent to the options from writers and origins. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "year sent : 1962, 1969, 1976, 1983.\nwriters : Felipe, Karla, Sean, Tracy.\norigins : Bournemouth, Cherbourg, Le Havre, Plymouth.", "clues": {"1": {"text": "The message from Plymouth was sent 14 years after the letter from Cherbourg.", "conditions": "(T[r('Plymouth')][c('year sent')] - T[r('Cherbourg')][c('year sent')] == 14)"}, "2": {"text": "Tracy's letter was sent in 1962.", "conditions": "(T[r('Tracy')][c('year sent')] == 1962)"}, "3": {"text": "The bottle from Plymouth is either Karla's bottle or Tracy's missive.", "conditions": "(T[r('Plymouth')][c('writers')] == 'Karla' or T[r('Plymouth')][c('writers')] == 'Tracy')"}, "4": {"text": "Sean's missive is either the letter that was sent in 1983 or the message that was sent in 1962.", "conditions": "(T[r('Sean')][c('year sent')] == 1983 or T[r('Sean')][c('year sent')] == 1962)"}, "5": {"text": "Sean's bottle was from Le Havre.", "conditions": "(T[r('Sean')][c('origins')] == 'Le Havre')"}}, "initial": [["year sent", "writers", "origins"], [1962, "", ""], [1969, "", ""], [1976, "", ""], [1983, "", ""]], "current": [["year sent", "writers", "origins"], [1962, "Tracy", ""], [1969, "", ""], [1976, "", ""], [1983, "Sean", ""]], "applied_clues": ["4", "2"], "initial_to_current": [[["year sent", "writers", "origins"], [1962, "", ""], [1969, "", ""], [1976, "", ""], [1983, "", ""]], [["year sent", "writers", "origins"], [1962, "", ""], [1969, "", ""], [1976, "", ""], [1983, "Sean", ""]], [["year sent", "writers", "origins"], [1962, "Tracy", ""], [1969, "", ""], [1976, "", ""], [1983, "Sean", ""]]], "unsolvable_child": [["year sent", "writers", "origins"], [1962, "Tracy", "Plymouth"], [1969, "Karla", ""], [1976, "Felipe", ""], [1983, "Sean", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["year sent", "writers", "origins"], [1962, "Tracy", "Cherbourg"], [1969, "Felipe", "Bournemouth"], [1976, "Karla", "Plymouth"], [1983, "Sean", "Le Havre"]], "current_status": "Solvable"}}
{"inputs": {"question": "Box Office Weekly is putting together its latest blog entry covering this past weekend's movie premieres. Using only the clues below, match the earnings to the options from movies and directors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "earnings : 2, 5, 8, 11.\nmovies : Amerigo, Easy to Love, Tippecanoe, Zephyr Breeze.\ndirectors : Hick Harmon, Micah Moreno, Nan Norman, Odette Olson.", "clues": {"1": {"text": "Amerigo made 6 million less than the movie directed by Hick Harmon.", "conditions": "(T[r('Amerigo')][c('earnings')]==T[r('Hick Harmon')][c('earnings')]-6)"}, "2": {"text": "Zephyr Breeze made 6 million more than Amerigo.", "conditions": "(T[r('Zephyr Breeze')][c('earnings')] == T[r('Amerigo')][c('earnings')] + 6)"}, "3": {"text": "The movie directed by Micah Moreno made somewhat more than Tippecanoe.", "conditions": "(T[r('Micah Moreno')][c('earnings')] > T[r('Tippecanoe')][c('earnings')])"}, "4": {"text": "Of the movie directed by Nan Norman and Easy to Love, one made $11 million and the other made $2 million.", "conditions": "((T[r('Nan Norman')][c('earnings')] == 11 and T[r('Easy to Love')][c('earnings')] == 2) or (T[r('Nan Norman')][c('earnings')] == 2 and T[r('Easy to Love')][c('earnings')] == 11)) and (T[r('Nan Norman')][c('movies')] != 'Easy to Love')"}}, "initial": [["earnings", "movies", "directors"], [2, "", ""], [5, "", ""], [8, "", ""], [11, "", ""]], "current": [["earnings", "movies", "directors"], [2, "", "Nan Norman"], [5, "", ""], [8, "", ""], [11, "Easy to Love", ""]], "applied_clues": ["4"], "initial_to_current": [[["earnings", "movies", "directors"], [2, "", ""], [5, "", ""], [8, "", ""], [11, "", ""]], [["earnings", "movies", "directors"], [2, "", "Nan Norman"], [5, "", ""], [8, "", ""], [11, "Easy to Love", ""]]], "unsolvable_child": [["earnings", "movies", "directors"], [2, "", "Nan Norman"], [5, "Amerigo", ""], [8, "", ""], [11, "Easy to Love", "Hick Harmon"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["earnings", "movies", "directors"], [2, "Amerigo", "Nan Norman"], [5, "Tippecanoe", "Odette Olson"], [8, "Zephyr Breeze", "Hick Harmon"], [11, "Easy to Love", "Micah Moreno"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Norfolk Times recently sponsored a \"Sail Around the World\" race that pitted dozens of sailors against each other to see who could circumnavigate the globe, solo, in the fewest number of days. Using only the clues below, match the days to the options from sailors and boat types. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 270, 274, 278, 282.\nsailors : Ed Alexander, Tara Carroll, Vicky Estes, Wendell Orr.\nboat types : gaff cutter, pilot cutter, schooner, sloop.", "clues": {"1": {"text": "Wendell Orr was either the sailor who finished in 270 days or the person in the gaff cutter.", "conditions": "(T[r('Wendell Orr')][c('days')] == 270 or T[r('Wendell Orr')][c('boat types')] == 'gaff cutter') and (T[r('gaff cutter')][c('days')] != 270)"}, "2": {"text": "Of Vicky Estes and the competitor in the sloop, one finished in 270 days and the other finished in 278 days.", "conditions": "((T[r('Vicky Estes')][c('days')] == 270 and T[r('sloop')][c('days')] == 278) or (T[r('Vicky Estes')][c('days')] == 278 and T[r('sloop')][c('days')] == 270)) and (T[r('sloop')][c('sailors')] != 'Vicky Estes')"}, "3": {"text": "Tara Carroll took 4 more days to finish than Ed Alexander.", "conditions": "(T[r('Tara Carroll')][c('days')] == T[r('Ed Alexander')][c('days')] + 4)"}, "4": {"text": "The sailor in the pilot cutter took 4 fewer days to finish than Ed Alexander.", "conditions": "(T[r('pilot cutter')][c('days')] == T[r('Ed Alexander')][c('days')] - 4)"}}, "initial": [["days", "sailors", "boat types"], [270, "", ""], [274, "", ""], [278, "", ""], [282, "", ""]], "current": [["days", "sailors", "boat types"], [270, "Vicky Estes", ""], [274, "", ""], [278, "", "sloop"], [282, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["days", "sailors", "boat types"], [270, "", ""], [274, "", ""], [278, "", ""], [282, "", ""]], [["days", "sailors", "boat types"], [270, "Vicky Estes", ""], [274, "", ""], [278, "", "sloop"], [282, "", ""]]], "unsolvable_child": [["days", "sailors", "boat types"], [270, "Vicky Estes", ""], [274, "Wendell Orr", "gaff cutter"], [278, "", "sloop"], [282, "", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["days", "sailors", "boat types"], [270, "Vicky Estes", "pilot cutter"], [274, "Ed Alexander", "schooner"], [278, "Tara Carroll", "sloop"], [282, "Wendell Orr", "gaff cutter"]], "current_status": "Solvable"}}
{"inputs": {"question": "Nicholas and Edith are having a small dinner party this evening at their home in Cedar Valley, and they've decided to open a select number of rare wines from their personal collection to celebrate the occasion. Using only the clues below, match the vintages to the options from wines and types. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "vintages : 1984, 1988, 1992, 1996.\nwines : Annata Branco, Bianca Flaux, Ece Suss, Vendemmia.\ntypes : gewurztraminer, merlot, pinot noir, riesling.", "clues": {"1": {"text": "The Ece Suss was bottled sometime after the Annata Branco.", "conditions": "(T[r('Ece Suss')][c('vintages')] > T[r('Annata Branco')][c('vintages')])"}, "2": {"text": "The Bianca Flaux was bottled 4 years before the Vendemmia.", "conditions": "(T[r('Vendemmia')][c('vintages')] - T[r('Bianca Flaux')][c('vintages')] == 4)"}, "3": {"text": "The 1988 bottle is a pinot noir.", "conditions": "(T[r(1988)][c('types')] == 'pinot noir')"}, "4": {"text": "The merlot is either the Annata Branco or the Bianca Flaux.", "conditions": "(T[r('merlot')][c('wines')] == 'Annata Branco' or T[r('merlot')][c('wines')] == 'Bianca Flaux')"}, "5": {"text": "The Bianca Flaux was bottled sometime after the Ece Suss.", "conditions": "(T[r('Bianca Flaux')][c('vintages')] > T[r('Ece Suss')][c('vintages')])"}, "6": {"text": "The 1984 bottle is a gewurztraminer.", "conditions": "(T[r(1984)][c('types')] == 'gewurztraminer')"}}, "initial": [["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], "current": [["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]], "applied_clues": ["2"], "initial_to_current": [[["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], [["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]]], "unsolvable_child": [["vintages", "wines", "types"], [1984, "Annata Branco", "merlot"], [1988, "", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["vintages", "wines", "types"], [1984, "Annata Branco", "gewurztraminer"], [1988, "Ece Suss", "pinot noir"], [1992, "Bianca Flaux", "merlot"], [1996, "Vendemmia", "riesling"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], "applied_clues": ["4"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "Night Ninjas", "purple", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], "applied_clues": ["4", "11"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "Night Ninjas", "purple", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "Night Ninjas", "purple", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "", "white", "Forest City"], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "Night Ninjas", "purple", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "Night Ninjas", "purple", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "", "white", "Forest City"], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "Night Ninjas", "purple", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Target Bombs", "white", "Forest City"], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "Night Ninjas", "purple", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Solvable"}}
{"inputs": {"question": "Piper Hills Academy recently installed a high-speed 3-D printer in its technology lab, and several students were given an opportunity this week to use it in order to print items of their own design. Using only the clues below, match the times to the options from students, items, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 10, 15, 20, 25, 30, 35.\nstudents : Adrienne, Bertha, Eleanor, Felicia, Irma, Willis.\nitems : cup, flower, mask, phone case, skull, whistle.\ncolors : green, orange, purple, red, white, yellow.", "clues": {"1": {"text": "The skull took 5 more minutes to print than Bertha's piece.", "conditions": "(T[r('skull')][c('times')] == 5 + T[r('Bertha')][c('times')])"}, "2": {"text": "Of the red piece and the item that printed in 20 minutes, one was the mask and the other was Felicia's.", "conditions": "(((T[r('red')][c('items')] == 'mask' and T[r(20)][c('students')] == 'Felicia') or (T[r('red')][c('students')] == 'Felicia' and T[r(20)][c('items')] == 'mask'))) and (T[r(20)][c('colors')] != 'red') and (T[r('Felicia')][c('items')] != 'mask')"}, "3": {"text": "Willis's item wasn't the skull.", "conditions": "(T[r('Willis')][c('items')] != 'skull')"}, "4": {"text": "The item that printed in 25 minutes wasn't the phone case.", "conditions": "(T[r(25)][c('items')] != 'phone case')"}, "5": {"text": "Adrienne's piece was either the piece that printed in 10 minutes or the red item.", "conditions": "(T[r('Adrienne')][c('times')] == 10 or T[r('Adrienne')][c('colors')] == 'red') and (T[r(10)][c('colors')] != 'red')"}, "6": {"text": "Of the item that printed in 30 minutes and the item that printed in 20 minutes, one was Irma's and the other was the skull.", "conditions": "(((T[r(30)][c('students')] == 'Irma' and T[r(20)][c('items')] == 'skull') or (T[r(30)][c('items')] == 'skull' and T[r(20)][c('students')] == 'Irma'))) and (T[r('Irma')][c('items')] != 'skull')"}, "7": {"text": "Bertha's piece took 10 more minutes to print than the flower.", "conditions": "(T[r('Bertha')][c('times')] == 10 + T[r('flower')][c('times')])"}, "8": {"text": "The yellow design wasn't the phone case.", "conditions": "(T[r('yellow')][c('items')] != 'phone case')"}, "9": {"text": "Of the flower and the white design, one took 15 minutes to print and the other took 10 minutes to print.", "conditions": "(((T[r('flower')][c('times')] == 15 and T[r('white')][c('times')] == 10) or (T[r('flower')][c('times')] == 10 and T[r('white')][c('times')] == 15))) and (T[r('flower')][c('colors')] != 'white')"}, "10": {"text": "The cup required somewhat fewer minutes to print than Felicia's design.", "conditions": "(T[r('cup')][c('times')] < T[r('Felicia')][c('times')])"}, "11": {"text": "Felicia's design required 15 fewer minutes to print than the green item.", "conditions": "(T[r('Felicia')][c('times')] == T[r('green')][c('times')] - 15)"}, "12": {"text": "The orange design, the flower, Irma's item and the item that printed in 35 minutes were all different items.", "conditions": "(T[r('orange')][c('items')] != 'flower') and (T[r('orange')][c('students')] != 'Irma') and (T[r('orange')][c('times')] != 35) and (T[r('flower')][c('students')] != 'Irma') and (T[r('flower')][c('times')] != 35) and (T[r('Irma')][c('times')] != 35)"}}, "initial": [["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "current": [["times", "students", "items", "colors"], [10, "", "", "white"], [15, "", "flower", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "applied_clues": ["9"], "initial_to_current": [[["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "", "white"], [15, "", "flower", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]]], "unsolvable_child": [["times", "students", "items", "colors"], [10, "", "", "white"], [15, "", "flower", ""], [20, "", "skull", ""], [25, "", "", ""], [30, "Irma", "", ""], [35, "", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["times", "students", "items", "colors"], [10, "Adrienne", "cup", "white"], [15, "Felicia", "flower", "red"], [20, "Irma", "mask", "yellow"], [25, "Bertha", "whistle", "orange"], [30, "Eleanor", "skull", "green"], [35, "Willis", "phone case", "purple"]], "current_status": "Solvable"}}
{"inputs": {"question": "Piper Hills Academy recently installed a high-speed 3-D printer in its technology lab, and several students were given an opportunity this week to use it in order to print items of their own design. Using only the clues below, match the times to the options from students, items, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 10, 15, 20, 25, 30, 35.\nstudents : Adrienne, Bertha, Eleanor, Felicia, Irma, Willis.\nitems : cup, flower, mask, phone case, skull, whistle.\ncolors : green, orange, purple, red, white, yellow.", "clues": {"1": {"text": "The skull took 5 more minutes to print than Bertha's piece.", "conditions": "(T[r('skull')][c('times')] == 5 + T[r('Bertha')][c('times')])"}, "2": {"text": "Of the red piece and the item that printed in 20 minutes, one was the mask and the other was Felicia's.", "conditions": "(((T[r('red')][c('items')] == 'mask' and T[r(20)][c('students')] == 'Felicia') or (T[r('red')][c('students')] == 'Felicia' and T[r(20)][c('items')] == 'mask'))) and (T[r(20)][c('colors')] != 'red') and (T[r('Felicia')][c('items')] != 'mask')"}, "3": {"text": "Willis's item wasn't the skull.", "conditions": "(T[r('Willis')][c('items')] != 'skull')"}, "4": {"text": "The item that printed in 25 minutes wasn't the phone case.", "conditions": "(T[r(25)][c('items')] != 'phone case')"}, "5": {"text": "Adrienne's piece was either the piece that printed in 10 minutes or the red item.", "conditions": "(T[r('Adrienne')][c('times')] == 10 or T[r('Adrienne')][c('colors')] == 'red') and (T[r(10)][c('colors')] != 'red')"}, "6": {"text": "Of the item that printed in 30 minutes and the item that printed in 20 minutes, one was Irma's and the other was the skull.", "conditions": "(((T[r(30)][c('students')] == 'Irma' and T[r(20)][c('items')] == 'skull') or (T[r(30)][c('items')] == 'skull' and T[r(20)][c('students')] == 'Irma'))) and (T[r('Irma')][c('items')] != 'skull')"}, "7": {"text": "Bertha's piece took 10 more minutes to print than the flower.", "conditions": "(T[r('Bertha')][c('times')] == 10 + T[r('flower')][c('times')])"}, "8": {"text": "The yellow design wasn't the phone case.", "conditions": "(T[r('yellow')][c('items')] != 'phone case')"}, "9": {"text": "Of the flower and the white design, one took 15 minutes to print and the other took 10 minutes to print.", "conditions": "(((T[r('flower')][c('times')] == 15 and T[r('white')][c('times')] == 10) or (T[r('flower')][c('times')] == 10 and T[r('white')][c('times')] == 15))) and (T[r('flower')][c('colors')] != 'white')"}, "10": {"text": "The cup required somewhat fewer minutes to print than Felicia's design.", "conditions": "(T[r('cup')][c('times')] < T[r('Felicia')][c('times')])"}, "11": {"text": "Felicia's design required 15 fewer minutes to print than the green item.", "conditions": "(T[r('Felicia')][c('times')] == T[r('green')][c('times')] - 15)"}, "12": {"text": "The orange design, the flower, Irma's item and the item that printed in 35 minutes were all different items.", "conditions": "(T[r('orange')][c('items')] != 'flower') and (T[r('orange')][c('students')] != 'Irma') and (T[r('orange')][c('times')] != 35) and (T[r('flower')][c('students')] != 'Irma') and (T[r('flower')][c('times')] != 35) and (T[r('Irma')][c('times')] != 35)"}}, "initial": [["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "current": [["times", "students", "items", "colors"], [10, "", "", "white"], [15, "", "flower", ""], [20, "Irma", "", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "", "", ""]], "applied_clues": ["9", "6"], "initial_to_current": [[["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "", "white"], [15, "", "flower", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "", "white"], [15, "", "flower", ""], [20, "Irma", "", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "", "", ""]]], "unsolvable_child": [["times", "students", "items", "colors"], [10, "", "", "white"], [15, "", "flower", ""], [20, "Irma", "mask", ""], [25, "Felicia", "", "red"], [30, "", "skull", ""], [35, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["times", "students", "items", "colors"], [10, "Adrienne", "cup", "white"], [15, "Felicia", "flower", "red"], [20, "Irma", "mask", "yellow"], [25, "Bertha", "whistle", "orange"], [30, "Eleanor", "skull", "green"], [35, "Willis", "phone case", "purple"]], "current_status": "Solvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "", ""], [22, "", "violet", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "applied_clues": ["4"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Cesar", "", ""], [22, "", "violet", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "", ""], [22, "", "violet", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Solvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", ""], [22, "", "violet", "Waldoboro"], [23, "Anthony", "", "Kamrar"], [24, "", "", ""], [25, "", "indigo", ""], [26, "", "", ""]], "applied_clues": ["4", "2", "1", "3"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Cesar", "", ""], [22, "", "violet", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Cesar", "", ""], [22, "", "violet", "Waldoboro"], [23, "Anthony", "", "Kamrar"], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", ""], [22, "", "violet", "Waldoboro"], [23, "Anthony", "", "Kamrar"], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", ""], [22, "", "violet", "Waldoboro"], [23, "Anthony", "", "Kamrar"], [24, "", "", ""], [25, "", "indigo", ""], [26, "", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "", "violet", "Waldoboro"], [23, "Anthony", "", "Kamrar"], [24, "", "gray", ""], [25, "Orlando", "indigo", ""], [26, "", "", ""]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Solvable"}}
{"inputs": {"question": "\"Against the Grain\" offers hand-made wooden furniture at reasonable prices. Each item is made by an in-house employee. Using only the clues below, match the dollars to the options from woodworkers, woods, and pieces. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "dollars: 250, 275, 300, 325, 350, 375.\nwoodworkers : Bonita, Ellen, Josephine, Kendra, Olivia, Patsy.\nwoods : ash, mahogany, oak, poplar, rosewood, walnut.\npieces : barstool, bookshelf, coffee table, end table, footstool, hutch.", "clues": {"1": {"text": "The $325 piece is the barstool.", "conditions": "(T[r(325)][c('pieces')] == 'barstool')"}, "2": {"text": "Of the piece made of ash and the barstool, one was crafted by Bonita and the other costs $250.", "conditions": "((T[r('ash')][c('woodworkers')] == 'Bonita' and T[r('barstool')][c('dollars')] == 250 ) or (T[r('barstool')][c('woodworkers')] == 'Bonita' and T[r('ash')][c('dollars')] == 250)) and (T[r('ash')][c('pieces')] != 'barstool') and (T[r('Bonita')][c('dollars')] != 250)"}, "3": {"text": "The end table costs 25 dollars more than Ellen's item.", "conditions": "(T[r('end table')][c('dollars')] == T[r('Ellen')][c('dollars')] + 25)"}, "4": {"text": "Ellen's piece costs 50 dollars more than the hutch.", "conditions": "(T[r('Ellen')][c('dollars')] == T[r('hutch')][c('dollars')] + 50)"}, "5": {"text": "The bookshelf wasn't made of oak.", "conditions": "(T[r('bookshelf')][c('woods')] != 'oak')"}, "6": {"text": "Kendra's item wasn't made of rosewood.", "conditions": "(T[r('Kendra')][c('woods')] != 'rosewood')"}, "7": {"text": "Neither the coffee table nor the item made of oak is Kendra's piece.", "conditions": "(T[r('Kendra')][c('pieces')] != 'coffee table' and T[r('oak')][c('woodworkers')] != 'Kendra') and (T[r('oak')][c('pieces')] != 'coffee table')"}, "8": {"text": "Josephine's item is either the item made of walnut or the end table.", "conditions": "(T[r('Josephine')][c('woods')] == 'walnut' or T[r('Josephine')][c('pieces')] == 'end table') and (T[r('walnut')][c('pieces')] != 'end table')"}, "9": {"text": "Of Bonita's piece and the bookshelf, one was made of poplar and the other costs $275.", "conditions": "((T[r('Bonita')][c('woods')] == 'poplar' and T[r('bookshelf')][c('dollars')] == 275) or (T[r('bookshelf')][c('woods')] == 'poplar' and T[r('Bonita')][c('dollars')] == 275)) and (T[r('Bonita')][c('pieces')] != 'bookshelf') and (T[r('poplar')][c('dollars')] != 275)"}, "10": {"text": "The piece made of walnut costs 75 dollars more than Patsy's piece.", "conditions": "(T[r('walnut')][c('dollars')] == T[r('Patsy')][c('dollars')] + 75)"}, "11": {"text": "Neither the piece made of oak nor the item made of walnut is the coffee table.", "conditions": "(T[r('oak')][c('pieces')] != 'coffee table' and T[r('walnut')][c('pieces')] != 'coffee table')"}}, "initial": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], "current": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "", "", ""], [375, "", "", ""]], "applied_clues": ["2", "9", "1"], "initial_to_current": [[["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", ""], [300, "", "", ""], [325, "Bonita", "", "barstool"], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "", "", ""], [375, "", "", ""]]], "unsolvable_child": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "Ellen", "", "bookshelf"], [300, "", "", "end table"], [325, "Bonita", "poplar", "barstool"], [350, "", "", ""], [375, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["dollars", "woodworkers", "woods", "pieces"], [250, "Olivia", "ash", "coffee table"], [275, "Patsy", "rosewood", "bookshelf"], [300, "Kendra", "mahogany", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", "footstool"], [375, "Josephine", "oak", "end table"]], "current_status": "Solvable"}}
{"inputs": {"question": "\"Against the Grain\" offers hand-made wooden furniture at reasonable prices. Each item is made by an in-house employee. Using only the clues below, match the dollars to the options from woodworkers, woods, and pieces. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "dollars: 250, 275, 300, 325, 350, 375.\nwoodworkers : Bonita, Ellen, Josephine, Kendra, Olivia, Patsy.\nwoods : ash, mahogany, oak, poplar, rosewood, walnut.\npieces : barstool, bookshelf, coffee table, end table, footstool, hutch.", "clues": {"1": {"text": "The $325 piece is the barstool.", "conditions": "(T[r(325)][c('pieces')] == 'barstool')"}, "2": {"text": "Of the piece made of ash and the barstool, one was crafted by Bonita and the other costs $250.", "conditions": "((T[r('ash')][c('woodworkers')] == 'Bonita' and T[r('barstool')][c('dollars')] == 250 ) or (T[r('barstool')][c('woodworkers')] == 'Bonita' and T[r('ash')][c('dollars')] == 250)) and (T[r('ash')][c('pieces')] != 'barstool') and (T[r('Bonita')][c('dollars')] != 250)"}, "3": {"text": "The end table costs 25 dollars more than Ellen's item.", "conditions": "(T[r('end table')][c('dollars')] == T[r('Ellen')][c('dollars')] + 25)"}, "4": {"text": "Ellen's piece costs 50 dollars more than the hutch.", "conditions": "(T[r('Ellen')][c('dollars')] == T[r('hutch')][c('dollars')] + 50)"}, "5": {"text": "The bookshelf wasn't made of oak.", "conditions": "(T[r('bookshelf')][c('woods')] != 'oak')"}, "6": {"text": "Kendra's item wasn't made of rosewood.", "conditions": "(T[r('Kendra')][c('woods')] != 'rosewood')"}, "7": {"text": "Neither the coffee table nor the item made of oak is Kendra's piece.", "conditions": "(T[r('Kendra')][c('pieces')] != 'coffee table' and T[r('oak')][c('woodworkers')] != 'Kendra') and (T[r('oak')][c('pieces')] != 'coffee table')"}, "8": {"text": "Josephine's item is either the item made of walnut or the end table.", "conditions": "(T[r('Josephine')][c('woods')] == 'walnut' or T[r('Josephine')][c('pieces')] == 'end table') and (T[r('walnut')][c('pieces')] != 'end table')"}, "9": {"text": "Of Bonita's piece and the bookshelf, one was made of poplar and the other costs $275.", "conditions": "((T[r('Bonita')][c('woods')] == 'poplar' and T[r('bookshelf')][c('dollars')] == 275) or (T[r('bookshelf')][c('woods')] == 'poplar' and T[r('Bonita')][c('dollars')] == 275)) and (T[r('Bonita')][c('pieces')] != 'bookshelf') and (T[r('poplar')][c('dollars')] != 275)"}, "10": {"text": "The piece made of walnut costs 75 dollars more than Patsy's piece.", "conditions": "(T[r('walnut')][c('dollars')] == T[r('Patsy')][c('dollars')] + 75)"}, "11": {"text": "Neither the piece made of oak nor the item made of walnut is the coffee table.", "conditions": "(T[r('oak')][c('pieces')] != 'coffee table' and T[r('walnut')][c('pieces')] != 'coffee table')"}}, "initial": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], "current": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "", ""], [375, "", "", "end table"]], "applied_clues": ["2", "9", "1", "3", "4"], "initial_to_current": [[["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", ""], [300, "", "", ""], [325, "Bonita", "", "barstool"], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "", ""], [375, "", "", "end table"]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "", ""], [375, "", "", "end table"]]], "unsolvable_child": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "Josephine", "walnut", "bookshelf"], [300, "", "", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "", ""], [375, "", "", "end table"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["dollars", "woodworkers", "woods", "pieces"], [250, "Olivia", "ash", "coffee table"], [275, "Patsy", "rosewood", "bookshelf"], [300, "Kendra", "mahogany", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", "footstool"], [375, "Josephine", "oak", "end table"]], "current_status": "Solvable"}}
{"inputs": {"question": "\"Against the Grain\" offers hand-made wooden furniture at reasonable prices. Each item is made by an in-house employee. Using only the clues below, match the dollars to the options from woodworkers, woods, and pieces. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "dollars: 250, 275, 300, 325, 350, 375.\nwoodworkers : Bonita, Ellen, Josephine, Kendra, Olivia, Patsy.\nwoods : ash, mahogany, oak, poplar, rosewood, walnut.\npieces : barstool, bookshelf, coffee table, end table, footstool, hutch.", "clues": {"1": {"text": "The $325 piece is the barstool.", "conditions": "(T[r(325)][c('pieces')] == 'barstool')"}, "2": {"text": "Of the piece made of ash and the barstool, one was crafted by Bonita and the other costs $250.", "conditions": "((T[r('ash')][c('woodworkers')] == 'Bonita' and T[r('barstool')][c('dollars')] == 250 ) or (T[r('barstool')][c('woodworkers')] == 'Bonita' and T[r('ash')][c('dollars')] == 250)) and (T[r('ash')][c('pieces')] != 'barstool') and (T[r('Bonita')][c('dollars')] != 250)"}, "3": {"text": "The end table costs 25 dollars more than Ellen's item.", "conditions": "(T[r('end table')][c('dollars')] == T[r('Ellen')][c('dollars')] + 25)"}, "4": {"text": "Ellen's piece costs 50 dollars more than the hutch.", "conditions": "(T[r('Ellen')][c('dollars')] == T[r('hutch')][c('dollars')] + 50)"}, "5": {"text": "The bookshelf wasn't made of oak.", "conditions": "(T[r('bookshelf')][c('woods')] != 'oak')"}, "6": {"text": "Kendra's item wasn't made of rosewood.", "conditions": "(T[r('Kendra')][c('woods')] != 'rosewood')"}, "7": {"text": "Neither the coffee table nor the item made of oak is Kendra's piece.", "conditions": "(T[r('Kendra')][c('pieces')] != 'coffee table' and T[r('oak')][c('woodworkers')] != 'Kendra') and (T[r('oak')][c('pieces')] != 'coffee table')"}, "8": {"text": "Josephine's item is either the item made of walnut or the end table.", "conditions": "(T[r('Josephine')][c('woods')] == 'walnut' or T[r('Josephine')][c('pieces')] == 'end table') and (T[r('walnut')][c('pieces')] != 'end table')"}, "9": {"text": "Of Bonita's piece and the bookshelf, one was made of poplar and the other costs $275.", "conditions": "((T[r('Bonita')][c('woods')] == 'poplar' and T[r('bookshelf')][c('dollars')] == 275) or (T[r('bookshelf')][c('woods')] == 'poplar' and T[r('Bonita')][c('dollars')] == 275)) and (T[r('Bonita')][c('pieces')] != 'bookshelf') and (T[r('poplar')][c('dollars')] != 275)"}, "10": {"text": "The piece made of walnut costs 75 dollars more than Patsy's piece.", "conditions": "(T[r('walnut')][c('dollars')] == T[r('Patsy')][c('dollars')] + 75)"}, "11": {"text": "Neither the piece made of oak nor the item made of walnut is the coffee table.", "conditions": "(T[r('oak')][c('pieces')] != 'coffee table' and T[r('walnut')][c('pieces')] != 'coffee table')"}}, "initial": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], "current": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "Patsy", "", "bookshelf"], [300, "", "", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", ""], [375, "Josephine", "", "end table"]], "applied_clues": ["2", "9", "1", "3", "4", "8", "10"], "initial_to_current": [[["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", ""], [300, "", "", ""], [325, "Bonita", "", "barstool"], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "", ""], [375, "", "", "end table"]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "", ""], [375, "", "", "end table"]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", ""], [375, "Josephine", "", "end table"]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "Patsy", "", "bookshelf"], [300, "", "", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", ""], [375, "Josephine", "", "end table"]]], "unsolvable_child": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", "coffee table"], [275, "Patsy", "oak", "bookshelf"], [300, "", "", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", "footstool"], [375, "Josephine", "", "end table"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["dollars", "woodworkers", "woods", "pieces"], [250, "Olivia", "ash", "coffee table"], [275, "Patsy", "rosewood", "bookshelf"], [300, "Kendra", "mahogany", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", "footstool"], [375, "Josephine", "oak", "end table"]], "current_status": "Solvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]], "applied_clues": ["1"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "", "black widow", ""], [60, "Lonnie", "", "Spain"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]], "clue_applied_to_unsolvable_child": "12"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Solvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]], "applied_clues": ["1", "12", "3"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "", "ipstin spider", "Qatar"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Solvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "Phyllis", "ipstin spider", "Qatar"]], "applied_clues": ["1", "12", "3", "9"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "Phyllis", "ipstin spider", "Qatar"]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Olga", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", "Honduras"], [105, "Yvette", "raft spider", ""], [120, "Phyllis", "ipstin spider", "Qatar"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Solvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "", "Spain"], [60, "Isaac", "wolf spider", ""], [75, "Lonnie", "black widow", ""], [90, "Olga", "redback", ""], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "applied_clues": ["1", "12", "3", "9", "2", "5", "4", "6", "11", "8"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "Phyllis", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "Olga", "", ""], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "", ""], [75, "Lonnie", "black widow", ""], [90, "Olga", "", ""], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "Isaac", "", ""], [75, "Lonnie", "black widow", ""], [90, "Olga", "redback", ""], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "Hazel", "", "Spain"], [60, "Isaac", "", ""], [75, "Lonnie", "black widow", ""], [90, "Olga", "redback", ""], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "Hazel", "", "Spain"], [60, "Isaac", "wolf spider", ""], [75, "Lonnie", "black widow", ""], [90, "Olga", "redback", ""], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], [["prices", "winners", "spiders", "countries"], [45, "Hazel", "", "Spain"], [60, "Isaac", "wolf spider", ""], [75, "Lonnie", "black widow", ""], [90, "Olga", "redback", ""], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", ""], [75, "Lonnie", "black widow", "Russia"], [90, "Olga", "redback", ""], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Solvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", 4, ""], [620, "", "", ""], [700, "Deanna", "", "Elk Grove"]], "applied_clues": ["3"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", 4, ""], [620, "", "", ""], [700, "Deanna", "", "Elk Grove"]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "Gretchen", "", ""], [460, "", "", ""], [540, "", 4, "Ontario"], [620, "", "", ""], [700, "Deanna", "", "Elk Grove"]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Solvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, ""], [380, "Leigh", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "Deanna", "", "Elk Grove"]], "applied_clues": ["3", "10", "11", "2", "8"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", 4, ""], [620, "", "", ""], [700, "Deanna", "", "Elk Grove"]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, ""], [620, "", "", ""], [700, "Deanna", "", "Elk Grove"]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", ""], [700, "Deanna", "", "Elk Grove"]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "Leigh", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "Deanna", "", "Elk Grove"]], [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, ""], [380, "Leigh", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "Deanna", "", "Elk Grove"]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", "", "Ontario"], [460, "", 3, ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "Deanna", "", "Elk Grove"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Solvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "Deanna", "", "Elk Grove"]], "applied_clues": ["3", "10", "11", "2", "8", "1", "9", "5"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", 4, ""], [620, "", "", ""], [700, "Deanna", "", "Elk Grove"]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, ""], [620, "", "", ""], [700, "Deanna", "", "Elk Grove"]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", ""], [700, "Deanna", "", "Elk Grove"]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "Leigh", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "Deanna", "", "Elk Grove"]], [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, ""], [380, "Leigh", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "Deanna", "", "Elk Grove"]], [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "Deanna", "", "Elk Grove"]], [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "Deanna", "", "Elk Grove"]], [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "Deanna", "", "Elk Grove"]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "", 6, "Fort Kent"], [700, "Deanna", "", "Elk Grove"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Solvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "Edith", "financial"]], "applied_clues": ["10"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "Edith", "financial"]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "GXTV", "", "real estate"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "Edith", "financial"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Solvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", "telecom"], [30, "", "Edith", "financial"]], "applied_clues": ["10", "11", "3", "6"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "Edith", "financial"]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "Edith", "financial"]], [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", "telecom"], [30, "", "Edith", "financial"]], [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", "telecom"], [30, "", "Edith", "financial"]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", "energy"], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", "telecom"], [30, "", "Edith", "financial"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Solvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", ""], [26, "", "", "utilities"], [27, "GXTV", "", "real estate"], [28, "", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "", "Edith", "financial"]], "applied_clues": ["10", "11", "3", "6", "1", "7", "2"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "Edith", "financial"]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "Edith", "financial"]], [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", "telecom"], [30, "", "Edith", "financial"]], [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", "telecom"], [30, "", "Edith", "financial"]], [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "", "Edith", "financial"]], [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "", "Edith", "financial"]], [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", ""], [26, "", "", "utilities"], [27, "GXTV", "", "real estate"], [28, "", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "", "Edith", "financial"]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", ""], [26, "", "", "utilities"], [27, "GXTV", "", "real estate"], [28, "ABTR", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "", "Edith", "financial"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Solvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", "hammerhead"], [7, "", "", ""], [8, "", "", ""]], "applied_clues": ["2"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", "hammerhead"], [7, "", "", ""], [8, "", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "Osprey", "goblin"], [5, "", "", ""], [6, "Gene", "", "hammerhead"], [7, "", "", ""], [8, "", "", ""]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Solvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "", "goblin"], [8, "", "", ""]], "applied_clues": ["2", "10"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", "hammerhead"], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "", "goblin"], [8, "", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "Liberty", ""], [5, "Yvonne", "", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "", "goblin"], [8, "", "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Solvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "Eunice", "", ""], [5, "", "Escape", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], "applied_clues": ["2", "10", "4", "5", "8", "12"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", "hammerhead"], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "", "goblin"], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "Escape", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "Escape", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "Eunice", "", ""], [5, "", "Escape", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "Eunice", "", "tiger"], [5, "Roberto", "Escape", ""], [6, "Kerry", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Solvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "Eunice", "", ""], [5, "", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], "applied_clues": ["2", "10", "4", "5", "8", "12", "3", "11"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", "hammerhead"], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "", "goblin"], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "Escape", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "", "", ""], [5, "", "Escape", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "Eunice", "", ""], [5, "", "Escape", ""], [6, "", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "Eunice", "", ""], [5, "", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "Eunice", "", ""], [5, "", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", ""], [4, "Eunice", "", "basking"], [5, "", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Solvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], "applied_clues": ["3"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "", "dentist"], [11, "", "", ""], [18, "", "lacrosse", ""], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], "clue_applied_to_unsolvable_child": "12"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Solvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", ""], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], "applied_clues": ["3", "12"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", ""], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "baseball", ""], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "", "garbage man"], [39, "Isaac", "", "lawyer"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Solvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], "applied_clues": ["3", "12", "8", "6", "4"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", ""], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "Lowell", "", "dentist"], [25, "", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Solvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "Lowell", "", "garbage man"], [18, "", "", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], "applied_clues": ["3", "12", "8", "6", "4", "7", "5"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", ""], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "Lowell", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "Lowell", "", "garbage man"], [18, "", "", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "Lowell", "", "garbage man"], [18, "", "", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", "waiter"], [39, "Isaac", "golf", "lawyer"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Solvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], "applied_clues": ["3", "12", "8", "6", "4", "7", "5", "9", "10"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", ""], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "Lowell", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "Lowell", "", "garbage man"], [18, "", "", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "", "", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "hockey", "lawyer"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Solvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], "applied_clues": ["3", "12", "8", "6", "4", "7", "5", "9", "10", "11"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", ""], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "Lowell", "", "garbage man"], [18, "", "", "dentist"], [25, "", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", ""], [11, "Lowell", "", "garbage man"], [18, "", "", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "", "", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]], [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", ""], [39, "Isaac", "", "lawyer"]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", ""], [32, "Sergio", "baseball", "musician"], [39, "Isaac", "", "lawyer"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], "applied_clues": ["7", "10"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "Nick", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], "applied_clues": ["7", "10", "6", "8", "9", "4"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]], "applied_clues": ["7", "10", "6", "8", "9", "4", "11"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", "Carbon"], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]], "applied_clues": ["7", "10", "6", "8", "9", "4", "11", "2"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "Nick", "mobile phones", "Carbon"], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "", "", ""], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]], "applied_clues": ["7", "10", "6", "8", "9", "4", "11", "2", "3", "5"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "", "", ""], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "", "", ""], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "", "batons", ""], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "Shari", "flashlights", ""]], "clue_applied_to_unsolvable_child": "14"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Solvable"}}
{"inputs": {"question": "Walter's Bread and Cheese served several customers this morning. Using only the clues below, match the times to the options from customers and breads. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 7.0 (7:00am), 7.5 (7:30am), 8.0 (8:00am), 8.5 (8:30am), 9.0 (9:00am).\ncustomers : Genevieve, Isabel, Jean, Patty, Sheri.\nbreads : brioche, flatbread, naan, rye bread, wheat bread.", "clues": {"1": {"text": "The person who came in at 9:00am didn't order wheat bread.", "conditions": "(T[r(9.0)][c('breads')] != 'wheat bread')"}, "2": {"text": "Isabel was either the customer who came in at 7:30am or the person who ordered naan.", "conditions": "(T[r('Isabel')][c('times')] == 7.5 or T[r('Isabel')][c('breads')] == 'naan') and (T[r(7.5)][c('breads')] != 'naan')"}, "3": {"text": "The customer who ordered naan came in one hour after the person who ordered brioche.", "conditions": "(T[r('naan')][c('times')] - T[r('brioche')][c('times')] == 1.0)"}, "4": {"text": "Jean came in one hour after Sheri.", "conditions": "(T[r('Jean')][c('times')] - T[r('Sheri')][c('times')] == 1.0)"}, "5": {"text": "The person who came in at 8:30am asked for rye bread.", "conditions": "(T[r(8.5)][c('breads')] == 'rye bread')"}, "6": {"text": "Sheri was either the person who ordered rye bread or the person who ordered naan.", "conditions": "(T[r('Sheri')][c('breads')] == 'rye bread' or T[r('Sheri')][c('breads')] == 'naan')"}, "7": {"text": "Sheri came in sometime before Genevieve.", "conditions": "(T[r('Sheri')][c('times')] < T[r('Genevieve')][c('times')])"}}, "initial": [["times", "customers", "breads"], [7.0, "", ""], [7.5, "", ""], [8.0, "", ""], [8.5, "", ""], [9.0, "", ""]], "current": [["times", "customers", "breads"], [7.0, "", "brioche"], [7.5, "Isabel", ""], [8.0, "", "naan"], [8.5, "", ""], [9.0, "", ""]], "applied_clues": ["2", "3"], "initial_to_current": [[["times", "customers", "breads"], [7.0, "", ""], [7.5, "", ""], [8.0, "", ""], [8.5, "", ""], [9.0, "", ""]], [["times", "customers", "breads"], [7.0, "", ""], [7.5, "Isabel", ""], [8.0, "", "naan"], [8.5, "", ""], [9.0, "", ""]], [["times", "customers", "breads"], [7.0, "", "brioche"], [7.5, "Isabel", ""], [8.0, "", "naan"], [8.5, "", ""], [9.0, "", ""]]], "unsolvable_child": [["times", "customers", "breads"], [7.0, "Sheri", "brioche"], [7.5, "Isabel", ""], [8.0, "Jean", "naan"], [8.5, "", ""], [9.0, "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["times", "customers", "breads"], [7.0, "Patty", "brioche"], [7.5, "Isabel", "wheat bread"], [8.0, "Sheri", "naan"], [8.5, "Genevieve", "rye bread"], [9.0, "Jean", "flatbread"]], "current_status": "Solvable"}}
{"inputs": {"question": "Walter's Bread and Cheese served several customers this morning. Using only the clues below, match the times to the options from customers and breads. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 7.0 (7:00am), 7.5 (7:30am), 8.0 (8:00am), 8.5 (8:30am), 9.0 (9:00am).\ncustomers : Genevieve, Isabel, Jean, Patty, Sheri.\nbreads : brioche, flatbread, naan, rye bread, wheat bread.", "clues": {"1": {"text": "The person who came in at 9:00am didn't order wheat bread.", "conditions": "(T[r(9.0)][c('breads')] != 'wheat bread')"}, "2": {"text": "Isabel was either the customer who came in at 7:30am or the person who ordered naan.", "conditions": "(T[r('Isabel')][c('times')] == 7.5 or T[r('Isabel')][c('breads')] == 'naan') and (T[r(7.5)][c('breads')] != 'naan')"}, "3": {"text": "The customer who ordered naan came in one hour after the person who ordered brioche.", "conditions": "(T[r('naan')][c('times')] - T[r('brioche')][c('times')] == 1.0)"}, "4": {"text": "Jean came in one hour after Sheri.", "conditions": "(T[r('Jean')][c('times')] - T[r('Sheri')][c('times')] == 1.0)"}, "5": {"text": "The person who came in at 8:30am asked for rye bread.", "conditions": "(T[r(8.5)][c('breads')] == 'rye bread')"}, "6": {"text": "Sheri was either the person who ordered rye bread or the person who ordered naan.", "conditions": "(T[r('Sheri')][c('breads')] == 'rye bread' or T[r('Sheri')][c('breads')] == 'naan')"}, "7": {"text": "Sheri came in sometime before Genevieve.", "conditions": "(T[r('Sheri')][c('times')] < T[r('Genevieve')][c('times')])"}}, "initial": [["times", "customers", "breads"], [7.0, "", ""], [7.5, "", ""], [8.0, "", ""], [8.5, "", ""], [9.0, "", ""]], "current": [["times", "customers", "breads"], [7.0, "", "brioche"], [7.5, "Isabel", ""], [8.0, "Sheri", "naan"], [8.5, "", ""], [9.0, "Jean", ""]], "applied_clues": ["2", "3", "4"], "initial_to_current": [[["times", "customers", "breads"], [7.0, "", ""], [7.5, "", ""], [8.0, "", ""], [8.5, "", ""], [9.0, "", ""]], [["times", "customers", "breads"], [7.0, "", ""], [7.5, "Isabel", ""], [8.0, "", "naan"], [8.5, "", ""], [9.0, "", ""]], [["times", "customers", "breads"], [7.0, "", "brioche"], [7.5, "Isabel", ""], [8.0, "", "naan"], [8.5, "", ""], [9.0, "", ""]], [["times", "customers", "breads"], [7.0, "", "brioche"], [7.5, "Isabel", ""], [8.0, "Sheri", "naan"], [8.5, "", ""], [9.0, "Jean", ""]]], "unsolvable_child": [["times", "customers", "breads"], [7.0, "", "brioche"], [7.5, "Isabel", "rye bread"], [8.0, "Sheri", "naan"], [8.5, "", ""], [9.0, "Jean", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["times", "customers", "breads"], [7.0, "Patty", "brioche"], [7.5, "Isabel", "wheat bread"], [8.0, "Sheri", "naan"], [8.5, "Genevieve", "rye bread"], [9.0, "Jean", "flatbread"]], "current_status": "Solvable"}}
{"inputs": {"question": "Alexandra decided to cook a series of low-calorie meals for her family this week. Using only the clues below, match the calories to the options from recipes and nights. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "calories : 380, 400, 420, 440, 460.\nrecipes : bulgur salad, chili pork, citrus halibut, garlic tilapia, kale quinoa.\nnights : May 11th, May 12th, May 13th, May 15th, May 16th.", "clues": {"1": {"text": "The kale quinoa contains somewhat more calories than the recipe served on May 11th.", "conditions": "(T[r('kale quinoa')][c('calories')] > T[r('May 11th')][c('calories')])"}, "2": {"text": "The dish with 460 calories was served on May 13th.", "conditions": "(T[r(460)][c('nights')] == 'May 13th')"}, "3": {"text": "The bulgur salad contains 60 fewer calories than the meal served on May 16th.", "conditions": "(T[r('bulgur salad')][c('calories')] == T[r('May 16th')][c('calories')] - 60)"}, "4": {"text": "Of the dish served on May 13th and the meal served on May 11th, one was the citrus halibut and the other has 400 calories.", "conditions": "((T[r('May 13th')][c('recipes')] == 'citrus halibut' and T[r('May 11th')][c('calories')] == 400) or (T[r('May 11th')][c('recipes')] == 'citrus halibut' and T[r('May 13th')][c('calories')] == 400)) and (T[r('citrus halibut')][c('calories')] != 400)"}, "5": {"text": "The recipe served on May 12th contains 40 fewer calories than the garlic tilapia.", "conditions": "(T[r('May 12th')][c('calories')] == T[r('garlic tilapia')][c('calories')] - 40)"}}, "initial": [["calories", "recipes", "nights"], [380, "", ""], [400, "", ""], [420, "", ""], [440, "", ""], [460, "", ""]], "current": [["calories", "recipes", "nights"], [380, "", ""], [400, "", "May 11th"], [420, "", ""], [440, "", ""], [460, "citrus halibut", "May 13th"]], "applied_clues": ["4", "2"], "initial_to_current": [[["calories", "recipes", "nights"], [380, "", ""], [400, "", ""], [420, "", ""], [440, "", ""], [460, "", ""]], [["calories", "recipes", "nights"], [380, "", ""], [400, "", "May 11th"], [420, "", ""], [440, "", ""], [460, "citrus halibut", "May 13th"]], [["calories", "recipes", "nights"], [380, "", ""], [400, "", "May 11th"], [420, "", ""], [440, "", ""], [460, "citrus halibut", "May 13th"]]], "unsolvable_child": [["calories", "recipes", "nights"], [380, "", ""], [400, "", "May 11th"], [420, "kale quinoa", ""], [440, "", ""], [460, "citrus halibut", "May 13th"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["calories", "recipes", "nights"], [380, "bulgur salad", "May 12th"], [400, "chili pork", "May 11th"], [420, "garlic tilapia", "May 15th"], [440, "kale quinoa", "May 16th"], [460, "citrus halibut", "May 13th"]], "current_status": "Solvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "Orlando", "Lake Jesup"]], "applied_clues": ["4"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "Orlando", "Lake Jesup"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "", "Bull Creek"], [9, "Meredith", ""], [10, "", ""], [11, "", ""], [12, "Orlando", "Lake Jesup"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Solvable"}}
{"inputs": {"question": "\"Parties Unlimited\" caters to a wide variety of special requests (such as clowns or magicians) for its clients. Using only the clues below, match the days to the options from requests and families. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 3, 4, 5, 6, 7.\nrequests : clown, petting zoo, photo booth, rock band, superhero.\nfamilies : Benton, Hayden, Ingram, Stanley, Zimmerman.", "clues": {"1": {"text": "The party on October 5 is for the Ingrams.", "conditions": "(T[r(5)][c('families')] == 'Ingram')"}, "2": {"text": "The booking that requested the clown is sometime after the Ingram family booking.", "conditions": "(T[r('clown')][c('days')] > T[r('Ingram')][c('days')])"}, "3": {"text": "The booking on October 4 is either the party that requested the petting zoo or the Hayden family booking.", "conditions": "(T[r(4)][c('requests')] == 'petting zoo' or T[r(4)][c('families')] == 'Hayden') and (T[r('Hayden')][c('requests')] != 'petting zoo')"}, "4": {"text": "The five events are the booking on October 7, the party that requested the rock band, the event that requested the superhero, the Ingram family party and the Benton family party.", "conditions": "(T[r('rock band')][c('days')] != 7) and (T[r('superhero')][c('days')] != 7) and (T[r('Ingram')][c('days')] != 7) and (T[r('Benton')][c('days')] != 7) and (T[r('rock band')][c('families')] != 'Ingram') and (T[r('rock band')][c('families')] != 'Benton') and (T[r('superhero')][c('families')] != 'Ingram') and (T[r('superhero')][c('families')] != 'Benton')"}, "5": {"text": "The booking that requested the photo booth is either the event on October 6 or the event on October 3.", "conditions": "(T[r('photo booth')][c('days')] == 6 or T[r('photo booth')][c('days')] == 3)"}, "6": {"text": "The Ingram family booking is 1 day before the booking that requested the superhero.", "conditions": "(T[r('Ingram')][c('days')] == T[r('superhero')][c('days')] - 1)"}, "7": {"text": "The party that requested the superhero is for the Zimmermans.", "conditions": "(T[r('superhero')][c('families')] == 'Zimmerman')"}}, "initial": [["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "requests", "families"], [3, "photo booth", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "applied_clues": ["5"], "initial_to_current": [[["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]]], "unsolvable_child": [["days", "requests", "families"], [3, "photo booth", "Hayden"], [4, "petting zoo", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["days", "requests", "families"], [3, "photo booth", "Benton"], [4, "rock band", "Hayden"], [5, "petting zoo", "Ingram"], [6, "superhero", "Zimmerman"], [7, "clown", "Stanley"]], "current_status": "Solvable"}}
{"inputs": {"question": "\"Parties Unlimited\" caters to a wide variety of special requests (such as clowns or magicians) for its clients. Using only the clues below, match the days to the options from requests and families. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 3, 4, 5, 6, 7.\nrequests : clown, petting zoo, photo booth, rock band, superhero.\nfamilies : Benton, Hayden, Ingram, Stanley, Zimmerman.", "clues": {"1": {"text": "The party on October 5 is for the Ingrams.", "conditions": "(T[r(5)][c('families')] == 'Ingram')"}, "2": {"text": "The booking that requested the clown is sometime after the Ingram family booking.", "conditions": "(T[r('clown')][c('days')] > T[r('Ingram')][c('days')])"}, "3": {"text": "The booking on October 4 is either the party that requested the petting zoo or the Hayden family booking.", "conditions": "(T[r(4)][c('requests')] == 'petting zoo' or T[r(4)][c('families')] == 'Hayden') and (T[r('Hayden')][c('requests')] != 'petting zoo')"}, "4": {"text": "The five events are the booking on October 7, the party that requested the rock band, the event that requested the superhero, the Ingram family party and the Benton family party.", "conditions": "(T[r('rock band')][c('days')] != 7) and (T[r('superhero')][c('days')] != 7) and (T[r('Ingram')][c('days')] != 7) and (T[r('Benton')][c('days')] != 7) and (T[r('rock band')][c('families')] != 'Ingram') and (T[r('rock band')][c('families')] != 'Benton') and (T[r('superhero')][c('families')] != 'Ingram') and (T[r('superhero')][c('families')] != 'Benton')"}, "5": {"text": "The booking that requested the photo booth is either the event on October 6 or the event on October 3.", "conditions": "(T[r('photo booth')][c('days')] == 6 or T[r('photo booth')][c('days')] == 3)"}, "6": {"text": "The Ingram family booking is 1 day before the booking that requested the superhero.", "conditions": "(T[r('Ingram')][c('days')] == T[r('superhero')][c('days')] - 1)"}, "7": {"text": "The party that requested the superhero is for the Zimmermans.", "conditions": "(T[r('superhero')][c('families')] == 'Zimmerman')"}}, "initial": [["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "requests", "families"], [3, "photo booth", ""], [4, "", "Hayden"], [5, "petting zoo", "Ingram"], [6, "", ""], [7, "", ""]], "applied_clues": ["5", "3", "1"], "initial_to_current": [[["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "", "Hayden"], [5, "petting zoo", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "", "Hayden"], [5, "petting zoo", "Ingram"], [6, "", ""], [7, "", ""]]], "unsolvable_child": [["days", "requests", "families"], [3, "photo booth", ""], [4, "rock band", "Hayden"], [5, "petting zoo", "Ingram"], [6, "", "Benton"], [7, "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["days", "requests", "families"], [3, "photo booth", "Benton"], [4, "rock band", "Hayden"], [5, "petting zoo", "Ingram"], [6, "superhero", "Zimmerman"], [7, "clown", "Stanley"]], "current_status": "Solvable"}}
{"inputs": {"question": "Mona and Rey are planning their honeymoon. Using only the clues below, match the prices to the options from resorts and islands. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 175, 195, 215, 235, 255.\nresorts : Azure Hills, El Pacifico, Grand Echo, Regal Park, Silver Harbor.\nislands : Anguilla, Antigua, Martinique, St. Martin, St. Barts.", "clues": {"1": {"text": "The resort that costs $215 per night isn't on Martinique.", "conditions": "(T[r(215)][c('islands')] != 'Martinique')"}, "2": {"text": "The five resorts are the resort on Antigua, Grand Echo, Silver Harbor, Azure Hills and the hotel that costs $175 per night.", "conditions": "(T[r('Antigua')][c('resorts')]!= 'Grand Echo') and (T[r('Antigua')][c('resorts')]!='Silver Harbor') and (T[r('Antigua')][c('resorts')]!= 'Azure Hills') and (T[r('Antigua')][c('prices')] != 175) and (T[r('Silver Harbor')][c('prices')] != 175) and (T[r('Grand Echo')][c('prices')] != 175) and (T[r('Azure Hills')][c('prices')] != 175)"}, "3": {"text": "Grand Echo is on St. Martin.", "conditions": "(T[r('Grand Echo')][c('islands')] == 'St. Martin')"}, "4": {"text": "The hotel on St. Martin costs 40 dollars more per night than Regal Park.", "conditions": "(T[r('St. Martin')][c('prices')] - T[r('Regal Park')][c('prices')] == 40)"}, "5": {"text": "El Pacifico is either the hotel on Anguilla or the option that costs $255 per night.", "conditions": "(T[r('El Pacifico')][c('islands')] == 'Anguilla' or T[r('El Pacifico')][c('prices')] == 255) and (T[r('Anguilla')][c('prices')] != 255)"}, "6": {"text": "Silver Harbor costs $215 per night.", "conditions": "(T[r('Silver Harbor')][c('prices')] == 215)"}}, "initial": [["prices", "resorts", "islands"], [175, "", ""], [195, "", ""], [215, "", ""], [235, "", ""], [255, "", ""]], "current": [["prices", "resorts", "islands"], [175, "El Pacifico", "Anguilla"], [195, "", ""], [215, "Silver Harbor", ""], [235, "", ""], [255, "", ""]], "applied_clues": ["5", "6"], "initial_to_current": [[["prices", "resorts", "islands"], [175, "", ""], [195, "", ""], [215, "", ""], [235, "", ""], [255, "", ""]], [["prices", "resorts", "islands"], [175, "El Pacifico", "Anguilla"], [195, "", ""], [215, "", ""], [235, "", ""], [255, "", ""]], [["prices", "resorts", "islands"], [175, "El Pacifico", "Anguilla"], [195, "", ""], [215, "Silver Harbor", ""], [235, "", ""], [255, "", ""]]], "unsolvable_child": [["prices", "resorts", "islands"], [175, "El Pacifico", "Anguilla"], [195, "", "Antigua"], [215, "Silver Harbor", ""], [235, "Azure Hills", ""], [255, "Grand Echo", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "resorts", "islands"], [175, "El Pacifico", "Anguilla"], [195, "Regal Park", "Antigua"], [215, "Silver Harbor", "St. Barts"], [235, "Grand Echo", "St. Martin"], [255, "Azure Hills", "Martinique"]], "current_status": "Solvable"}}
{"inputs": {"question": "Mona and Rey are planning their honeymoon. Using only the clues below, match the prices to the options from resorts and islands. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 175, 195, 215, 235, 255.\nresorts : Azure Hills, El Pacifico, Grand Echo, Regal Park, Silver Harbor.\nislands : Anguilla, Antigua, Martinique, St. Martin, St. Barts.", "clues": {"1": {"text": "The resort that costs $215 per night isn't on Martinique.", "conditions": "(T[r(215)][c('islands')] != 'Martinique')"}, "2": {"text": "The five resorts are the resort on Antigua, Grand Echo, Silver Harbor, Azure Hills and the hotel that costs $175 per night.", "conditions": "(T[r('Antigua')][c('resorts')]!= 'Grand Echo') and (T[r('Antigua')][c('resorts')]!='Silver Harbor') and (T[r('Antigua')][c('resorts')]!= 'Azure Hills') and (T[r('Antigua')][c('prices')] != 175) and (T[r('Silver Harbor')][c('prices')] != 175) and (T[r('Grand Echo')][c('prices')] != 175) and (T[r('Azure Hills')][c('prices')] != 175)"}, "3": {"text": "Grand Echo is on St. Martin.", "conditions": "(T[r('Grand Echo')][c('islands')] == 'St. Martin')"}, "4": {"text": "The hotel on St. Martin costs 40 dollars more per night than Regal Park.", "conditions": "(T[r('St. Martin')][c('prices')] - T[r('Regal Park')][c('prices')] == 40)"}, "5": {"text": "El Pacifico is either the hotel on Anguilla or the option that costs $255 per night.", "conditions": "(T[r('El Pacifico')][c('islands')] == 'Anguilla' or T[r('El Pacifico')][c('prices')] == 255) and (T[r('Anguilla')][c('prices')] != 255)"}, "6": {"text": "Silver Harbor costs $215 per night.", "conditions": "(T[r('Silver Harbor')][c('prices')] == 215)"}}, "initial": [["prices", "resorts", "islands"], [175, "", ""], [195, "", ""], [215, "", ""], [235, "", ""], [255, "", ""]], "current": [["prices", "resorts", "islands"], [175, "El Pacifico", "Anguilla"], [195, "", "Antigua"], [215, "Silver Harbor", ""], [235, "Grand Echo", ""], [255, "", ""]], "applied_clues": ["5", "6", "2"], "initial_to_current": [[["prices", "resorts", "islands"], [175, "", ""], [195, "", ""], [215, "", ""], [235, "", ""], [255, "", ""]], [["prices", "resorts", "islands"], [175, "El Pacifico", "Anguilla"], [195, "", ""], [215, "", ""], [235, "", ""], [255, "", ""]], [["prices", "resorts", "islands"], [175, "El Pacifico", "Anguilla"], [195, "", ""], [215, "Silver Harbor", ""], [235, "", ""], [255, "", ""]], [["prices", "resorts", "islands"], [175, "El Pacifico", "Anguilla"], [195, "", "Antigua"], [215, "Silver Harbor", ""], [235, "Grand Echo", ""], [255, "", ""]]], "unsolvable_child": [["prices", "resorts", "islands"], [175, "El Pacifico", "Anguilla"], [195, "", "Antigua"], [215, "Silver Harbor", ""], [235, "Grand Echo", "Martinique"], [255, "", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["prices", "resorts", "islands"], [175, "El Pacifico", "Anguilla"], [195, "Regal Park", "Antigua"], [215, "Silver Harbor", "St. Barts"], [235, "Grand Echo", "St. Martin"], [255, "Azure Hills", "Martinique"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Springfield County Bird Club met today, and several of its members brought their newest acquisitions. Using only the clues below, match the months to the options from names and birds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nnames : Bonita, Joan, Laura, Roberta, Velma.\nbirds : finch, lorikeet, lovebird, macaw, parakeet.", "clues": {"1": {"text": "Velma's pet isn't the lovebird.", "conditions": "(T[r('Velma')][c('birds')] != 'lovebird')"}, "2": {"text": "Of the finch and the macaw, one was bought in January and the other is Laura's.", "conditions": "((T[r('finch')][c('months')] == 1 and T[r('macaw')][c('names')] == 'Laura') or (T[r('macaw')][c('months')] == 1 and T[r('finch')][c('names')] == 'Laura')) and (T[r(1)][c('names')] != 'Laura')"}, "3": {"text": "The bird bought in March is either Bonita's pet or the finch.", "conditions": "(T[r(3)][c('names')] == 'Bonita' or T[r(3)][c('birds')] == 'finch') and (T[r('Bonita')][c('birds')] != 'finch')"}, "4": {"text": "Joan's pet was bought 3 months before the lorikeet.", "conditions": "(T[r('Joan')][c('months')] + 3 == T[r('lorikeet')][c('months')])"}, "5": {"text": "The finch was bought sometime after Roberta's pet.", "conditions": "(T[r('finch')][c('months')] > T[r('Roberta')][c('months')])"}, "6": {"text": "Bonita's pet was bought in May.", "conditions": "(T[r('Bonita')][c('months')] == 5)"}, "7": {"text": "The macaw was bought 1 month before the parakeet.", "conditions": "(T[r('macaw')][c('months')] + 1 == T[r('parakeet')][c('months')])"}}, "initial": [["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], "current": [["months", "names", "birds"], [1, "", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], "applied_clues": ["2", "7"], "initial_to_current": [[["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", ""], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]]], "unsolvable_child": [["months", "names", "birds"], [1, "Bonita", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Roberta", "parakeet"], [3, "Laura", "finch"], [4, "Velma", "lorikeet"], [5, "Bonita", "lovebird"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Springfield County Bird Club met today, and several of its members brought their newest acquisitions. Using only the clues below, match the months to the options from names and birds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nnames : Bonita, Joan, Laura, Roberta, Velma.\nbirds : finch, lorikeet, lovebird, macaw, parakeet.", "clues": {"1": {"text": "Velma's pet isn't the lovebird.", "conditions": "(T[r('Velma')][c('birds')] != 'lovebird')"}, "2": {"text": "Of the finch and the macaw, one was bought in January and the other is Laura's.", "conditions": "((T[r('finch')][c('months')] == 1 and T[r('macaw')][c('names')] == 'Laura') or (T[r('macaw')][c('months')] == 1 and T[r('finch')][c('names')] == 'Laura')) and (T[r(1)][c('names')] != 'Laura')"}, "3": {"text": "The bird bought in March is either Bonita's pet or the finch.", "conditions": "(T[r(3)][c('names')] == 'Bonita' or T[r(3)][c('birds')] == 'finch') and (T[r('Bonita')][c('birds')] != 'finch')"}, "4": {"text": "Joan's pet was bought 3 months before the lorikeet.", "conditions": "(T[r('Joan')][c('months')] + 3 == T[r('lorikeet')][c('months')])"}, "5": {"text": "The finch was bought sometime after Roberta's pet.", "conditions": "(T[r('finch')][c('months')] > T[r('Roberta')][c('months')])"}, "6": {"text": "Bonita's pet was bought in May.", "conditions": "(T[r('Bonita')][c('months')] == 5)"}, "7": {"text": "The macaw was bought 1 month before the parakeet.", "conditions": "(T[r('macaw')][c('months')] + 1 == T[r('parakeet')][c('months')])"}}, "initial": [["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], "current": [["months", "names", "birds"], [1, "", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "Bonita", ""]], "applied_clues": ["2", "7", "3"], "initial_to_current": [[["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", ""], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "Bonita", ""]]], "unsolvable_child": [["months", "names", "birds"], [1, "", "macaw"], [2, "Joan", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "Bonita", "lorikeet"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Roberta", "parakeet"], [3, "Laura", "finch"], [4, "Velma", "lorikeet"], [5, "Bonita", "lovebird"]], "current_status": "Solvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "Claude", "Cassia"]], "applied_clues": ["1", "5"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Claude", "Cassia"]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "Claude", "Cassia"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "", "Green Swamp"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "Claude", "Cassia"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Solvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "Christian", "TV-412", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "larval growth"]], "applied_clues": ["4"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "Christian", "TV-412", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "larval growth"]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "", "GX-13", "gamma rays"], [2, "Christian", "TV-412", ""], [3, "", "", ""], [4, "", "", ""], [5, "Seth", "", "larval growth"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Solvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "Christian", "TV-412", ""], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "", "GX-13", "larval growth"]], "applied_clues": ["4", "8", "1", "2"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "Christian", "TV-412", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "larval growth"]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "Christian", "TV-412", ""], [3, "Seth", "", "gamma rays"], [4, "", "", ""], [5, "", "GX-13", "larval growth"]], [["months", "astronauts", "missions", "subjects"], [1, "", "WB-664", ""], [2, "Christian", "TV-412", ""], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "", "GX-13", "larval growth"]], [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "Christian", "TV-412", ""], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "", "GX-13", "larval growth"]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "Christian", "TV-412", ""], [3, "Seth", "ZF-15", "gamma rays"], [4, "Omar", "AV-435", ""], [5, "", "GX-13", "larval growth"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Solvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 25, 26, 27, 28, 29.\nstock symbols : ABTR, HBW, JMO, KMPP, PSTO.\nclients : Abigail, Charlie, Edith, Francine, Heathcliff.\nsectors : energy, financial, technology, telecom, utilities.", "clues": {"1": {"text": "Of the stock that sold for $28 per share and PSTO, one was in the technology sector and the other was bought by Abigail.", "conditions": "((T[r(28)][c('sectors')] == 'technology' and T[r('PSTO')][c('clients')] == 'Abigail') or (T[r('PSTO')][c('sectors')] == 'technology' and T[r(28)][c('clients')] == 'Abigail')) and (T[r(28)][c('stock symbols')] != 'PSTO') and (T[r('technology')][c('clients')] != 'Abigail')"}, "2": {"text": "Of the telecom stock and the stock that sold for $27 per share, one was KMPP and the other was bought by Charlie.", "conditions": "((T[r('telecom')][c('stock symbols')] == 'KMPP' and T[r(27)][c('clients')] == 'Charlie') or (T[r(27)][c('stock symbols')] == 'KMPP' and T[r('telecom')][c('clients')] == 'Charlie')) and (T[r('telecom')][c('prices')] != 27) and (T[r('KMPP')][c('clients')] != 'Charlie')"}, "3": {"text": "The stock Edith bought was per share more expensive than the technology stock.", "conditions": "(T[r('Edith')][c('prices')] > T[r('technology')][c('prices')])"}, "4": {"text": "The five stocks were JMO, the stock that sold for $25 per share, the energy stock, the utilities stock and the financial stock.", "conditions": "(T[r(25)][c('stock symbols')] != 'JMO') and (T[r('energy')][c('stock symbols')] != 'JMO') and (T[r('utilities')][c('stock symbols')] != 'JMO') and (T[r('financial')][c('stock symbols')] != 'JMO') and (T[r('energy')][c('prices')] != 25) and (T[r('utilities')][c('prices')] != 25) and (T[r('financial')][c('prices')] != 25)"}, "5": {"text": "Of the financial stock and the stock Charlie bought, one was PSTO and the other sold for $25 per share.", "conditions": "((T[r('financial')][c('stock symbols')] == 'PSTO' and T[r('Charlie')][c('prices')] == 25) or (T[r('Charlie')][c('stock symbols')] == 'PSTO' and T[r('financial')][c('prices')] == 25)) and (T[r('financial')][c('clients')] != 'Charlie') and (T[r('PSTO')][c('prices')] != 25)"}, "6": {"text": "JMO was either the stock Edith bought or the stock Francine bought.", "conditions": "(T[r('JMO')][c('clients')] == 'Edith' or T[r('JMO')][c('clients')] == 'Francine')"}, "7": {"text": "The utilities stock was 2 dollars per share more expensive than HBW.", "conditions": "(T[r('utilities')][c('prices')] == T[r('HBW')][c('prices')] + 2)"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "", "", ""], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], "applied_clues": ["2"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "", "", ""], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "", "", ""], [27, "KMPP", "", ""], [28, "PSTO", "", "financial"], [29, "", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "HBW", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "utilities"], [28, "JMO", "Francine", "technology"], [29, "ABTR", "Edith", "energy"]], "current_status": "Solvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 25, 26, 27, 28, 29.\nstock symbols : ABTR, HBW, JMO, KMPP, PSTO.\nclients : Abigail, Charlie, Edith, Francine, Heathcliff.\nsectors : energy, financial, technology, telecom, utilities.", "clues": {"1": {"text": "Of the stock that sold for $28 per share and PSTO, one was in the technology sector and the other was bought by Abigail.", "conditions": "((T[r(28)][c('sectors')] == 'technology' and T[r('PSTO')][c('clients')] == 'Abigail') or (T[r('PSTO')][c('sectors')] == 'technology' and T[r(28)][c('clients')] == 'Abigail')) and (T[r(28)][c('stock symbols')] != 'PSTO') and (T[r('technology')][c('clients')] != 'Abigail')"}, "2": {"text": "Of the telecom stock and the stock that sold for $27 per share, one was KMPP and the other was bought by Charlie.", "conditions": "((T[r('telecom')][c('stock symbols')] == 'KMPP' and T[r(27)][c('clients')] == 'Charlie') or (T[r(27)][c('stock symbols')] == 'KMPP' and T[r('telecom')][c('clients')] == 'Charlie')) and (T[r('telecom')][c('prices')] != 27) and (T[r('KMPP')][c('clients')] != 'Charlie')"}, "3": {"text": "The stock Edith bought was per share more expensive than the technology stock.", "conditions": "(T[r('Edith')][c('prices')] > T[r('technology')][c('prices')])"}, "4": {"text": "The five stocks were JMO, the stock that sold for $25 per share, the energy stock, the utilities stock and the financial stock.", "conditions": "(T[r(25)][c('stock symbols')] != 'JMO') and (T[r('energy')][c('stock symbols')] != 'JMO') and (T[r('utilities')][c('stock symbols')] != 'JMO') and (T[r('financial')][c('stock symbols')] != 'JMO') and (T[r('energy')][c('prices')] != 25) and (T[r('utilities')][c('prices')] != 25) and (T[r('financial')][c('prices')] != 25)"}, "5": {"text": "Of the financial stock and the stock Charlie bought, one was PSTO and the other sold for $25 per share.", "conditions": "((T[r('financial')][c('stock symbols')] == 'PSTO' and T[r('Charlie')][c('prices')] == 25) or (T[r('Charlie')][c('stock symbols')] == 'PSTO' and T[r('financial')][c('prices')] == 25)) and (T[r('financial')][c('clients')] != 'Charlie') and (T[r('PSTO')][c('prices')] != 25)"}, "6": {"text": "JMO was either the stock Edith bought or the stock Francine bought.", "conditions": "(T[r('JMO')][c('clients')] == 'Edith' or T[r('JMO')][c('clients')] == 'Francine')"}, "7": {"text": "The utilities stock was 2 dollars per share more expensive than HBW.", "conditions": "(T[r('utilities')][c('prices')] == T[r('HBW')][c('prices')] + 2)"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", ""], [28, "", "", "technology"], [29, "", "", ""]], "applied_clues": ["2", "5", "1"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "", "", ""], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "", "financial"], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", ""], [28, "", "", "technology"], [29, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "JMO", "", "technology"], [29, "", "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "HBW", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "utilities"], [28, "JMO", "Francine", "technology"], [29, "ABTR", "Edith", "energy"]], "current_status": "Solvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 25, 26, 27, 28, 29.\nstock symbols : ABTR, HBW, JMO, KMPP, PSTO.\nclients : Abigail, Charlie, Edith, Francine, Heathcliff.\nsectors : energy, financial, technology, telecom, utilities.", "clues": {"1": {"text": "Of the stock that sold for $28 per share and PSTO, one was in the technology sector and the other was bought by Abigail.", "conditions": "((T[r(28)][c('sectors')] == 'technology' and T[r('PSTO')][c('clients')] == 'Abigail') or (T[r('PSTO')][c('sectors')] == 'technology' and T[r(28)][c('clients')] == 'Abigail')) and (T[r(28)][c('stock symbols')] != 'PSTO') and (T[r('technology')][c('clients')] != 'Abigail')"}, "2": {"text": "Of the telecom stock and the stock that sold for $27 per share, one was KMPP and the other was bought by Charlie.", "conditions": "((T[r('telecom')][c('stock symbols')] == 'KMPP' and T[r(27)][c('clients')] == 'Charlie') or (T[r(27)][c('stock symbols')] == 'KMPP' and T[r('telecom')][c('clients')] == 'Charlie')) and (T[r('telecom')][c('prices')] != 27) and (T[r('KMPP')][c('clients')] != 'Charlie')"}, "3": {"text": "The stock Edith bought was per share more expensive than the technology stock.", "conditions": "(T[r('Edith')][c('prices')] > T[r('technology')][c('prices')])"}, "4": {"text": "The five stocks were JMO, the stock that sold for $25 per share, the energy stock, the utilities stock and the financial stock.", "conditions": "(T[r(25)][c('stock symbols')] != 'JMO') and (T[r('energy')][c('stock symbols')] != 'JMO') and (T[r('utilities')][c('stock symbols')] != 'JMO') and (T[r('financial')][c('stock symbols')] != 'JMO') and (T[r('energy')][c('prices')] != 25) and (T[r('utilities')][c('prices')] != 25) and (T[r('financial')][c('prices')] != 25)"}, "5": {"text": "Of the financial stock and the stock Charlie bought, one was PSTO and the other sold for $25 per share.", "conditions": "((T[r('financial')][c('stock symbols')] == 'PSTO' and T[r('Charlie')][c('prices')] == 25) or (T[r('Charlie')][c('stock symbols')] == 'PSTO' and T[r('financial')][c('prices')] == 25)) and (T[r('financial')][c('clients')] != 'Charlie') and (T[r('PSTO')][c('prices')] != 25)"}, "6": {"text": "JMO was either the stock Edith bought or the stock Francine bought.", "conditions": "(T[r('JMO')][c('clients')] == 'Edith' or T[r('JMO')][c('clients')] == 'Francine')"}, "7": {"text": "The utilities stock was 2 dollars per share more expensive than HBW.", "conditions": "(T[r('utilities')][c('prices')] == T[r('HBW')][c('prices')] + 2)"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "utilities"], [28, "JMO", "", "technology"], [29, "", "", "energy"]], "applied_clues": ["2", "5", "1", "4"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "", "", ""], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "", "financial"], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", ""], [28, "", "", "technology"], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "utilities"], [28, "JMO", "", "technology"], [29, "", "", "energy"]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Edith", "utilities"], [28, "JMO", "Francine", "technology"], [29, "", "Heathcliff", "energy"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "HBW", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "utilities"], [28, "JMO", "Francine", "technology"], [29, "ABTR", "Edith", "energy"]], "current_status": "Solvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "mirasaurus", "", ""], [1000, "", "", ""], [1250, "", "87 million", "New Zealand"], [1500, "gigasaurus", "", ""]], "applied_clues": ["6", "2"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "87 million", "New Zealand"], [1500, "gigasaurus", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "mirasaurus", "", ""], [1000, "", "", ""], [1250, "", "87 million", "New Zealand"], [1500, "gigasaurus", "", ""]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "mirasaurus", "", "Kyrgyzstan"], [1000, "", "", ""], [1250, "pilodontus", "87 million", "New Zealand"], [1500, "gigasaurus", "", ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Solvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", "Kyrgyzstan"], [750, "mirasaurus", "", ""], [1000, "pilodontus", "", ""], [1250, "", "87 million", "New Zealand"], [1500, "gigasaurus", "", ""]], "applied_clues": ["6", "2", "11"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "87 million", "New Zealand"], [1500, "gigasaurus", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "mirasaurus", "", ""], [1000, "", "", ""], [1250, "", "87 million", "New Zealand"], [1500, "gigasaurus", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", "Kyrgyzstan"], [750, "mirasaurus", "", ""], [1000, "pilodontus", "", ""], [1250, "", "87 million", "New Zealand"], [1500, "gigasaurus", "", ""]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "", "75 million", "Kyrgyzstan"], [750, "mirasaurus", "", ""], [1000, "pilodontus", "90 million", ""], [1250, "", "87 million", "New Zealand"], [1500, "gigasaurus", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Solvable"}}
{"inputs": {"question": "Lorena's Specialty Cakes has a number of different orders to fulfill this week. Using only the clues below, match the delivery dates to the options from customers, cake shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "delivery dates : 5, 6, 7, 8, 9.\ncustomers : Danielson, Harper, Keller, Lowe, Nolan.\ncake shapes : biplane, rocket ship, sailboat, sports car, turtle.\nflavors : banana, coconut, lemon, raspberry, strawberry.", "clues": {"1": {"text": "The lemon cake will be delivered 3 days after the raspberry cake.", "conditions": "(T[r('lemon')][c('delivery dates')] - T[r('raspberry')][c('delivery dates')] == 3)"}, "2": {"text": "Mrs. Nolan's cake will be delivered 1 day before the cake shaped like a sports car.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 1 == T[r('sports car')][c('delivery dates')])"}, "3": {"text": "Mrs. Danielson's order won't be delivered on October 6.", "conditions": "(T[r('Danielson')][c('delivery dates')] != 6)"}, "4": {"text": "The October 8 delivery will be in the shape of a biplane.", "conditions": "(T[r(8)][c('cake shapes')] == 'biplane')"}, "5": {"text": "Neither Mrs. Harper's order nor the strawberry cake is the October 6 delivery.", "conditions": "(T[r('Harper')][c('delivery dates')] != 6 and T[r('strawberry')][c('delivery dates')] != 6) and (T[r('Harper')][c('flavors')] != 'strawberry')"}, "6": {"text": "Mrs. Nolan's cake will be delivered 2 days before the strawberry cake.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 2 == T[r('strawberry')][c('delivery dates')])"}, "7": {"text": "The cake shaped like a rocket ship will be delivered 1 day before the coconut cake.", "conditions": "(T[r('rocket ship')][c('delivery dates')] + 1 == T[r('coconut')][c('delivery dates')])"}, "8": {"text": "Mrs. Harper's order won't be shaped like a biplane.", "conditions": "(T[r('Harper')][c('cake shapes')] != 'biplane')"}, "9": {"text": "Mrs. Keller's order won't be shaped like a sports car.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sports car')"}, "10": {"text": "The order shaped like a sailboat will be delivered 2 days after the raspberry cake.", "conditions": "(T[r('sailboat')][c('delivery dates')] == T[r('raspberry')][c('delivery dates')] + 2)"}, "11": {"text": "Mrs. Keller's cake won't be shaped like a sailboat.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sailboat')"}}, "initial": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], "current": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", ""], [8, "", "", "lemon"], [9, "", "", ""]], "applied_clues": ["1", "10"], "initial_to_current": [[["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", ""], [8, "", "", "lemon"], [9, "", "", ""]]], "unsolvable_child": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "Nolan", "sailboat", ""], [8, "", "", "lemon"], [9, "", "", "strawberry"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "Lowe", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Keller", "biplane", "lemon"], [9, "Harper", "turtle", "banana"]], "current_status": "Solvable"}}
{"inputs": {"question": "Lorena's Specialty Cakes has a number of different orders to fulfill this week. Using only the clues below, match the delivery dates to the options from customers, cake shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "delivery dates : 5, 6, 7, 8, 9.\ncustomers : Danielson, Harper, Keller, Lowe, Nolan.\ncake shapes : biplane, rocket ship, sailboat, sports car, turtle.\nflavors : banana, coconut, lemon, raspberry, strawberry.", "clues": {"1": {"text": "The lemon cake will be delivered 3 days after the raspberry cake.", "conditions": "(T[r('lemon')][c('delivery dates')] - T[r('raspberry')][c('delivery dates')] == 3)"}, "2": {"text": "Mrs. Nolan's cake will be delivered 1 day before the cake shaped like a sports car.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 1 == T[r('sports car')][c('delivery dates')])"}, "3": {"text": "Mrs. Danielson's order won't be delivered on October 6.", "conditions": "(T[r('Danielson')][c('delivery dates')] != 6)"}, "4": {"text": "The October 8 delivery will be in the shape of a biplane.", "conditions": "(T[r(8)][c('cake shapes')] == 'biplane')"}, "5": {"text": "Neither Mrs. Harper's order nor the strawberry cake is the October 6 delivery.", "conditions": "(T[r('Harper')][c('delivery dates')] != 6 and T[r('strawberry')][c('delivery dates')] != 6) and (T[r('Harper')][c('flavors')] != 'strawberry')"}, "6": {"text": "Mrs. Nolan's cake will be delivered 2 days before the strawberry cake.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 2 == T[r('strawberry')][c('delivery dates')])"}, "7": {"text": "The cake shaped like a rocket ship will be delivered 1 day before the coconut cake.", "conditions": "(T[r('rocket ship')][c('delivery dates')] + 1 == T[r('coconut')][c('delivery dates')])"}, "8": {"text": "Mrs. Harper's order won't be shaped like a biplane.", "conditions": "(T[r('Harper')][c('cake shapes')] != 'biplane')"}, "9": {"text": "Mrs. Keller's order won't be shaped like a sports car.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sports car')"}, "10": {"text": "The order shaped like a sailboat will be delivered 2 days after the raspberry cake.", "conditions": "(T[r('sailboat')][c('delivery dates')] == T[r('raspberry')][c('delivery dates')] + 2)"}, "11": {"text": "Mrs. Keller's cake won't be shaped like a sailboat.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sailboat')"}}, "initial": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], "current": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], "applied_clues": ["1", "10", "6", "2"], "initial_to_current": [[["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]]], "unsolvable_child": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "Lowe", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Keller", "biplane", "lemon"], [9, "Harper", "turtle", "banana"]], "current_status": "Solvable"}}
{"inputs": {"question": "Lorena's Specialty Cakes has a number of different orders to fulfill this week. Using only the clues below, match the delivery dates to the options from customers, cake shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "delivery dates : 5, 6, 7, 8, 9.\ncustomers : Danielson, Harper, Keller, Lowe, Nolan.\ncake shapes : biplane, rocket ship, sailboat, sports car, turtle.\nflavors : banana, coconut, lemon, raspberry, strawberry.", "clues": {"1": {"text": "The lemon cake will be delivered 3 days after the raspberry cake.", "conditions": "(T[r('lemon')][c('delivery dates')] - T[r('raspberry')][c('delivery dates')] == 3)"}, "2": {"text": "Mrs. Nolan's cake will be delivered 1 day before the cake shaped like a sports car.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 1 == T[r('sports car')][c('delivery dates')])"}, "3": {"text": "Mrs. Danielson's order won't be delivered on October 6.", "conditions": "(T[r('Danielson')][c('delivery dates')] != 6)"}, "4": {"text": "The October 8 delivery will be in the shape of a biplane.", "conditions": "(T[r(8)][c('cake shapes')] == 'biplane')"}, "5": {"text": "Neither Mrs. Harper's order nor the strawberry cake is the October 6 delivery.", "conditions": "(T[r('Harper')][c('delivery dates')] != 6 and T[r('strawberry')][c('delivery dates')] != 6) and (T[r('Harper')][c('flavors')] != 'strawberry')"}, "6": {"text": "Mrs. Nolan's cake will be delivered 2 days before the strawberry cake.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 2 == T[r('strawberry')][c('delivery dates')])"}, "7": {"text": "The cake shaped like a rocket ship will be delivered 1 day before the coconut cake.", "conditions": "(T[r('rocket ship')][c('delivery dates')] + 1 == T[r('coconut')][c('delivery dates')])"}, "8": {"text": "Mrs. Harper's order won't be shaped like a biplane.", "conditions": "(T[r('Harper')][c('cake shapes')] != 'biplane')"}, "9": {"text": "Mrs. Keller's order won't be shaped like a sports car.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sports car')"}, "10": {"text": "The order shaped like a sailboat will be delivered 2 days after the raspberry cake.", "conditions": "(T[r('sailboat')][c('delivery dates')] == T[r('raspberry')][c('delivery dates')] + 2)"}, "11": {"text": "Mrs. Keller's cake won't be shaped like a sailboat.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sailboat')"}}, "initial": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], "current": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "Harper", "", ""]], "applied_clues": ["1", "10", "6", "2", "5"], "initial_to_current": [[["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "Harper", "", ""]]], "unsolvable_child": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "Danielson", "", "lemon"], [9, "Harper", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "Lowe", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Keller", "biplane", "lemon"], [9, "Harper", "turtle", "banana"]], "current_status": "Solvable"}}
{"inputs": {"question": "Lorena's Specialty Cakes has a number of different orders to fulfill this week. Using only the clues below, match the delivery dates to the options from customers, cake shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "delivery dates : 5, 6, 7, 8, 9.\ncustomers : Danielson, Harper, Keller, Lowe, Nolan.\ncake shapes : biplane, rocket ship, sailboat, sports car, turtle.\nflavors : banana, coconut, lemon, raspberry, strawberry.", "clues": {"1": {"text": "The lemon cake will be delivered 3 days after the raspberry cake.", "conditions": "(T[r('lemon')][c('delivery dates')] - T[r('raspberry')][c('delivery dates')] == 3)"}, "2": {"text": "Mrs. Nolan's cake will be delivered 1 day before the cake shaped like a sports car.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 1 == T[r('sports car')][c('delivery dates')])"}, "3": {"text": "Mrs. Danielson's order won't be delivered on October 6.", "conditions": "(T[r('Danielson')][c('delivery dates')] != 6)"}, "4": {"text": "The October 8 delivery will be in the shape of a biplane.", "conditions": "(T[r(8)][c('cake shapes')] == 'biplane')"}, "5": {"text": "Neither Mrs. Harper's order nor the strawberry cake is the October 6 delivery.", "conditions": "(T[r('Harper')][c('delivery dates')] != 6 and T[r('strawberry')][c('delivery dates')] != 6) and (T[r('Harper')][c('flavors')] != 'strawberry')"}, "6": {"text": "Mrs. Nolan's cake will be delivered 2 days before the strawberry cake.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 2 == T[r('strawberry')][c('delivery dates')])"}, "7": {"text": "The cake shaped like a rocket ship will be delivered 1 day before the coconut cake.", "conditions": "(T[r('rocket ship')][c('delivery dates')] + 1 == T[r('coconut')][c('delivery dates')])"}, "8": {"text": "Mrs. Harper's order won't be shaped like a biplane.", "conditions": "(T[r('Harper')][c('cake shapes')] != 'biplane')"}, "9": {"text": "Mrs. Keller's order won't be shaped like a sports car.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sports car')"}, "10": {"text": "The order shaped like a sailboat will be delivered 2 days after the raspberry cake.", "conditions": "(T[r('sailboat')][c('delivery dates')] == T[r('raspberry')][c('delivery dates')] + 2)"}, "11": {"text": "Mrs. Keller's cake won't be shaped like a sailboat.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sailboat')"}}, "initial": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], "current": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "Danielson", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "Harper", "", ""]], "applied_clues": ["1", "10", "6", "2", "5", "3"], "initial_to_current": [[["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "Harper", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "Danielson", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "Harper", "", ""]]], "unsolvable_child": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "Danielson", "sailboat", "strawberry"], [8, "", "rocket ship", "lemon"], [9, "Harper", "", "coconut"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "Lowe", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Keller", "biplane", "lemon"], [9, "Harper", "turtle", "banana"]], "current_status": "Solvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", ""], [55, "", "", ""], [62, "Felix", "black", "Oakland Acres"], [69, "", "gray", ""]], "applied_clues": ["1", "3", "8"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "Felix", "", "Oakland Acres"], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", "Toledo"], [48, "", "", ""], [55, "", "", ""], [62, "Felix", "black", "Oakland Acres"], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", ""], [55, "", "", ""], [62, "Felix", "black", "Oakland Acres"], [69, "", "gray", ""]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", "Worthington"], [55, "", "", ""], [62, "Felix", "black", "Oakland Acres"], [69, "", "gray", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Solvable"}}
{"inputs": {"question": "Barry's Deli has a bunch of orders to fill. Using only the clues below, match the prices to the options from customers, cheeses, and meats. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 2.75, 3.75, 4.75, 5.75, 6.75.\ncustomers : Archie, Mildred, Sue, Verna, Yolanda.\ncheeses : cheddar, colby jack, gouda, havarti, provolone.\nmeats : bologna, liverwurst, prosciutto, roast beef, salami.", "clues": {"1": {"text": "Verna's sandwich costs $6.75.", "conditions": "(T[r('Verna')][c('prices')] == 6.75)"}, "2": {"text": "The sandwich with salami doesn't include cheddar cheese.", "conditions": "(T[r('salami')][c('cheeses')] != 'cheddar')"}, "3": {"text": "Of the sandwich with roast beef and Sue's sandwich, one costs $6.75 and the other includes havarti cheese.", "conditions": "((T[r('roast beef')][c('prices')] == 6.75 and T[r('Sue')][c('cheeses')] == 'havarti') or (T[r('Sue')][c('prices')] == 6.75 and T[r('roast beef')][c('cheeses')] == 'havarti')) and (T[r('roast beef')][c('customers')] != 'Sue') and (T[r('havarti')][c('prices')] != 6.75)"}, "4": {"text": "The $4.75 order doesn't include liverwurst.", "conditions": "(T[r(4.75)][c('meats')] != 'liverwurst')"}, "5": {"text": "The five sandwiches are the $6.75 order, the order with liverwurst, the sandwich with cheddar cheese, the order with havarti cheese and the order with gouda cheese.", "conditions": "(T[r(6.75)][c('meats')] != 'liverwurst') and (T[r(6.75)][c('cheeses')] != 'cheddar') and (T[r(6.75)][c('cheeses')]!= 'havarti') and (T[r(6.75)][c('cheeses')]!='gouda') and (T[r('liverwurst')][c('cheeses')] != 'cheddar') and (T[r('liverwurst')][c('cheeses')]!= 'havarti') and (T[r('liverwurst')][c('cheeses')]!='gouda')"}, "6": {"text": "Archie's order costs 2 dollars more than the order with prosciutto.", "conditions": "(T[r('Archie')][c('prices')] == T[r('prosciutto')][c('prices')] + 2.0)"}, "7": {"text": "Of Yolanda's order and the order with gouda cheese, one costs $2.75 and the other costs $4.75.", "conditions": "((T[r('Yolanda')][c('prices')] == 2.75 and T[r('gouda')][c('prices')] == 4.75) or (T[r('gouda')][c('prices')] == 2.75 and T[r('Yolanda')][c('prices')] == 4.75)) and (T[r('Yolanda')][c('cheeses')]!='gouda')"}, "8": {"text": "The order with roast beef doesn't include colby jack cheese.", "conditions": "(T[r('roast beef')][c('cheeses')] != 'colby jack')"}, "9": {"text": "The sandwich with gouda cheese costs 1 dollar less than the sandwich with prosciutto.", "conditions": "(T[r('gouda')][c('prices')] + 1.0 == T[r('prosciutto')][c('prices')])"}}, "initial": [["prices", "customers", "cheeses", "meats"], [2.75, "", "", ""], [3.75, "", "", ""], [4.75, "", "", ""], [5.75, "", "", ""], [6.75, "", "", ""]], "current": [["prices", "customers", "cheeses", "meats"], [2.75, "", "gouda", ""], [3.75, "", "", ""], [4.75, "Yolanda", "", ""], [5.75, "", "", ""], [6.75, "", "", ""]], "applied_clues": ["7"], "initial_to_current": [[["prices", "customers", "cheeses", "meats"], [2.75, "", "", ""], [3.75, "", "", ""], [4.75, "", "", ""], [5.75, "", "", ""], [6.75, "", "", ""]], [["prices", "customers", "cheeses", "meats"], [2.75, "", "gouda", ""], [3.75, "", "", ""], [4.75, "Yolanda", "", ""], [5.75, "", "", ""], [6.75, "", "", ""]]], "unsolvable_child": [["prices", "customers", "cheeses", "meats"], [2.75, "", "gouda", ""], [3.75, "", "havarti", "roast beef"], [4.75, "Yolanda", "", ""], [5.75, "", "", ""], [6.75, "Sue", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "customers", "cheeses", "meats"], [2.75, "Mildred", "gouda", "salami"], [3.75, "Sue", "havarti", "prosciutto"], [4.75, "Yolanda", "cheddar", "bologna"], [5.75, "Archie", "colby jack", "liverwurst"], [6.75, "Verna", "provolone", "roast beef"]], "current_status": "Solvable"}}
{"inputs": {"question": "Barry's Deli has a bunch of orders to fill. Using only the clues below, match the prices to the options from customers, cheeses, and meats. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 2.75, 3.75, 4.75, 5.75, 6.75.\ncustomers : Archie, Mildred, Sue, Verna, Yolanda.\ncheeses : cheddar, colby jack, gouda, havarti, provolone.\nmeats : bologna, liverwurst, prosciutto, roast beef, salami.", "clues": {"1": {"text": "Verna's sandwich costs $6.75.", "conditions": "(T[r('Verna')][c('prices')] == 6.75)"}, "2": {"text": "The sandwich with salami doesn't include cheddar cheese.", "conditions": "(T[r('salami')][c('cheeses')] != 'cheddar')"}, "3": {"text": "Of the sandwich with roast beef and Sue's sandwich, one costs $6.75 and the other includes havarti cheese.", "conditions": "((T[r('roast beef')][c('prices')] == 6.75 and T[r('Sue')][c('cheeses')] == 'havarti') or (T[r('Sue')][c('prices')] == 6.75 and T[r('roast beef')][c('cheeses')] == 'havarti')) and (T[r('roast beef')][c('customers')] != 'Sue') and (T[r('havarti')][c('prices')] != 6.75)"}, "4": {"text": "The $4.75 order doesn't include liverwurst.", "conditions": "(T[r(4.75)][c('meats')] != 'liverwurst')"}, "5": {"text": "The five sandwiches are the $6.75 order, the order with liverwurst, the sandwich with cheddar cheese, the order with havarti cheese and the order with gouda cheese.", "conditions": "(T[r(6.75)][c('meats')] != 'liverwurst') and (T[r(6.75)][c('cheeses')] != 'cheddar') and (T[r(6.75)][c('cheeses')]!= 'havarti') and (T[r(6.75)][c('cheeses')]!='gouda') and (T[r('liverwurst')][c('cheeses')] != 'cheddar') and (T[r('liverwurst')][c('cheeses')]!= 'havarti') and (T[r('liverwurst')][c('cheeses')]!='gouda')"}, "6": {"text": "Archie's order costs 2 dollars more than the order with prosciutto.", "conditions": "(T[r('Archie')][c('prices')] == T[r('prosciutto')][c('prices')] + 2.0)"}, "7": {"text": "Of Yolanda's order and the order with gouda cheese, one costs $2.75 and the other costs $4.75.", "conditions": "((T[r('Yolanda')][c('prices')] == 2.75 and T[r('gouda')][c('prices')] == 4.75) or (T[r('gouda')][c('prices')] == 2.75 and T[r('Yolanda')][c('prices')] == 4.75)) and (T[r('Yolanda')][c('cheeses')]!='gouda')"}, "8": {"text": "The order with roast beef doesn't include colby jack cheese.", "conditions": "(T[r('roast beef')][c('cheeses')] != 'colby jack')"}, "9": {"text": "The sandwich with gouda cheese costs 1 dollar less than the sandwich with prosciutto.", "conditions": "(T[r('gouda')][c('prices')] + 1.0 == T[r('prosciutto')][c('prices')])"}}, "initial": [["prices", "customers", "cheeses", "meats"], [2.75, "", "", ""], [3.75, "", "", ""], [4.75, "", "", ""], [5.75, "", "", ""], [6.75, "", "", ""]], "current": [["prices", "customers", "cheeses", "meats"], [2.75, "", "gouda", ""], [3.75, "Sue", "havarti", ""], [4.75, "Yolanda", "", ""], [5.75, "", "", ""], [6.75, "Verna", "", "roast beef"]], "applied_clues": ["7", "3", "1"], "initial_to_current": [[["prices", "customers", "cheeses", "meats"], [2.75, "", "", ""], [3.75, "", "", ""], [4.75, "", "", ""], [5.75, "", "", ""], [6.75, "", "", ""]], [["prices", "customers", "cheeses", "meats"], [2.75, "", "gouda", ""], [3.75, "", "", ""], [4.75, "Yolanda", "", ""], [5.75, "", "", ""], [6.75, "", "", ""]], [["prices", "customers", "cheeses", "meats"], [2.75, "", "gouda", ""], [3.75, "Sue", "havarti", ""], [4.75, "Yolanda", "", ""], [5.75, "", "", ""], [6.75, "", "", "roast beef"]], [["prices", "customers", "cheeses", "meats"], [2.75, "", "gouda", ""], [3.75, "Sue", "havarti", ""], [4.75, "Yolanda", "", ""], [5.75, "", "", ""], [6.75, "Verna", "", "roast beef"]]], "unsolvable_child": [["prices", "customers", "cheeses", "meats"], [2.75, "", "gouda", ""], [3.75, "Sue", "havarti", ""], [4.75, "Yolanda", "", "liverwurst"], [5.75, "", "cheddar", ""], [6.75, "Verna", "", "roast beef"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["prices", "customers", "cheeses", "meats"], [2.75, "Mildred", "gouda", "salami"], [3.75, "Sue", "havarti", "prosciutto"], [4.75, "Yolanda", "cheddar", "bologna"], [5.75, "Archie", "colby jack", "liverwurst"], [6.75, "Verna", "provolone", "roast beef"]], "current_status": "Solvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", ""], [200, "", "", ""], [225, "", "", ""]], "applied_clues": ["5"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", ""], [200, "", "", ""], [225, "", "", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "", "", "raspberry"], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", ""], [200, "", "", ""], [225, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Solvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "", "", ""], [225, "", "", ""]], "applied_clues": ["5", "2"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "", "", ""], [225, "", "", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Zachary", "beach chair", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "", "", ""], [225, "", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Solvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", ""], [225, "", "", "banana"]], "applied_clues": ["5", "2", "7", "11"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", ""], [225, "", "", "banana"]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "Erica", "", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", ""], [225, "", "train", "banana"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], "applied_clues": ["4", "5"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Portland"], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Solvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, "Portland"]], "applied_clues": ["4", "5", "8"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, "Portland"]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "Winifred", "", ""], [36, "", 7, "Portland"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Solvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]], "applied_clues": ["2", "5"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", ""], ["9:30am", "", "", ""], ["10:30am", "Arnold", "Michelle", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Solvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", ""], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]], "applied_clues": ["2", "5", "4"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", ""], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Solvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Lena", ""], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]], "applied_clues": ["2", "5", "4", "1", "3", "7", "8"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", ""], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]], [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Lena", ""], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "", "Jimmy", "cardio"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Lena", ""], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Crystal", "Jimmy", "cardio"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Solvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "", ""], [8, "", "Time to Burn", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "applied_clues": ["9"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "", ""], [8, "", "Time to Burn", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "", "Lyle Lester"], [8, "", "Time to Burn", ""], [15, "", "Kip and Ken", ""], [22, "", "", ""], [29, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Solvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", ""], [15, "", "", "Lyle Lester"], [22, "", "", ""], [29, "", "", ""]], "applied_clues": ["9", "2"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "", ""], [8, "", "Time to Burn", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", ""], [15, "", "", "Lyle Lester"], [22, "", "", ""], [29, "", "", ""]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "Wayne", "Time to Burn", ""], [15, "", "", "Lyle Lester"], [22, "", "", "Gabby Garza"], [29, "", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Solvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", ""], [15, "Wayne", "", "Lyle Lester"], [22, "", "", ""], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "", ""], [8, "", "Time to Burn", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", ""], [15, "", "", "Lyle Lester"], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", ""], [15, "Wayne", "", "Lyle Lester"], [22, "", "", ""], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "", "", ""], [29, "", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Solvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", ""], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "", "", ""], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "", ""], [8, "", "Time to Burn", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", ""], [15, "", "", "Lyle Lester"], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", ""], [15, "Wayne", "", "Lyle Lester"], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", ""], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "", "", ""], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", ""], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "", "", ""], [29, "Ken", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Solvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", ""], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "", ""], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5", "8"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "", ""], [8, "", "Time to Burn", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", ""], [15, "", "", "Lyle Lester"], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", ""], [15, "Wayne", "", "Lyle Lester"], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", ""], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", ""], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "", ""], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", "Hank Hensley"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "", "Dale Durham"], [29, "", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Solvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "", "Hank Hensley"], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5", "8", "4"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "", ""], [8, "", "Time to Burn", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", ""], [15, "", "", "Lyle Lester"], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", ""], [8, "", "Time to Burn", ""], [15, "Wayne", "", "Lyle Lester"], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", ""], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", ""], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "", "Hank Hensley"], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "", "Hank Hensley"], [29, "Sherrie", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Solvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "Deanna", 4, ""]], "applied_clues": ["3"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "Deanna", 4, ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "Gretchen", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "Deanna", 4, "Ontario"]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]], "applied_clues": ["4"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "Seth", "", "gamma rays"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "GX-13", ""]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "", "", ""], [3, "", "", ""], [4, "Seth", "", "gamma rays"], [5, "Christian", "GX-13", ""]], "applied_clues": ["4", "8"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "", "", ""], [3, "", "", ""], [4, "Seth", "", "gamma rays"], [5, "Christian", "GX-13", ""]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "", "WB-664", ""], [3, "", "AV-435", ""], [4, "Seth", "ZF-15", "gamma rays"], [5, "Christian", "GX-13", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]], "applied_clues": ["4", "6", "3"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", ""], [12, "", "Bull Creek"]], [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "Esther", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The U. S. Air Force is currently testing a number of new experimental, supersonic aircraft, each built by a different aerospace company. Using only the clues below, match the prices to the options from aircraft, companies, and top speeds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 100, 125, 150, 175.\naircraft : Darkwing 6, Falcon X-2, Kesseling, Raven 12.\ncompanies : Ale and Moore, Forsyth, Pittakan, Tenerife.\ntop speeds : Mach 2.3, Mach 2.9, Mach 3.2, Mach 3.4.", "clues": {"1": {"text": "The Darkwing 6 costs 50 million dollars more than the jet built by Tenerife.", "conditions": "(T[r('Darkwing 6')][c('prices')] == T[r('Tenerife')][c('prices')] + 50)"}, "2": {"text": "The Raven 12 doesn't cost $125 million.", "conditions": "(T[r('Raven 12')][c('prices')] != 125)"}, "3": {"text": "The plane with a top speed of Mach 3.2 costs more than the jet built by Tenerife.", "conditions": "(T[r('Mach 3.2')][c('prices')] > T[r('Tenerife')][c('prices')])"}, "4": {"text": "The aircraft with a top speed of Mach 2.9, the aircraft built by Forsyth, and the $150 million aircraft are three different jets.", "conditions": "(T[r('Mach 2.9')][c('companies')]!='Forsyth') and (T[r(150)][c('companies')]!='Forsyth') and (T[r(150)][c('top speeds')]!='Mach 3.2')"}, "5": {"text": "The plane with a top speed of Mach 2.9 is either the Raven 12 or the $100 million jet.", "conditions": "(T[r('Mach 2.9')][c('aircraft')] == 'Raven 12' or T[r('Mach 2.9')][c('prices')] == 100) and (T[r('Raven 12')][c('prices')] != 100)"}, "6": {"text": "The $125 million plane, the aircraft with a top speed of Mach 3.4 and the jet built by Forsyth are all different jets.", "conditions": "(T[r(125)][c('top speeds')] != 'Mach 3.4') and (T[r('Forsyth')][c('top speeds')] != 'Mach 3.4') and (T[r(125)][c('companies')]!='Forsyth')"}, "7": {"text": "The plane with a top speed of Mach 3.2 is either the plane built by Tenerife or the plane built by Pittakan.", "conditions": "(T[r('Mach 3.2')][c('companies')] == 'Tenerife' or T[r('Mach 3.2')][c('companies')] == 'Pittakan')"}, "8": {"text": "The Falcon X-2 was built by Tenerife.", "conditions": "(T[r('Falcon X-2')][c('companies')] == 'Tenerife')"}}, "initial": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], "current": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], "applied_clues": ["5", "2"], "initial_to_current": [[["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]]], "unsolvable_child": [["prices", "aircraft", "companies", "top speeds"], [100, "", "Forsyth", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", "Mach 3.4"], [175, "", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["prices", "aircraft", "companies", "top speeds"], [100, "Falcon X-2", "Tenerife", "Mach 2.9"], [125, "Kesseling", "Pittakan", "Mach 3.2"], [150, "Darkwing 6", "Ale and Moore", "Mach 3.4"], [175, "Raven 12", "Forsyth", "Mach 2.3"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], "applied_clues": ["2", "10"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "Yvonne", "Odyssey", "hammerhead"], [4, "Gene", "Liberty", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "GXTV", "Heathcliff", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "GXTV", "Heathcliff", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Edith", "financial"], [26, "", "", ""], [27, "GXTV", "Heathcliff", "telecom"], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Nicholas and Edith are having a small dinner party this evening at their home in Cedar Valley, and they've decided to open a select number of rare wines from their personal collection to celebrate the occasion. Using only the clues below, match the vintages to the options from wines and types. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "vintages : 1984, 1988, 1992, 1996.\nwines : Annata Branco, Bianca Flaux, Ece Suss, Vendemmia.\ntypes : gewurztraminer, merlot, pinot noir, riesling.", "clues": {"1": {"text": "The Ece Suss was bottled sometime after the Annata Branco.", "conditions": "(T[r('Ece Suss')][c('vintages')] > T[r('Annata Branco')][c('vintages')])"}, "2": {"text": "The Bianca Flaux was bottled 4 years before the Vendemmia.", "conditions": "(T[r('Vendemmia')][c('vintages')] - T[r('Bianca Flaux')][c('vintages')] == 4)"}, "3": {"text": "The 1988 bottle is a pinot noir.", "conditions": "(T[r(1988)][c('types')] == 'pinot noir')"}, "4": {"text": "The merlot is either the Annata Branco or the Bianca Flaux.", "conditions": "(T[r('merlot')][c('wines')] == 'Annata Branco' or T[r('merlot')][c('wines')] == 'Bianca Flaux')"}, "5": {"text": "The Bianca Flaux was bottled sometime after the Ece Suss.", "conditions": "(T[r('Bianca Flaux')][c('vintages')] > T[r('Ece Suss')][c('vintages')])"}, "6": {"text": "The 1984 bottle is a gewurztraminer.", "conditions": "(T[r(1984)][c('types')] == 'gewurztraminer')"}}, "initial": [["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], "current": [["vintages", "wines", "types"], [1984, "", ""], [1988, "Bianca Flaux", ""], [1992, "Vendemmia", ""], [1996, "Annata Branco", "merlot"]], "applied_clues": ["2", "4"], "initial_to_current": [[["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], [["vintages", "wines", "types"], [1984, "", ""], [1988, "Bianca Flaux", ""], [1992, "Vendemmia", ""], [1996, "", ""]], [["vintages", "wines", "types"], [1984, "", ""], [1988, "Bianca Flaux", ""], [1992, "Vendemmia", ""], [1996, "Annata Branco", "merlot"]]], "unsolvable_child": [["vintages", "wines", "types"], [1984, "Ece Suss", ""], [1988, "Bianca Flaux", ""], [1992, "Vendemmia", ""], [1996, "Annata Branco", "merlot"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["vintages", "wines", "types"], [1984, "Annata Branco", "gewurztraminer"], [1988, "Ece Suss", "pinot noir"], [1992, "Bianca Flaux", "merlot"], [1996, "Vendemmia", "riesling"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], "applied_clues": ["3", "12", "8", "6", "4"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "Lowell", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "", "", ""], [225, "Zachary", "", ""]], "applied_clues": ["5", "2", "7"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "", "", ""], [225, "Zachary", "", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "", "", ""], [225, "Zachary", "", "banana"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "GX-13", "gamma rays"], [4, "", "", ""], [5, "Seth", "", "larval growth"]], "applied_clues": ["4", "8"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "larval growth"]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "GX-13", "gamma rays"], [4, "", "", ""], [5, "Seth", "", "larval growth"]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "WB-664", ""], [3, "", "GX-13", "gamma rays"], [4, "", "ZF-15", ""], [5, "Seth", "AV-435", "larval growth"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners and butterflies. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 45, 60, 75, 90.\nwinners : Otis, Phillip, Walter, Yvette.\nbutterflies : atlas, grayling, peacock, swallowtail.", "clues": {"1": {"text": "Yvette's purchase was either the insect that sold for $45 or the peacock butterfly.", "conditions": "(T[r('Yvette')][c('butterflies')] == 'peacock' or T[r('Yvette')][c('prices')] == 45) and (T[r('peacock')][c('prices')] != 45)"}, "2": {"text": "The swallowtail butterfly cost 15 dollars more than Phillip's purchase.", "conditions": "(T[r('swallowtail')][c('prices')] == T[r('Phillip')][c('prices')] + 15)"}, "3": {"text": "The atlas butterfly cost more than the peacock butterfly.", "conditions": "(T[r('atlas')][c('prices')] > T[r('peacock')][c('prices')])"}, "4": {"text": "The four butterflies were the butterfly that sold for $90, the grayling butterfly, Yvette's purchase and Walter's purchase.", "conditions": "(T[r(90)][c('butterflies')]!='grayling') and (T[r(90)][c('winners')]!='Yvette') and (T[r(90)][c('winners')]!='Walter') and (T[r('grayling')][c('winners')]!='Yvette') and (T[r('grayling')][c('winners')]!='Walter')"}}, "initial": [["prices", "winners", "butterflies"], [45, "", ""], [60, "", ""], [75, "", ""], [90, "", ""]], "current": [["prices", "winners", "butterflies"], [45, "", ""], [60, "Yvette", "peacock"], [75, "", ""], [90, "", ""]], "applied_clues": ["1"], "initial_to_current": [[["prices", "winners", "butterflies"], [45, "", ""], [60, "", ""], [75, "", ""], [90, "", ""]], [["prices", "winners", "butterflies"], [45, "", ""], [60, "Yvette", "peacock"], [75, "", ""], [90, "", ""]]], "unsolvable_child": [["prices", "winners", "butterflies"], [45, "", ""], [60, "Yvette", "peacock"], [75, "Phillip", ""], [90, "", "swallowtail"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "butterflies"], [45, "Phillip", "grayling"], [60, "Walter", "swallowtail"], [75, "Yvette", "peacock"], [90, "Otis", "atlas"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "\"Against the Grain\" offers hand-made wooden furniture at reasonable prices. Each item is made by an in-house employee. Using only the clues below, match the dollars to the options from woodworkers, woods, and pieces. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "dollars: 250, 275, 300, 325, 350, 375.\nwoodworkers : Bonita, Ellen, Josephine, Kendra, Olivia, Patsy.\nwoods : ash, mahogany, oak, poplar, rosewood, walnut.\npieces : barstool, bookshelf, coffee table, end table, footstool, hutch.", "clues": {"1": {"text": "The $325 piece is the barstool.", "conditions": "(T[r(325)][c('pieces')] == 'barstool')"}, "2": {"text": "Of the piece made of ash and the barstool, one was crafted by Bonita and the other costs $250.", "conditions": "((T[r('ash')][c('woodworkers')] == 'Bonita' and T[r('barstool')][c('dollars')] == 250 ) or (T[r('barstool')][c('woodworkers')] == 'Bonita' and T[r('ash')][c('dollars')] == 250)) and (T[r('ash')][c('pieces')] != 'barstool') and (T[r('Bonita')][c('dollars')] != 250)"}, "3": {"text": "The end table costs 25 dollars more than Ellen's item.", "conditions": "(T[r('end table')][c('dollars')] == T[r('Ellen')][c('dollars')] + 25)"}, "4": {"text": "Ellen's piece costs 50 dollars more than the hutch.", "conditions": "(T[r('Ellen')][c('dollars')] == T[r('hutch')][c('dollars')] + 50)"}, "5": {"text": "The bookshelf wasn't made of oak.", "conditions": "(T[r('bookshelf')][c('woods')] != 'oak')"}, "6": {"text": "Kendra's item wasn't made of rosewood.", "conditions": "(T[r('Kendra')][c('woods')] != 'rosewood')"}, "7": {"text": "Neither the coffee table nor the item made of oak is Kendra's piece.", "conditions": "(T[r('Kendra')][c('pieces')] != 'coffee table' and T[r('oak')][c('woodworkers')] != 'Kendra') and (T[r('oak')][c('pieces')] != 'coffee table')"}, "8": {"text": "Josephine's item is either the item made of walnut or the end table.", "conditions": "(T[r('Josephine')][c('woods')] == 'walnut' or T[r('Josephine')][c('pieces')] == 'end table') and (T[r('walnut')][c('pieces')] != 'end table')"}, "9": {"text": "Of Bonita's piece and the bookshelf, one was made of poplar and the other costs $275.", "conditions": "((T[r('Bonita')][c('woods')] == 'poplar' and T[r('bookshelf')][c('dollars')] == 275) or (T[r('bookshelf')][c('woods')] == 'poplar' and T[r('Bonita')][c('dollars')] == 275)) and (T[r('Bonita')][c('pieces')] != 'bookshelf') and (T[r('poplar')][c('dollars')] != 275)"}, "10": {"text": "The piece made of walnut costs 75 dollars more than Patsy's piece.", "conditions": "(T[r('walnut')][c('dollars')] == T[r('Patsy')][c('dollars')] + 75)"}, "11": {"text": "Neither the piece made of oak nor the item made of walnut is the coffee table.", "conditions": "(T[r('oak')][c('pieces')] != 'coffee table' and T[r('walnut')][c('pieces')] != 'coffee table')"}}, "initial": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], "current": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", ""], [300, "Bonita", "", "barstool"], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], "applied_clues": ["2"], "initial_to_current": [[["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", ""], [300, "Bonita", "", "barstool"], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]]], "unsolvable_child": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "Bonita", "poplar", "barstool"], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["dollars", "woodworkers", "woods", "pieces"], [250, "Olivia", "ash", "coffee table"], [275, "Patsy", "rosewood", "bookshelf"], [300, "Kendra", "mahogany", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", "footstool"], [375, "Josephine", "oak", "end table"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]], "applied_clues": ["3", "12", "8", "6", "4", "7", "5"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", "waiter"], [11, "Vernon", "golf", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "applied_clues": ["1", "12", "3", "9"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "Olga", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", "Honduras"], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "", "garbage man"], [39, "", "baseball", ""]], "applied_clues": ["3", "12", "8"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "", "garbage man"], [39, "", "baseball", ""]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "", "garbage man"], [39, "", "baseball", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], "applied_clues": ["6", "2", "11", "3", "4"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "Felix", "", "Oakland Acres"], [55, "", "", ""], [62, "", "", ""], [69, "", "gray", ""]], "applied_clues": ["1"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "Felix", "", "Oakland Acres"], [55, "", "", ""], [62, "", "", ""], [69, "", "gray", ""]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "", "", "Toledo"], [48, "Felix", "black", "Oakland Acres"], [55, "", "", ""], [62, "", "", ""], [69, "", "gray", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "Liberty", "goblin"], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "", ""]], "applied_clues": ["2", "10", "4"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "Liberty", "goblin"], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Escape", ""], [5, "Gene", "Liberty", "goblin"], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], "applied_clues": ["4", "5", "8", "2", "11", "7", "3"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "Diane DeNiro", 10, ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Help Donna make sense of Dr. Finklestein's appointment list for today. Using only the clues below, match the times to the options from names, ailments, and insurers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 9, 10, 11, 12.\nnames : Billy, Guy, Paul, Terry.\nailments : back pain, hip pain, shingles, vertigo.\ninsurers : Ambercare, HealthCo, Lifealign, Triflex.", "clues": {"1": {"text": "The person with Lifealign insurance has an appointment sometime before the patient suffering from shingles.", "conditions": "(T[r('Lifealign')][c('times')] < T[r('shingles')][c('times')])"}, "2": {"text": "The patient with the 12 noon appointment is either Terry or the patient with Ambercare insurance.", "conditions": "(T[r(12)][c('names')] == 'Terry' or T[r(12)][c('insurers')] == 'Ambercare') and (T[r('Terry')][c('insurers')] != 'Ambercare')"}, "3": {"text": "The patient suffering from back pain has an appointment 2 hours before Guy.", "conditions": "(T[r('back pain')][c('times')] == T[r('Guy')][c('times')] - 2)"}, "4": {"text": "The person with Ambercare insurance has an appointment sometime after the person suffering from vertigo.", "conditions": "(T[r('Ambercare')][c('times')] > T[r('vertigo')][c('times')])"}, "5": {"text": "Neither Billy nor the person suffering from shingles is the person with Lifealign insurance.", "conditions": "(T[r('Billy')][c('insurers')] != 'Lifealign' and T[r('shingles')][c('insurers')] != 'Lifealign') and (T[r('Billy')][c('ailments')] != 'shingles')"}, "6": {"text": "The person with the 9:00am appointment is either Paul or the patient suffering from back pain.", "conditions": "(T[r(9)][c('names')] == 'Paul' or T[r(9)][c('ailments')] == 'back pain') and (T[r('Paul')][c('ailments')] != 'back pain')"}, "7": {"text": "The patient with the 10:00am appointment has Triflex insurance.", "conditions": "(T[r(10)][c('insurers')] == 'Triflex')"}, "8": {"text": "Of the patient suffering from vertigo and the person with Ambercare insurance, one has the 11:00am appointment and the other is Billy.", "conditions": "((T[r('vertigo')][c('times')] == 11 and T[r('Ambercare')][c('names')] == 'Billy') or (T[r('Ambercare')][c('times')] == 11 and T[r('vertigo')][c('names')] == 'Billy')) and (T[r('vertigo')][c('insurers')] != 'Ambercare') and (T[r(11)][c('names')] != 'Billy')"}}, "initial": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], "current": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "", "Ambercare"], [11, "", "vertigo", ""], [12, "", "", ""]], "applied_clues": ["8"], "initial_to_current": [[["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "", "Ambercare"], [11, "", "vertigo", ""], [12, "", "", ""]]], "unsolvable_child": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "", "Ambercare"], [11, "", "vertigo", ""], [12, "Terry", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", "Lifealign"], [10, "Paul", "shingles", "Triflex"], [11, "Guy", "vertigo", "HealthCo"], [12, "Billy", "hip pain", "Ambercare"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers and shapes. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Karen, Natasha, Patrick, Salvador, Yvette.\nshapes : beach chair, golf ball, mountain, sports car, train.", "clues": {"1": {"text": "The $175 piece isn't shaped like a beach chair.", "conditions": "(T[r(175)][c('shapes')] != 'beach chair')"}, "2": {"text": "Natasha's piece costs 50 dollars less than Patrick's piece.", "conditions": "(T[r('Natasha')][c('prices')] == T[r('Patrick')][c('prices')] - 50)"}, "3": {"text": "The piece shaped like a train costs 75 dollars more than the cake shaped like a golf ball.", "conditions": "(T[r('train')][c('prices')] == T[r('golf ball')][c('prices')] + 75)"}, "4": {"text": "Salvador's piece is shaped like a sports car.", "conditions": "(T[r('Salvador')][c('shapes')] == 'sports car')"}, "5": {"text": "Natasha's piece costs somewhat more than Karen's piece.", "conditions": "(T[r('Natasha')][c('prices')] > T[r('Karen')][c('prices')])"}, "6": {"text": "Yvette's piece costs $175.", "conditions": "(T[r('Yvette')][c('prices')] == 175)"}}, "initial": [["prices", "customers", "shapes"], [125, "", ""], [150, "", ""], [175, "", ""], [200, "", ""], [225, "", ""]], "current": [["prices", "customers", "shapes"], [125, "", "beach chair"], [150, "Natasha", ""], [175, "Yvette", ""], [200, "Patrick", ""], [225, "", ""]], "applied_clues": ["6", "1", "2"], "initial_to_current": [[["prices", "customers", "shapes"], [125, "", ""], [150, "", ""], [175, "", ""], [200, "", ""], [225, "", ""]], [["prices", "customers", "shapes"], [125, "", ""], [150, "", ""], [175, "Yvette", ""], [200, "", ""], [225, "", ""]], [["prices", "customers", "shapes"], [125, "", "beach chair"], [150, "", ""], [175, "Yvette", ""], [200, "", ""], [225, "", ""]], [["prices", "customers", "shapes"], [125, "", "beach chair"], [150, "Natasha", ""], [175, "Yvette", ""], [200, "Patrick", ""], [225, "", ""]]], "unsolvable_child": [["prices", "customers", "shapes"], [125, "", "beach chair"], [150, "Natasha", "golf ball"], [175, "Yvette", ""], [200, "Patrick", ""], [225, "", "train"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "customers", "shapes"], [125, "Karen", "golf ball"], [150, "Natasha", "beach chair"], [175, "Yvette", "mountain"], [200, "Patrick", "train"], [225, "Salvador", "sports car"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "Explore More", "", "Airstream"], [350, "", "", ""], [400, "", "Sheryl", ""]], "applied_clues": ["2"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "Explore More", "", "Airstream"], [350, "", "", ""], [400, "", "Sheryl", ""]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "Explore More", "", "Airstream"], [350, "", "", ""], [400, "", "Sheryl", "Mack truck"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "Zachary", "beach chair", ""], [225, "", "", "banana"]], "applied_clues": ["5", "2", "7", "11"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "Zachary", "beach chair", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "Zachary", "beach chair", ""], [225, "", "", "banana"]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "train", "raspberry"], [200, "Zachary", "beach chair", ""], [225, "", "", "banana"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "BMG-831", ""], [75, "Injitsu", "MRT-628", ""], [100, "", "", ""]], "applied_clues": ["4", "3", "7"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "BMG-831", ""], [75, "Injitsu", "MRT-628", ""], [100, "", "", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", ""], [100, "", "SVZ-880", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "applied_clues": ["5"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Paradise", "soy"], ["June 5th", "Lucky Star", "Red Oak", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "", "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", "Green Swamp"], [11, "", ""], [12, "Alex", ""]], "applied_clues": ["1", "5", "7"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", "Green Swamp"], [11, "", ""], [12, "Alex", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", "Green Swamp"], [11, "", ""], [12, "Alex", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", "Mack truck"], [300, "", "", ""], [350, "Dream Machine", "Kimberly", ""], [400, "", "", "Airstream"]], "applied_clues": ["2", "1"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", "Airstream"]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", "Mack truck"], [300, "", "", ""], [350, "Dream Machine", "Kimberly", ""], [400, "", "", "Airstream"]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", "Mack truck"], [300, "Books-4-U", "", ""], [350, "Dream Machine", "Kimberly", ""], [400, "Ready Reader", "", "Airstream"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "MVP Events prides itself on planning large-scale parties for 50 or more people, anywhere in the United States. This month the company has several different events to plan. Using only the clues below, match the people to the options from planners, events, and locations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "people : 50, 75, 100, 125.\nplanners : Bridget, Clarence, Herbert, Oliver.\nevents : anniversary, graduation, retreat, symposium.\nlocations : Connecticut, Delaware, Georgia, Wyoming.", "clues": {"1": {"text": "The event in Connecticut will involve 25 more people than the symposium job.", "conditions": "(T[r('Connecticut')][c('people')] == T[r('symposium')][c('people')] + 25)"}, "2": {"text": "The assignment in Delaware will involve 25 more people than Oliver's job.", "conditions": "(T[r('Delaware')][c('people')] == T[r('Oliver')][c('people')] + 25)"}, "3": {"text": "Bridget's job won't be in Wyoming.", "conditions": "(T[r('Bridget')][c('locations')] != 'Wyoming')"}, "4": {"text": "Of the event in Wyoming and Clarence's event, one will have 125 attendees and the other is the graduation.", "conditions": "((T[r('Wyoming')][c('people')] == 125 and T[r('Clarence')][c('events')] == 'graduation') or (T[r('Wyoming')][c('events')] == 'graduation' and T[r('Clarence')][c('people')] == 125)) and (T[r('graduation')][c('people')] != 125) and (T[r('Clarence')][c('locations')] != 'Wyoming')"}, "5": {"text": "The retreat assignment will involve somewhat more people than the event in Connecticut.", "conditions": "(T[r('retreat')][c('people')] > T[r('Connecticut')][c('people')])"}, "6": {"text": "Oliver's job is either the event in Georgia or the symposium assignment.", "conditions": "(T[r('Oliver')][c('locations')] == 'Georgia' or T[r('Oliver')][c('events')] == 'symposium') and (T[r('Georgia')][c('events')] != 'symposium')"}}, "initial": [["people", "planners", "events", "locations"], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""], [125, "", "", ""]], "current": [["people", "planners", "events", "locations"], [50, "", "", ""], [75, "Clarence", "graduation", ""], [100, "", "", ""], [125, "", "", "Wyoming"]], "applied_clues": ["4"], "initial_to_current": [[["people", "planners", "events", "locations"], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""], [125, "", "", ""]], [["people", "planners", "events", "locations"], [50, "", "", ""], [75, "Clarence", "graduation", ""], [100, "", "", ""], [125, "", "", "Wyoming"]]], "unsolvable_child": [["people", "planners", "events", "locations"], [50, "", "symposium", ""], [75, "Clarence", "graduation", "Connecticut"], [100, "", "", ""], [125, "", "", "Wyoming"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["people", "planners", "events", "locations"], [50, "Oliver", "anniversary", "Georgia"], [75, "Bridget", "symposium", "Delaware"], [100, "Clarence", "graduation", "Connecticut"], [125, "Herbert", "retreat", "Wyoming"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "applied_clues": ["1", "12", "3", "9"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "Olga", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", "Honduras"], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3", "5"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", "Worthington"], [69, "", "gray", ""]], "applied_clues": ["1", "3", "8", "7"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "Felix", "", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", "Worthington"], [69, "", "gray", ""]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", "Yorktown"], [55, "Felix", "black", "Oakland Acres"], [62, "", "", "Worthington"], [69, "", "gray", "Mount Union"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "Paradise", "soy"], ["June 6th", "", "", "alfalfa"], ["June 7th", "", "", ""]], "applied_clues": ["5", "4"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "Paradise", "soy"], ["June 6th", "", "", "alfalfa"], ["June 7th", "", "", ""]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "Paradise", "soy"], ["June 6th", "", "", "alfalfa"], ["June 7th", "Meadowgrove", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "Daryl", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "Orlando", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Daryl", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "Orlando", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Daryl", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "Orlando", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "Liberty", ""], [8, "Yvonne", "", ""]], "applied_clues": ["2", "10", "4"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "Liberty", ""], [8, "Yvonne", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "Escape", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "Liberty", ""], [8, "Yvonne", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Piper Hills Academy recently installed a high-speed 3-D printer in its technology lab, and several students were given an opportunity this week to use it in order to print items of their own design. Using only the clues below, match the times to the options from students, items, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 10, 15, 20, 25, 30, 35.\nstudents : Adrienne, Bertha, Eleanor, Felicia, Irma, Willis.\nitems : cup, flower, mask, phone case, skull, whistle.\ncolors : green, orange, purple, red, white, yellow.", "clues": {"1": {"text": "The skull took 5 more minutes to print than Bertha's piece.", "conditions": "(T[r('skull')][c('times')] == 5 + T[r('Bertha')][c('times')])"}, "2": {"text": "Of the red piece and the item that printed in 20 minutes, one was the mask and the other was Felicia's.", "conditions": "(((T[r('red')][c('items')] == 'mask' and T[r(20)][c('students')] == 'Felicia') or (T[r('red')][c('students')] == 'Felicia' and T[r(20)][c('items')] == 'mask'))) and (T[r(20)][c('colors')] != 'red') and (T[r('Felicia')][c('items')] != 'mask')"}, "3": {"text": "Willis's item wasn't the skull.", "conditions": "(T[r('Willis')][c('items')] != 'skull')"}, "4": {"text": "The item that printed in 25 minutes wasn't the phone case.", "conditions": "(T[r(25)][c('items')] != 'phone case')"}, "5": {"text": "Adrienne's piece was either the piece that printed in 10 minutes or the red item.", "conditions": "(T[r('Adrienne')][c('times')] == 10 or T[r('Adrienne')][c('colors')] == 'red') and (T[r(10)][c('colors')] != 'red')"}, "6": {"text": "Of the item that printed in 30 minutes and the item that printed in 20 minutes, one was Irma's and the other was the skull.", "conditions": "(((T[r(30)][c('students')] == 'Irma' and T[r(20)][c('items')] == 'skull') or (T[r(30)][c('items')] == 'skull' and T[r(20)][c('students')] == 'Irma'))) and (T[r('Irma')][c('items')] != 'skull')"}, "7": {"text": "Bertha's piece took 10 more minutes to print than the flower.", "conditions": "(T[r('Bertha')][c('times')] == 10 + T[r('flower')][c('times')])"}, "8": {"text": "The yellow design wasn't the phone case.", "conditions": "(T[r('yellow')][c('items')] != 'phone case')"}, "9": {"text": "Of the flower and the white design, one took 15 minutes to print and the other took 10 minutes to print.", "conditions": "(((T[r('flower')][c('times')] == 15 and T[r('white')][c('times')] == 10) or (T[r('flower')][c('times')] == 10 and T[r('white')][c('times')] == 15))) and (T[r('flower')][c('colors')] != 'white')"}, "10": {"text": "The cup required somewhat fewer minutes to print than Felicia's design.", "conditions": "(T[r('cup')][c('times')] < T[r('Felicia')][c('times')])"}, "11": {"text": "Felicia's design required 15 fewer minutes to print than the green item.", "conditions": "(T[r('Felicia')][c('times')] == T[r('green')][c('times')] - 15)"}, "12": {"text": "The orange design, the flower, Irma's item and the item that printed in 35 minutes were all different items.", "conditions": "(T[r('orange')][c('items')] != 'flower') and (T[r('orange')][c('students')] != 'Irma') and (T[r('orange')][c('times')] != 35) and (T[r('flower')][c('students')] != 'Irma') and (T[r('flower')][c('times')] != 35) and (T[r('Irma')][c('times')] != 35)"}}, "initial": [["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "current": [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "mask", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "Felicia", "", "red"]], "applied_clues": ["9", "6", "2"], "initial_to_current": [[["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "mask", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "Felicia", "", "red"]]], "unsolvable_child": [["times", "students", "items", "colors"], [10, "Adrienne", "flower", ""], [15, "", "", "white"], [20, "Irma", "mask", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "Felicia", "", "red"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["times", "students", "items", "colors"], [10, "Adrienne", "cup", "white"], [15, "Felicia", "flower", "red"], [20, "Irma", "mask", "yellow"], [25, "Bertha", "whistle", "orange"], [30, "Eleanor", "skull", "green"], [35, "Willis", "phone case", "purple"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "Lonnie", "black widow", ""]], "applied_clues": ["1", "12", "3"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "Lonnie", "black widow", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "Lonnie", "black widow", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "Lonnie", "black widow", ""]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "Leigh", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "Deanna", "", "Elk Grove"], [700, "", "", "Fort Kent"]], "applied_clues": ["3", "10", "11", "2"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", 4, ""], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, ""], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "Leigh", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "Deanna", "", "Elk Grove"], [700, "", "", "Fort Kent"]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, ""], [380, "", "", "Ontario"], [460, "Leigh", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "Deanna", "", "Elk Grove"], [700, "", "", "Fort Kent"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Norfolk Times recently sponsored a \"Sail Around the World\" race that pitted dozens of sailors against each other to see who could circumnavigate the globe, solo, in the fewest number of days. Using only the clues below, match the days to the options from sailors and boat types. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 270, 274, 278, 282.\nsailors : Ed Alexander, Tara Carroll, Vicky Estes, Wendell Orr.\nboat types : gaff cutter, pilot cutter, schooner, sloop.", "clues": {"1": {"text": "Wendell Orr was either the sailor who finished in 270 days or the person in the gaff cutter.", "conditions": "(T[r('Wendell Orr')][c('days')] == 270 or T[r('Wendell Orr')][c('boat types')] == 'gaff cutter') and (T[r('gaff cutter')][c('days')] != 270)"}, "2": {"text": "Of Vicky Estes and the competitor in the sloop, one finished in 270 days and the other finished in 278 days.", "conditions": "((T[r('Vicky Estes')][c('days')] == 270 and T[r('sloop')][c('days')] == 278) or (T[r('Vicky Estes')][c('days')] == 278 and T[r('sloop')][c('days')] == 270)) and (T[r('sloop')][c('sailors')] != 'Vicky Estes')"}, "3": {"text": "Tara Carroll took 4 more days to finish than Ed Alexander.", "conditions": "(T[r('Tara Carroll')][c('days')] == T[r('Ed Alexander')][c('days')] + 4)"}, "4": {"text": "The sailor in the pilot cutter took 4 fewer days to finish than Ed Alexander.", "conditions": "(T[r('pilot cutter')][c('days')] == T[r('Ed Alexander')][c('days')] - 4)"}}, "initial": [["days", "sailors", "boat types"], [270, "", ""], [274, "", ""], [278, "", ""], [282, "", ""]], "current": [["days", "sailors", "boat types"], [270, "", "sloop"], [274, "", ""], [278, "Vicky Estes", ""], [282, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["days", "sailors", "boat types"], [270, "", ""], [274, "", ""], [278, "", ""], [282, "", ""]], [["days", "sailors", "boat types"], [270, "", "sloop"], [274, "", ""], [278, "Vicky Estes", ""], [282, "", ""]]], "unsolvable_child": [["days", "sailors", "boat types"], [270, "Wendell Orr", "sloop"], [274, "", "gaff cutter"], [278, "Vicky Estes", ""], [282, "", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["days", "sailors", "boat types"], [270, "Vicky Estes", "pilot cutter"], [274, "Ed Alexander", "schooner"], [278, "Tara Carroll", "sloop"], [282, "Wendell Orr", "gaff cutter"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the nominations to the options from movies, directors, and genres. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "nominations : 2, 3, 4, 5.\nmovies : Silk Mist, The Illusion, Thorn of Suns, Wild Ones.\ndirectors : Danny Trevor, Gabby Jones, Tank Reznor, Virgil Katz.\ngenres : comedy, drama, romance, thriller.", "clues": {"1": {"text": "The thriller is either the movie that received 4 nominations or Wild Ones.", "conditions": "(T[r('thriller')][c('nominations')] == 4 or T[r('thriller')][c('movies')] == 'Wild Ones') and (T[r(4)][c('movies')] != 'Wild Ones')"}, "2": {"text": "The film directed by Virgil Katz received one more nomination than the film directed by Danny Trevor.", "conditions": "(T[r('Virgil Katz')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] + 1)"}, "3": {"text": "The movie directed by Gabby Jones is either the film that received 4 nominations or Thorn of Suns.", "conditions": "(T[r('Gabby Jones')][c('nominations')] == 4 or T[r('Gabby Jones')][c('movies')] == 'Thorn of Suns') and (T[r(4)][c('movies')] != 'Thorn of Suns')"}, "4": {"text": "The comedy was directed by Tank Reznor.", "conditions": "(T[r('comedy')][c('directors')] == 'Tank Reznor')"}, "5": {"text": "Wild Ones received one fewer nomination than the movie directed by Danny Trevor.", "conditions": "(T[r('Wild Ones')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] - 1)"}, "6": {"text": "Silk Mist was the drama.", "conditions": "(T[r('Silk Mist')][c('genres')] == 'drama')"}, "7": {"text": "The romance received more nominations than the movie directed by Tank Reznor.", "conditions": "(T[r('romance')][c('nominations')] > T[r('Tank Reznor')][c('nominations')])"}}, "initial": [["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "Thorn of Suns", "", ""], [4, "", "Gabby Jones", "thriller"], [5, "", "", ""]], "applied_clues": ["1", "3"], "initial_to_current": [[["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "", "", ""], [4, "", "", "thriller"], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "Thorn of Suns", "", ""], [4, "", "Gabby Jones", "thriller"], [5, "", "", ""]]], "unsolvable_child": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "Thorn of Suns", "Danny Trevor", ""], [4, "", "Gabby Jones", "thriller"], [5, "", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "comedy"], [3, "Silk Mist", "Danny Trevor", "drama"], [4, "The Illusion", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", "romance"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "\"Parties Unlimited\" caters to a wide variety of special requests (such as clowns or magicians) for its clients. Using only the clues below, match the days to the options from requests and families. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 3, 4, 5, 6, 7.\nrequests : clown, petting zoo, photo booth, rock band, superhero.\nfamilies : Benton, Hayden, Ingram, Stanley, Zimmerman.", "clues": {"1": {"text": "The party on October 5 is for the Ingrams.", "conditions": "(T[r(5)][c('families')] == 'Ingram')"}, "2": {"text": "The booking that requested the clown is sometime after the Ingram family booking.", "conditions": "(T[r('clown')][c('days')] > T[r('Ingram')][c('days')])"}, "3": {"text": "The booking on October 4 is either the party that requested the petting zoo or the Hayden family booking.", "conditions": "(T[r(4)][c('requests')] == 'petting zoo' or T[r(4)][c('families')] == 'Hayden') and (T[r('Hayden')][c('requests')] != 'petting zoo')"}, "4": {"text": "The five events are the booking on October 7, the party that requested the rock band, the event that requested the superhero, the Ingram family party and the Benton family party.", "conditions": "(T[r('rock band')][c('days')] != 7) and (T[r('superhero')][c('days')] != 7) and (T[r('Ingram')][c('days')] != 7) and (T[r('Benton')][c('days')] != 7) and (T[r('rock band')][c('families')] != 'Ingram') and (T[r('rock band')][c('families')] != 'Benton') and (T[r('superhero')][c('families')] != 'Ingram') and (T[r('superhero')][c('families')] != 'Benton')"}, "5": {"text": "The booking that requested the photo booth is either the event on October 6 or the event on October 3.", "conditions": "(T[r('photo booth')][c('days')] == 6 or T[r('photo booth')][c('days')] == 3)"}, "6": {"text": "The Ingram family booking is 1 day before the booking that requested the superhero.", "conditions": "(T[r('Ingram')][c('days')] == T[r('superhero')][c('days')] - 1)"}, "7": {"text": "The party that requested the superhero is for the Zimmermans.", "conditions": "(T[r('superhero')][c('families')] == 'Zimmerman')"}}, "initial": [["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", "Ingram"], [6, "", ""], [7, "", "Hayden"]], "applied_clues": ["5", "3", "1"], "initial_to_current": [[["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", ""], [6, "", ""], [7, "", "Hayden"]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", "Ingram"], [6, "", ""], [7, "", "Hayden"]]], "unsolvable_child": [["days", "requests", "families"], [3, "photo booth", "Benton"], [4, "petting zoo", ""], [5, "", "Ingram"], [6, "rock band", ""], [7, "", "Hayden"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["days", "requests", "families"], [3, "photo booth", "Benton"], [4, "rock band", "Hayden"], [5, "petting zoo", "Ingram"], [6, "superhero", "Zimmerman"], [7, "clown", "Stanley"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Nicholas and Edith are having a small dinner party this evening at their home in Cedar Valley, and they've decided to open a select number of rare wines from their personal collection to celebrate the occasion. Using only the clues below, match the vintages to the options from wines and types. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "vintages : 1984, 1988, 1992, 1996.\nwines : Annata Branco, Bianca Flaux, Ece Suss, Vendemmia.\ntypes : gewurztraminer, merlot, pinot noir, riesling.", "clues": {"1": {"text": "The Ece Suss was bottled sometime after the Annata Branco.", "conditions": "(T[r('Ece Suss')][c('vintages')] > T[r('Annata Branco')][c('vintages')])"}, "2": {"text": "The Bianca Flaux was bottled 4 years before the Vendemmia.", "conditions": "(T[r('Vendemmia')][c('vintages')] - T[r('Bianca Flaux')][c('vintages')] == 4)"}, "3": {"text": "The 1988 bottle is a pinot noir.", "conditions": "(T[r(1988)][c('types')] == 'pinot noir')"}, "4": {"text": "The merlot is either the Annata Branco or the Bianca Flaux.", "conditions": "(T[r('merlot')][c('wines')] == 'Annata Branco' or T[r('merlot')][c('wines')] == 'Bianca Flaux')"}, "5": {"text": "The Bianca Flaux was bottled sometime after the Ece Suss.", "conditions": "(T[r('Bianca Flaux')][c('vintages')] > T[r('Ece Suss')][c('vintages')])"}, "6": {"text": "The 1984 bottle is a gewurztraminer.", "conditions": "(T[r(1984)][c('types')] == 'gewurztraminer')"}}, "initial": [["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], "current": [["vintages", "wines", "types"], [1984, "", ""], [1988, "Bianca Flaux", "merlot"], [1992, "Vendemmia", ""], [1996, "Annata Branco", ""]], "applied_clues": ["2", "4"], "initial_to_current": [[["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], [["vintages", "wines", "types"], [1984, "", ""], [1988, "Bianca Flaux", ""], [1992, "Vendemmia", ""], [1996, "", ""]], [["vintages", "wines", "types"], [1984, "", ""], [1988, "Bianca Flaux", "merlot"], [1992, "Vendemmia", ""], [1996, "Annata Branco", ""]]], "unsolvable_child": [["vintages", "wines", "types"], [1984, "Ece Suss", ""], [1988, "Bianca Flaux", "merlot"], [1992, "Vendemmia", ""], [1996, "Annata Branco", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["vintages", "wines", "types"], [1984, "Annata Branco", "gewurztraminer"], [1988, "Ece Suss", "pinot noir"], [1992, "Bianca Flaux", "merlot"], [1996, "Vendemmia", "riesling"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", "Hank Hensley"], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5", "8", "4"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", "Hank Hensley"], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Yvette", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Dale Durham"], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", "Hank Hensley"], [29, "Sherrie", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1", "3", "7"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Lena", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", ""], [100, "", "SVZ-880", ""]], "applied_clues": ["4", "3", "7", "6"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "BMG-831", ""], [75, "Injitsu", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", ""], [100, "", "SVZ-880", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "YGA-441", "Kansas"], [50, "Etsalle", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", ""], [100, "", "SVZ-880", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "BMG-831", ""], [75, "Injitsu", "MRT-628", "Kansas"], [100, "Etsalle", "", ""]], "applied_clues": ["4", "3", "7"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", "Kansas"], [100, "Etsalle", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "BMG-831", ""], [75, "Injitsu", "MRT-628", "Kansas"], [100, "Etsalle", "", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", "Kansas"], [100, "Etsalle", "SVZ-880", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners and butterflies. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 45, 60, 75, 90.\nwinners : Otis, Phillip, Walter, Yvette.\nbutterflies : atlas, grayling, peacock, swallowtail.", "clues": {"1": {"text": "Yvette's purchase was either the insect that sold for $45 or the peacock butterfly.", "conditions": "(T[r('Yvette')][c('butterflies')] == 'peacock' or T[r('Yvette')][c('prices')] == 45) and (T[r('peacock')][c('prices')] != 45)"}, "2": {"text": "The swallowtail butterfly cost 15 dollars more than Phillip's purchase.", "conditions": "(T[r('swallowtail')][c('prices')] == T[r('Phillip')][c('prices')] + 15)"}, "3": {"text": "The atlas butterfly cost more than the peacock butterfly.", "conditions": "(T[r('atlas')][c('prices')] > T[r('peacock')][c('prices')])"}, "4": {"text": "The four butterflies were the butterfly that sold for $90, the grayling butterfly, Yvette's purchase and Walter's purchase.", "conditions": "(T[r(90)][c('butterflies')]!='grayling') and (T[r(90)][c('winners')]!='Yvette') and (T[r(90)][c('winners')]!='Walter') and (T[r('grayling')][c('winners')]!='Yvette') and (T[r('grayling')][c('winners')]!='Walter')"}}, "initial": [["prices", "winners", "butterflies"], [45, "", ""], [60, "", ""], [75, "", ""], [90, "", ""]], "current": [["prices", "winners", "butterflies"], [45, "Yvette", ""], [60, "", ""], [75, "", "peacock"], [90, "", ""]], "applied_clues": ["1"], "initial_to_current": [[["prices", "winners", "butterflies"], [45, "", ""], [60, "", ""], [75, "", ""], [90, "", ""]], [["prices", "winners", "butterflies"], [45, "Yvette", ""], [60, "", ""], [75, "", "peacock"], [90, "", ""]]], "unsolvable_child": [["prices", "winners", "butterflies"], [45, "Yvette", ""], [60, "", ""], [75, "Phillip", "peacock"], [90, "", "swallowtail"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "butterflies"], [45, "Phillip", "grayling"], [60, "Walter", "swallowtail"], [75, "Yvette", "peacock"], [90, "Otis", "atlas"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lorena's Specialty Cakes has a number of different orders to fulfill this week. Using only the clues below, match the delivery dates to the options from customers, cake shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "delivery dates : 5, 6, 7, 8, 9.\ncustomers : Danielson, Harper, Keller, Lowe, Nolan.\ncake shapes : biplane, rocket ship, sailboat, sports car, turtle.\nflavors : banana, coconut, lemon, raspberry, strawberry.", "clues": {"1": {"text": "The lemon cake will be delivered 3 days after the raspberry cake.", "conditions": "(T[r('lemon')][c('delivery dates')] - T[r('raspberry')][c('delivery dates')] == 3)"}, "2": {"text": "Mrs. Nolan's cake will be delivered 1 day before the cake shaped like a sports car.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 1 == T[r('sports car')][c('delivery dates')])"}, "3": {"text": "Mrs. Danielson's order won't be delivered on October 6.", "conditions": "(T[r('Danielson')][c('delivery dates')] != 6)"}, "4": {"text": "The October 8 delivery will be in the shape of a biplane.", "conditions": "(T[r(8)][c('cake shapes')] == 'biplane')"}, "5": {"text": "Neither Mrs. Harper's order nor the strawberry cake is the October 6 delivery.", "conditions": "(T[r('Harper')][c('delivery dates')] != 6 and T[r('strawberry')][c('delivery dates')] != 6) and (T[r('Harper')][c('flavors')] != 'strawberry')"}, "6": {"text": "Mrs. Nolan's cake will be delivered 2 days before the strawberry cake.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 2 == T[r('strawberry')][c('delivery dates')])"}, "7": {"text": "The cake shaped like a rocket ship will be delivered 1 day before the coconut cake.", "conditions": "(T[r('rocket ship')][c('delivery dates')] + 1 == T[r('coconut')][c('delivery dates')])"}, "8": {"text": "Mrs. Harper's order won't be shaped like a biplane.", "conditions": "(T[r('Harper')][c('cake shapes')] != 'biplane')"}, "9": {"text": "Mrs. Keller's order won't be shaped like a sports car.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sports car')"}, "10": {"text": "The order shaped like a sailboat will be delivered 2 days after the raspberry cake.", "conditions": "(T[r('sailboat')][c('delivery dates')] == T[r('raspberry')][c('delivery dates')] + 2)"}, "11": {"text": "Mrs. Keller's cake won't be shaped like a sailboat.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sailboat')"}}, "initial": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], "current": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "Danielson", "", ""]], "applied_clues": ["1", "10", "6", "2", "5", "3"], "initial_to_current": [[["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "Danielson", "", ""]]], "unsolvable_child": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "", "sports car", "coconut"], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "Danielson", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "Lowe", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Keller", "biplane", "lemon"], [9, "Harper", "turtle", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", ""]], "applied_clues": ["4", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "GXTV", "", "real estate"]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "GXTV", "", "real estate"]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", "telecom"], [30, "GXTV", "", "real estate"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], "applied_clues": ["1", "12"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 25, 26, 27, 28, 29.\nstock symbols : ABTR, HBW, JMO, KMPP, PSTO.\nclients : Abigail, Charlie, Edith, Francine, Heathcliff.\nsectors : energy, financial, technology, telecom, utilities.", "clues": {"1": {"text": "Of the stock that sold for $28 per share and PSTO, one was in the technology sector and the other was bought by Abigail.", "conditions": "((T[r(28)][c('sectors')] == 'technology' and T[r('PSTO')][c('clients')] == 'Abigail') or (T[r('PSTO')][c('sectors')] == 'technology' and T[r(28)][c('clients')] == 'Abigail')) and (T[r(28)][c('stock symbols')] != 'PSTO') and (T[r('technology')][c('clients')] != 'Abigail')"}, "2": {"text": "Of the telecom stock and the stock that sold for $27 per share, one was KMPP and the other was bought by Charlie.", "conditions": "((T[r('telecom')][c('stock symbols')] == 'KMPP' and T[r(27)][c('clients')] == 'Charlie') or (T[r(27)][c('stock symbols')] == 'KMPP' and T[r('telecom')][c('clients')] == 'Charlie')) and (T[r('telecom')][c('prices')] != 27) and (T[r('KMPP')][c('clients')] != 'Charlie')"}, "3": {"text": "The stock Edith bought was per share more expensive than the technology stock.", "conditions": "(T[r('Edith')][c('prices')] > T[r('technology')][c('prices')])"}, "4": {"text": "The five stocks were JMO, the stock that sold for $25 per share, the energy stock, the utilities stock and the financial stock.", "conditions": "(T[r(25)][c('stock symbols')] != 'JMO') and (T[r('energy')][c('stock symbols')] != 'JMO') and (T[r('utilities')][c('stock symbols')] != 'JMO') and (T[r('financial')][c('stock symbols')] != 'JMO') and (T[r('energy')][c('prices')] != 25) and (T[r('utilities')][c('prices')] != 25) and (T[r('financial')][c('prices')] != 25)"}, "5": {"text": "Of the financial stock and the stock Charlie bought, one was PSTO and the other sold for $25 per share.", "conditions": "((T[r('financial')][c('stock symbols')] == 'PSTO' and T[r('Charlie')][c('prices')] == 25) or (T[r('Charlie')][c('stock symbols')] == 'PSTO' and T[r('financial')][c('prices')] == 25)) and (T[r('financial')][c('clients')] != 'Charlie') and (T[r('PSTO')][c('prices')] != 25)"}, "6": {"text": "JMO was either the stock Edith bought or the stock Francine bought.", "conditions": "(T[r('JMO')][c('clients')] == 'Edith' or T[r('JMO')][c('clients')] == 'Francine')"}, "7": {"text": "The utilities stock was 2 dollars per share more expensive than HBW.", "conditions": "(T[r('utilities')][c('prices')] == T[r('HBW')][c('prices')] + 2)"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "JMO", "Francine", "technology"], [29, "", "Edith", ""]], "applied_clues": ["2", "5", "1", "4", "6"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "", "", ""], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "", "financial"], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", ""], [28, "", "", "technology"], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "JMO", "", "technology"], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "JMO", "Francine", "technology"], [29, "", "Edith", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "energy"], [28, "JMO", "Francine", "technology"], [29, "", "Edith", "utilities"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "HBW", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "utilities"], [28, "JMO", "Francine", "technology"], [29, "ABTR", "Edith", "energy"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, "Ontario"], [380, "Gretchen", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]], "applied_clues": ["3", "10"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, "Ontario"], [380, "Gretchen", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, "Ontario"], [380, "Gretchen", "", ""], [460, "Wanda", "", "Pacific Grove"], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], "applied_clues": ["1", "12", "3"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], "applied_clues": ["4", "2", "1"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 25, 26, 27, 28, 29.\nstock symbols : ABTR, HBW, JMO, KMPP, PSTO.\nclients : Abigail, Charlie, Edith, Francine, Heathcliff.\nsectors : energy, financial, technology, telecom, utilities.", "clues": {"1": {"text": "Of the stock that sold for $28 per share and PSTO, one was in the technology sector and the other was bought by Abigail.", "conditions": "((T[r(28)][c('sectors')] == 'technology' and T[r('PSTO')][c('clients')] == 'Abigail') or (T[r('PSTO')][c('sectors')] == 'technology' and T[r(28)][c('clients')] == 'Abigail')) and (T[r(28)][c('stock symbols')] != 'PSTO') and (T[r('technology')][c('clients')] != 'Abigail')"}, "2": {"text": "Of the telecom stock and the stock that sold for $27 per share, one was KMPP and the other was bought by Charlie.", "conditions": "((T[r('telecom')][c('stock symbols')] == 'KMPP' and T[r(27)][c('clients')] == 'Charlie') or (T[r(27)][c('stock symbols')] == 'KMPP' and T[r('telecom')][c('clients')] == 'Charlie')) and (T[r('telecom')][c('prices')] != 27) and (T[r('KMPP')][c('clients')] != 'Charlie')"}, "3": {"text": "The stock Edith bought was per share more expensive than the technology stock.", "conditions": "(T[r('Edith')][c('prices')] > T[r('technology')][c('prices')])"}, "4": {"text": "The five stocks were JMO, the stock that sold for $25 per share, the energy stock, the utilities stock and the financial stock.", "conditions": "(T[r(25)][c('stock symbols')] != 'JMO') and (T[r('energy')][c('stock symbols')] != 'JMO') and (T[r('utilities')][c('stock symbols')] != 'JMO') and (T[r('financial')][c('stock symbols')] != 'JMO') and (T[r('energy')][c('prices')] != 25) and (T[r('utilities')][c('prices')] != 25) and (T[r('financial')][c('prices')] != 25)"}, "5": {"text": "Of the financial stock and the stock Charlie bought, one was PSTO and the other sold for $25 per share.", "conditions": "((T[r('financial')][c('stock symbols')] == 'PSTO' and T[r('Charlie')][c('prices')] == 25) or (T[r('Charlie')][c('stock symbols')] == 'PSTO' and T[r('financial')][c('prices')] == 25)) and (T[r('financial')][c('clients')] != 'Charlie') and (T[r('PSTO')][c('prices')] != 25)"}, "6": {"text": "JMO was either the stock Edith bought or the stock Francine bought.", "conditions": "(T[r('JMO')][c('clients')] == 'Edith' or T[r('JMO')][c('clients')] == 'Francine')"}, "7": {"text": "The utilities stock was 2 dollars per share more expensive than HBW.", "conditions": "(T[r('utilities')][c('prices')] == T[r('HBW')][c('prices')] + 2)"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "", "", "technology"], [29, "JMO", "", ""]], "applied_clues": ["2", "5", "1", "4"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "", "", ""], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "", "financial"], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", ""], [28, "", "", "technology"], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "", "", "technology"], [29, "JMO", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Edith", "energy"], [28, "", "Heathcliff", "technology"], [29, "JMO", "Francine", "utilities"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "HBW", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "utilities"], [28, "JMO", "Francine", "technology"], [29, "ABTR", "Edith", "energy"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "baseball", ""], [39, "", "", "garbage man"]], "applied_clues": ["3", "12", "8", "6"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "baseball", ""], [39, "", "", "garbage man"]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "baseball", ""], [39, "", "", "garbage man"]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "Sergio", "baseball", ""], [39, "", "", "garbage man"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "90 million", "New Zealand"]], "applied_clues": ["6", "2", "11", "3", "4"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "90 million", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "90 million", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "90 million", "New Zealand"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "Nick", "", ""], [3, "", "", ""], [4, "Melissa", "", "Selma"], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]], "applied_clues": ["7", "10", "6", "8"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "Nick", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "Nick", "", ""], [3, "", "", ""], [4, "Melissa", "", "Selma"], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "Nick", "", ""], [3, "", "", ""], [4, "Melissa", "", "Selma"], [5, "", "flashlights", "Nice"], [6, "", "chainsaws", "Menlo"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "YGA-441", "Kansas"], [50, "Etsalle", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", ""], [100, "", "SVZ-880", ""]], "applied_clues": ["4", "3", "7", "6", "2"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "BMG-831", ""], [75, "Injitsu", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", ""], [100, "", "SVZ-880", ""]], [["fines", "cars", "license plates", "states"], [25, "Cavalo", "YGA-441", "Kansas"], [50, "Etsalle", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", ""], [100, "", "SVZ-880", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "YGA-441", "Kansas"], [50, "Etsalle", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", "Mississippi"], [100, "Dartson", "SVZ-880", "Tennessee"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "Meadowgrove", "Paradise", ""], ["June 7th", "", "", "alfalfa"]], "applied_clues": ["5", "4", "6"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "Paradise", ""], ["June 7th", "", "", "alfalfa"]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "Meadowgrove", "Paradise", ""], ["June 7th", "", "", "alfalfa"]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", "potatoes"], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "Meadowgrove", "Paradise", "beets"], ["June 7th", "", "", "alfalfa"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", ""], [11, "", "Green Swamp"], [12, "", ""]], "applied_clues": ["1", "5", "7", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", "Green Swamp"], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", ""], [11, "", "Green Swamp"], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", ""], [11, "", "Green Swamp"], [12, "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Springfield County Bird Club met today, and several of its members brought their newest acquisitions. Using only the clues below, match the months to the options from names and birds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nnames : Bonita, Joan, Laura, Roberta, Velma.\nbirds : finch, lorikeet, lovebird, macaw, parakeet.", "clues": {"1": {"text": "Velma's pet isn't the lovebird.", "conditions": "(T[r('Velma')][c('birds')] != 'lovebird')"}, "2": {"text": "Of the finch and the macaw, one was bought in January and the other is Laura's.", "conditions": "((T[r('finch')][c('months')] == 1 and T[r('macaw')][c('names')] == 'Laura') or (T[r('macaw')][c('months')] == 1 and T[r('finch')][c('names')] == 'Laura')) and (T[r(1)][c('names')] != 'Laura')"}, "3": {"text": "The bird bought in March is either Bonita's pet or the finch.", "conditions": "(T[r(3)][c('names')] == 'Bonita' or T[r(3)][c('birds')] == 'finch') and (T[r('Bonita')][c('birds')] != 'finch')"}, "4": {"text": "Joan's pet was bought 3 months before the lorikeet.", "conditions": "(T[r('Joan')][c('months')] + 3 == T[r('lorikeet')][c('months')])"}, "5": {"text": "The finch was bought sometime after Roberta's pet.", "conditions": "(T[r('finch')][c('months')] > T[r('Roberta')][c('months')])"}, "6": {"text": "Bonita's pet was bought in May.", "conditions": "(T[r('Bonita')][c('months')] == 5)"}, "7": {"text": "The macaw was bought 1 month before the parakeet.", "conditions": "(T[r('macaw')][c('months')] + 1 == T[r('parakeet')][c('months')])"}}, "initial": [["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], "current": [["months", "names", "birds"], [1, "", "finch"], [2, "", ""], [3, "Laura", "macaw"], [4, "", ""], [5, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "finch"], [2, "", ""], [3, "Laura", "macaw"], [4, "", ""], [5, "", ""]]], "unsolvable_child": [["months", "names", "birds"], [1, "", "finch"], [2, "", ""], [3, "Laura", "macaw"], [4, "", "parakeet"], [5, "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Roberta", "parakeet"], [3, "Laura", "finch"], [4, "Velma", "lorikeet"], [5, "Bonita", "lovebird"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "applied_clues": ["5", "2"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "Zachary", "", ""], [225, "", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], "applied_clues": ["3"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], "clue_applied_to_unsolvable_child": "12"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "GXTV", "Heathcliff", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "GXTV", "Heathcliff", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "GXTV", "Heathcliff", "telecom"], [29, "JMO", "", "real estate"], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", "waiter"], [11, "Vernon", "golf", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]], "applied_clues": ["3", "12", "8", "6", "4", "7", "5", "9"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", "waiter"], [11, "Vernon", "golf", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", "waiter"], [11, "Vernon", "golf", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "Harvey", "", ""]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], "applied_clues": ["4", "8", "1", "2"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "WB-664", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "Delia", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Omar", "AV-435", ""], [5, "Christian", "GX-13", ""]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "Liberty", ""], [8, "Yvonne", "", ""]], "applied_clues": ["2", "10", "4"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "Liberty", ""], [8, "Yvonne", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "", "Liberty", ""], [8, "Yvonne", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]], "applied_clues": ["4", "6", "3"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]], [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "Esther", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers and trainers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 8, 9, 10, 11, 12.\ncustomers : Arnold, Blake, Danny, Emma, Garrett.\ntrainers : Howard, Irene, Jimmy, Kristin, Nicholas.", "clues": {"1": {"text": "Danny's appointment is 1 hour before the appointment with Irene.", "conditions": "(T[r('Danny')][c('times')] == T[r('Irene')][c('times')] - 1)"}, "2": {"text": "Of the lesson with Irene and the session at 11am, one is Emma's and the other is Blake's.", "conditions": "(T[r('Emma')][c('trainers')] == 'Irene' and T[r('Blake')][c('times')] == 11 or T[r('Blake')][c('trainers')] == 'Irene' and T[r('Emma')][c('times')] == 11) and (T[r('Irene')][c('times')] != 11)"}, "3": {"text": "The lesson at 8 am is either Emma's lesson or the appointment with Jimmy.", "conditions": "(T[r('Emma')][c('times')] == 8 or T[r('Jimmy')][c('times')] == 8) and (T[r('Emma')][c('trainers')] != 'Jimmy')"}, "4": {"text": "The session at 12 am is with Howard.", "conditions": "(T[r(12)][c('trainers')] == 'Howard')"}, "5": {"text": "The appointment at 11 am isn't with Nicholas.", "conditions": "(T[r(11)][c('trainers')] != 'Nicholas')"}, "6": {"text": "Emma's session is 2 hours after Arnold's lesson.", "conditions": "(T[r('Emma')][c('times')] == T[r('Arnold')][c('times')] + 2)"}}, "initial": [["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["times", "customers", "trainers"], [8, "", ""], [9, "Blake", "Irene"], [10, "", ""], [11, "Emma", ""], [12, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["times", "customers", "trainers"], [8, "", ""], [9, "Blake", "Irene"], [10, "", ""], [11, "Emma", ""], [12, "", ""]]], "unsolvable_child": [["times", "customers", "trainers"], [8, "", "Jimmy"], [9, "Blake", "Irene"], [10, "", ""], [11, "Emma", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["times", "customers", "trainers"], [8, "Arnold", "Jimmy"], [9, "Danny", "Nicholas"], [10, "Emma", "Irene"], [11, "Blake", "Kristin"], [12, "Garrett", "Howard"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", "Hank Hensley"], [22, "Ken", "", "Dale Durham"], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5", "8", "4"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "Ken", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", "Hank Hensley"], [22, "Ken", "", "Dale Durham"], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Yvette", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", "Hank Hensley"], [22, "Ken", "", "Dale Durham"], [29, "Sherrie", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", "Green Swamp"], [12, "", ""]], "applied_clues": ["1", "5", "7"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", "Green Swamp"], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", ""], [11, "", "Green Swamp"], [12, "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "Phyllis", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "applied_clues": ["1", "12", "3", "9"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "Phyllis", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Olga", "", "Spain"], [60, "Phyllis", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", "Honduras"], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, "Ontario"], [380, "Gretchen", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "Wanda", "", "Pacific Grove"], [700, "", "", ""]], "applied_clues": ["3", "10", "11"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, "Ontario"], [380, "Gretchen", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, "Ontario"], [380, "Gretchen", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "Wanda", "", "Pacific Grove"], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, "Ontario"], [380, "Gretchen", "", ""], [460, "Leigh", "", ""], [540, "", "", "Elk Grove"], [620, "Wanda", "", "Pacific Grove"], [700, "", "", "Fort Kent"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the nominations to the options from movies, directors, and genres. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "nominations : 2, 3, 4, 5.\nmovies : Silk Mist, The Illusion, Thorn of Suns, Wild Ones.\ndirectors : Danny Trevor, Gabby Jones, Tank Reznor, Virgil Katz.\ngenres : comedy, drama, romance, thriller.", "clues": {"1": {"text": "The thriller is either the movie that received 4 nominations or Wild Ones.", "conditions": "(T[r('thriller')][c('nominations')] == 4 or T[r('thriller')][c('movies')] == 'Wild Ones') and (T[r(4)][c('movies')] != 'Wild Ones')"}, "2": {"text": "The film directed by Virgil Katz received one more nomination than the film directed by Danny Trevor.", "conditions": "(T[r('Virgil Katz')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] + 1)"}, "3": {"text": "The movie directed by Gabby Jones is either the film that received 4 nominations or Thorn of Suns.", "conditions": "(T[r('Gabby Jones')][c('nominations')] == 4 or T[r('Gabby Jones')][c('movies')] == 'Thorn of Suns') and (T[r(4)][c('movies')] != 'Thorn of Suns')"}, "4": {"text": "The comedy was directed by Tank Reznor.", "conditions": "(T[r('comedy')][c('directors')] == 'Tank Reznor')"}, "5": {"text": "Wild Ones received one fewer nomination than the movie directed by Danny Trevor.", "conditions": "(T[r('Wild Ones')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] - 1)"}, "6": {"text": "Silk Mist was the drama.", "conditions": "(T[r('Silk Mist')][c('genres')] == 'drama')"}, "7": {"text": "The romance received more nominations than the movie directed by Tank Reznor.", "conditions": "(T[r('romance')][c('nominations')] > T[r('Tank Reznor')][c('nominations')])"}}, "initial": [["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "Danny Trevor", ""], [4, "", "", ""], [5, "Thorn of Suns", "Gabby Jones", ""]], "applied_clues": ["1", "3", "5"], "initial_to_current": [[["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "", ""], [4, "", "", ""], [5, "Thorn of Suns", "Gabby Jones", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "Danny Trevor", ""], [4, "", "", ""], [5, "Thorn of Suns", "Gabby Jones", ""]]], "unsolvable_child": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "thriller"], [3, "", "Danny Trevor", ""], [4, "", "Virgil Katz", ""], [5, "Thorn of Suns", "Gabby Jones", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "comedy"], [3, "Silk Mist", "Danny Trevor", "drama"], [4, "The Illusion", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", "romance"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Piper Hills Academy recently installed a high-speed 3-D printer in its technology lab, and several students were given an opportunity this week to use it in order to print items of their own design. Using only the clues below, match the times to the options from students, items, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 10, 15, 20, 25, 30, 35.\nstudents : Adrienne, Bertha, Eleanor, Felicia, Irma, Willis.\nitems : cup, flower, mask, phone case, skull, whistle.\ncolors : green, orange, purple, red, white, yellow.", "clues": {"1": {"text": "The skull took 5 more minutes to print than Bertha's piece.", "conditions": "(T[r('skull')][c('times')] == 5 + T[r('Bertha')][c('times')])"}, "2": {"text": "Of the red piece and the item that printed in 20 minutes, one was the mask and the other was Felicia's.", "conditions": "(((T[r('red')][c('items')] == 'mask' and T[r(20)][c('students')] == 'Felicia') or (T[r('red')][c('students')] == 'Felicia' and T[r(20)][c('items')] == 'mask'))) and (T[r(20)][c('colors')] != 'red') and (T[r('Felicia')][c('items')] != 'mask')"}, "3": {"text": "Willis's item wasn't the skull.", "conditions": "(T[r('Willis')][c('items')] != 'skull')"}, "4": {"text": "The item that printed in 25 minutes wasn't the phone case.", "conditions": "(T[r(25)][c('items')] != 'phone case')"}, "5": {"text": "Adrienne's piece was either the piece that printed in 10 minutes or the red item.", "conditions": "(T[r('Adrienne')][c('times')] == 10 or T[r('Adrienne')][c('colors')] == 'red') and (T[r(10)][c('colors')] != 'red')"}, "6": {"text": "Of the item that printed in 30 minutes and the item that printed in 20 minutes, one was Irma's and the other was the skull.", "conditions": "(((T[r(30)][c('students')] == 'Irma' and T[r(20)][c('items')] == 'skull') or (T[r(30)][c('items')] == 'skull' and T[r(20)][c('students')] == 'Irma'))) and (T[r('Irma')][c('items')] != 'skull')"}, "7": {"text": "Bertha's piece took 10 more minutes to print than the flower.", "conditions": "(T[r('Bertha')][c('times')] == 10 + T[r('flower')][c('times')])"}, "8": {"text": "The yellow design wasn't the phone case.", "conditions": "(T[r('yellow')][c('items')] != 'phone case')"}, "9": {"text": "Of the flower and the white design, one took 15 minutes to print and the other took 10 minutes to print.", "conditions": "(((T[r('flower')][c('times')] == 15 and T[r('white')][c('times')] == 10) or (T[r('flower')][c('times')] == 10 and T[r('white')][c('times')] == 15))) and (T[r('flower')][c('colors')] != 'white')"}, "10": {"text": "The cup required somewhat fewer minutes to print than Felicia's design.", "conditions": "(T[r('cup')][c('times')] < T[r('Felicia')][c('times')])"}, "11": {"text": "Felicia's design required 15 fewer minutes to print than the green item.", "conditions": "(T[r('Felicia')][c('times')] == T[r('green')][c('times')] - 15)"}, "12": {"text": "The orange design, the flower, Irma's item and the item that printed in 35 minutes were all different items.", "conditions": "(T[r('orange')][c('items')] != 'flower') and (T[r('orange')][c('students')] != 'Irma') and (T[r('orange')][c('times')] != 35) and (T[r('flower')][c('students')] != 'Irma') and (T[r('flower')][c('times')] != 35) and (T[r('Irma')][c('times')] != 35)"}}, "initial": [["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "current": [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "mask", ""], [25, "", "", ""], [30, "Felicia", "skull", "red"], [35, "", "", ""]], "applied_clues": ["9", "6", "2"], "initial_to_current": [[["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "mask", ""], [25, "", "", ""], [30, "Felicia", "skull", "red"], [35, "", "", ""]]], "unsolvable_child": [["times", "students", "items", "colors"], [10, "Adrienne", "flower", ""], [15, "", "", "white"], [20, "Irma", "mask", ""], [25, "", "", ""], [30, "Felicia", "skull", "red"], [35, "", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["times", "students", "items", "colors"], [10, "Adrienne", "cup", "white"], [15, "Felicia", "flower", "red"], [20, "Irma", "mask", "yellow"], [25, "Bertha", "whistle", "orange"], [30, "Eleanor", "skull", "green"], [35, "Willis", "phone case", "purple"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "", "", ""], [350, "Explore More", "Sheryl", "Mack truck"], [400, "", "", "Airstream"]], "applied_clues": ["2", "1"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "Explore More", "Sheryl", ""], [400, "", "", "Airstream"]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "", "", ""], [350, "Explore More", "Sheryl", "Mack truck"], [400, "", "", "Airstream"]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "Books-4-U", "", ""], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Ready Reader", "", "Airstream"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "Kimberly", "Mack truck"], [350, "Explore More", "", "Airstream"], [400, "Dream Machine", "Sheryl", ""]], "applied_clues": ["2", "1"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "Kimberly", "Mack truck"], [350, "Explore More", "", "Airstream"], [400, "Dream Machine", "Sheryl", ""]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "", ""], [300, "Books-4-U", "Kimberly", "Mack truck"], [350, "Explore More", "", "Airstream"], [400, "Dream Machine", "Sheryl", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "Liberty", ""], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "", ""]], "applied_clues": ["2", "10", "4"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "Liberty", ""], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "Escape", "goblin"], [5, "", "Liberty", ""], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Dale Durham"], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", "Hank Hensley"], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5", "8", "4"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Dale Durham"], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", "Hank Hensley"], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Yvette", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Dale Durham"], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", "Hank Hensley"], [29, "Sherrie", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "75 million", "New Zealand"]], "applied_clues": ["6", "2", "11", "3", "4"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "75 million", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "75 million", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "75 million", "New Zealand"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "Ken", "", ""], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5", "8"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "Ken", "", ""], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", "Dale Durham"], [22, "Ken", "", "Hank Hensley"], [29, "", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], "applied_clues": ["1"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "", "black widow", ""], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "", "Spain"], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], "clue_applied_to_unsolvable_child": "12"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "Orlando", "", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "Orlando", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "Orlando", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], "applied_clues": ["4", "3"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "BMG-831", ""], [75, "Injitsu", "MRT-628", ""], [100, "", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "chainsaws", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]], "applied_clues": ["7", "10", "6"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "chainsaws", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "chainsaws", ""], [4, "Melissa", "", "Selma"], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "Books-4-U", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", "Mack truck"]], "applied_clues": ["2", "1", "5"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", "Mack truck"]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "Books-4-U", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", "Mack truck"]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "Books-4-U", "", ""], [350, "Explore More", "", "Airstream"], [400, "Ready Reader", "Sheryl", "Mack truck"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Springfield County Bird Club met today, and several of its members brought their newest acquisitions. Using only the clues below, match the months to the options from names and birds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nnames : Bonita, Joan, Laura, Roberta, Velma.\nbirds : finch, lorikeet, lovebird, macaw, parakeet.", "clues": {"1": {"text": "Velma's pet isn't the lovebird.", "conditions": "(T[r('Velma')][c('birds')] != 'lovebird')"}, "2": {"text": "Of the finch and the macaw, one was bought in January and the other is Laura's.", "conditions": "((T[r('finch')][c('months')] == 1 and T[r('macaw')][c('names')] == 'Laura') or (T[r('macaw')][c('months')] == 1 and T[r('finch')][c('names')] == 'Laura')) and (T[r(1)][c('names')] != 'Laura')"}, "3": {"text": "The bird bought in March is either Bonita's pet or the finch.", "conditions": "(T[r(3)][c('names')] == 'Bonita' or T[r(3)][c('birds')] == 'finch') and (T[r('Bonita')][c('birds')] != 'finch')"}, "4": {"text": "Joan's pet was bought 3 months before the lorikeet.", "conditions": "(T[r('Joan')][c('months')] + 3 == T[r('lorikeet')][c('months')])"}, "5": {"text": "The finch was bought sometime after Roberta's pet.", "conditions": "(T[r('finch')][c('months')] > T[r('Roberta')][c('months')])"}, "6": {"text": "Bonita's pet was bought in May.", "conditions": "(T[r('Bonita')][c('months')] == 5)"}, "7": {"text": "The macaw was bought 1 month before the parakeet.", "conditions": "(T[r('macaw')][c('months')] + 1 == T[r('parakeet')][c('months')])"}}, "initial": [["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], "current": [["months", "names", "birds"], [1, "", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "Bonita", ""], [5, "", ""]], "applied_clues": ["2", "7", "3"], "initial_to_current": [[["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", ""], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "Bonita", ""], [5, "", ""]]], "unsolvable_child": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "Bonita", "lorikeet"], [5, "", "lovebird"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Roberta", "parakeet"], [3, "Laura", "finch"], [4, "Velma", "lorikeet"], [5, "Bonita", "lovebird"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "Deanna", 4, ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]], "applied_clues": ["3"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "Deanna", 4, ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "Gretchen", "", ""], [460, "Deanna", 4, "Ontario"], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers and shapes. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Karen, Natasha, Patrick, Salvador, Yvette.\nshapes : beach chair, golf ball, mountain, sports car, train.", "clues": {"1": {"text": "The $175 piece isn't shaped like a beach chair.", "conditions": "(T[r(175)][c('shapes')] != 'beach chair')"}, "2": {"text": "Natasha's piece costs 50 dollars less than Patrick's piece.", "conditions": "(T[r('Natasha')][c('prices')] == T[r('Patrick')][c('prices')] - 50)"}, "3": {"text": "The piece shaped like a train costs 75 dollars more than the cake shaped like a golf ball.", "conditions": "(T[r('train')][c('prices')] == T[r('golf ball')][c('prices')] + 75)"}, "4": {"text": "Salvador's piece is shaped like a sports car.", "conditions": "(T[r('Salvador')][c('shapes')] == 'sports car')"}, "5": {"text": "Natasha's piece costs somewhat more than Karen's piece.", "conditions": "(T[r('Natasha')][c('prices')] > T[r('Karen')][c('prices')])"}, "6": {"text": "Yvette's piece costs $175.", "conditions": "(T[r('Yvette')][c('prices')] == 175)"}}, "initial": [["prices", "customers", "shapes"], [125, "", ""], [150, "", ""], [175, "", ""], [200, "", ""], [225, "", ""]], "current": [["prices", "customers", "shapes"], [125, "", "beach chair"], [150, "Natasha", "golf ball"], [175, "Yvette", ""], [200, "Patrick", ""], [225, "", "train"]], "applied_clues": ["6", "1", "2", "3"], "initial_to_current": [[["prices", "customers", "shapes"], [125, "", ""], [150, "", ""], [175, "", ""], [200, "", ""], [225, "", ""]], [["prices", "customers", "shapes"], [125, "", ""], [150, "", ""], [175, "Yvette", ""], [200, "", ""], [225, "", ""]], [["prices", "customers", "shapes"], [125, "", "beach chair"], [150, "", ""], [175, "Yvette", ""], [200, "", ""], [225, "", ""]], [["prices", "customers", "shapes"], [125, "", "beach chair"], [150, "Natasha", ""], [175, "Yvette", ""], [200, "Patrick", ""], [225, "", ""]], [["prices", "customers", "shapes"], [125, "", "beach chair"], [150, "Natasha", "golf ball"], [175, "Yvette", ""], [200, "Patrick", ""], [225, "", "train"]]], "unsolvable_child": [["prices", "customers", "shapes"], [125, "Karen", "beach chair"], [150, "Natasha", "golf ball"], [175, "Yvette", ""], [200, "Patrick", ""], [225, "Salvador", "train"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["prices", "customers", "shapes"], [125, "Karen", "golf ball"], [150, "Natasha", "beach chair"], [175, "Yvette", "mountain"], [200, "Patrick", "train"], [225, "Salvador", "sports car"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", "alfalfa"], ["June 6th", "Meadowgrove", "Paradise", ""], ["June 7th", "Lucky Star", "", "soy"]], "applied_clues": ["5", "4", "6"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "Lucky Star", "", "soy"]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", "alfalfa"], ["June 6th", "", "Paradise", ""], ["June 7th", "Lucky Star", "", "soy"]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", "alfalfa"], ["June 6th", "Meadowgrove", "Paradise", ""], ["June 7th", "Lucky Star", "", "soy"]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", "potatoes"], ["June 5th", "", "", "alfalfa"], ["June 6th", "Meadowgrove", "Paradise", "beets"], ["June 7th", "Lucky Star", "", "soy"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "GXTV", "", "real estate"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "GXTV", "", "real estate"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Edith", "financial"], [26, "GXTV", "", "real estate"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", "telecom"], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Eunice", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], "applied_clues": ["2", "10", "4", "5", "8", "12"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Eunice", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "Roberto", "Odyssey", "hammerhead"], [4, "Eunice", "Liberty", "tiger"], [5, "Kerry", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "", "Kimberly", "Mack truck"], [350, "", "", ""], [400, "Dream Machine", "Sheryl", ""]], "applied_clues": ["2", "1"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "", "", ""], [350, "", "", ""], [400, "", "Sheryl", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "", "Kimberly", "Mack truck"], [350, "", "", ""], [400, "Dream Machine", "Sheryl", ""]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "Books-4-U", "Kimberly", "Mack truck"], [350, "Ready Reader", "", ""], [400, "Dream Machine", "Sheryl", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lorena's Specialty Cakes has a number of different orders to fulfill this week. Using only the clues below, match the delivery dates to the options from customers, cake shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "delivery dates : 5, 6, 7, 8, 9.\ncustomers : Danielson, Harper, Keller, Lowe, Nolan.\ncake shapes : biplane, rocket ship, sailboat, sports car, turtle.\nflavors : banana, coconut, lemon, raspberry, strawberry.", "clues": {"1": {"text": "The lemon cake will be delivered 3 days after the raspberry cake.", "conditions": "(T[r('lemon')][c('delivery dates')] - T[r('raspberry')][c('delivery dates')] == 3)"}, "2": {"text": "Mrs. Nolan's cake will be delivered 1 day before the cake shaped like a sports car.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 1 == T[r('sports car')][c('delivery dates')])"}, "3": {"text": "Mrs. Danielson's order won't be delivered on October 6.", "conditions": "(T[r('Danielson')][c('delivery dates')] != 6)"}, "4": {"text": "The October 8 delivery will be in the shape of a biplane.", "conditions": "(T[r(8)][c('cake shapes')] == 'biplane')"}, "5": {"text": "Neither Mrs. Harper's order nor the strawberry cake is the October 6 delivery.", "conditions": "(T[r('Harper')][c('delivery dates')] != 6 and T[r('strawberry')][c('delivery dates')] != 6) and (T[r('Harper')][c('flavors')] != 'strawberry')"}, "6": {"text": "Mrs. Nolan's cake will be delivered 2 days before the strawberry cake.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 2 == T[r('strawberry')][c('delivery dates')])"}, "7": {"text": "The cake shaped like a rocket ship will be delivered 1 day before the coconut cake.", "conditions": "(T[r('rocket ship')][c('delivery dates')] + 1 == T[r('coconut')][c('delivery dates')])"}, "8": {"text": "Mrs. Harper's order won't be shaped like a biplane.", "conditions": "(T[r('Harper')][c('cake shapes')] != 'biplane')"}, "9": {"text": "Mrs. Keller's order won't be shaped like a sports car.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sports car')"}, "10": {"text": "The order shaped like a sailboat will be delivered 2 days after the raspberry cake.", "conditions": "(T[r('sailboat')][c('delivery dates')] == T[r('raspberry')][c('delivery dates')] + 2)"}, "11": {"text": "Mrs. Keller's cake won't be shaped like a sailboat.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sailboat')"}}, "initial": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], "current": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "Danielson", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]], "applied_clues": ["1", "10", "6", "2", "5", "3"], "initial_to_current": [[["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "Danielson", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]]], "unsolvable_child": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "Lowe", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Keller", "biplane", "lemon"], [9, "Harper", "turtle", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Bill is shopping for a digital camera. Using only the clues below, match the prices to the options from companies and cameras. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices (dollars) : 550, 575, 600, 625.\ncompanies : Dayero, Lirios, Nectron, Torvia.\ncameras : DM-5000, Lectra 6, Tela G5, Zenix 2C.", "clues": {"1": {"text": "The camera made by Lirios costs 25 dollars more than the model made by Torvia.", "conditions": "(T[r('Lirios')][c('prices')] == T[r('Torvia')][c('prices')] + 25)"}, "2": {"text": "The Zenix 2C costs more than the model made by Torvia.", "conditions": "(T[r('Zenix 2C')][c('prices')] > T[r('Torvia')][c('prices')])"}, "3": {"text": "Of the camera made by Torvia and the model made by Nectron, one is the Tela G5 and the other costs $550.", "conditions": "((T[r('Torvia')][c('cameras')] == 'Tela G5' and T[r(550)][c('companies')] == 'Nectron') or (T[r('Nectron')][c('cameras')] == 'Tela G5' and T[r(550)][c('companies')] == 'Torvia')) and (T[r(550)][c('cameras')] != 'Tela G5') and (T[r('Torvia')][c('companies')] != 'Nectron')"}, "4": {"text": "The camera made by Lirios is the Lectra 6.", "conditions": "(T[r('Lirios')][c('cameras')] == 'Lectra 6')"}, "5": {"text": "The Tela G5 costs 25 dollars more than the Zenix 2C.", "conditions": "(T[r('Tela G5')][c('prices')] == T[r('Zenix 2C')][c('prices')] + 25)"}}, "initial": [["prices", "companies", "cameras"], [550, "", ""], [575, "", ""], [600, "", ""], [625, "", ""]], "current": [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "Lirios", ""], [600, "Nectron", "Tela G5"], [625, "", ""]], "applied_clues": ["3", "1"], "initial_to_current": [[["prices", "companies", "cameras"], [550, "", ""], [575, "", ""], [600, "", ""], [625, "", ""]], [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "", ""], [600, "Nectron", "Tela G5"], [625, "", ""]], [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "Lirios", ""], [600, "Nectron", "Tela G5"], [625, "", ""]]], "unsolvable_child": [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "Lirios", "Zenix 2C"], [600, "Nectron", "Tela G5"], [625, "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["prices", "companies", "cameras"], [550, "Torvia", "DM-5000"], [575, "Lirios", "Lectra 6"], [600, "Dayero", "Zenix 2C"], [625, "Nectron", "Tela G5"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners and butterflies. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 45, 60, 75, 90.\nwinners : Otis, Phillip, Walter, Yvette.\nbutterflies : atlas, grayling, peacock, swallowtail.", "clues": {"1": {"text": "Yvette's purchase was either the insect that sold for $45 or the peacock butterfly.", "conditions": "(T[r('Yvette')][c('butterflies')] == 'peacock' or T[r('Yvette')][c('prices')] == 45) and (T[r('peacock')][c('prices')] != 45)"}, "2": {"text": "The swallowtail butterfly cost 15 dollars more than Phillip's purchase.", "conditions": "(T[r('swallowtail')][c('prices')] == T[r('Phillip')][c('prices')] + 15)"}, "3": {"text": "The atlas butterfly cost more than the peacock butterfly.", "conditions": "(T[r('atlas')][c('prices')] > T[r('peacock')][c('prices')])"}, "4": {"text": "The four butterflies were the butterfly that sold for $90, the grayling butterfly, Yvette's purchase and Walter's purchase.", "conditions": "(T[r(90)][c('butterflies')]!='grayling') and (T[r(90)][c('winners')]!='Yvette') and (T[r(90)][c('winners')]!='Walter') and (T[r('grayling')][c('winners')]!='Yvette') and (T[r('grayling')][c('winners')]!='Walter')"}}, "initial": [["prices", "winners", "butterflies"], [45, "", ""], [60, "", ""], [75, "", ""], [90, "", ""]], "current": [["prices", "winners", "butterflies"], [45, "Yvette", ""], [60, "", "peacock"], [75, "Phillip", ""], [90, "", "swallowtail"]], "applied_clues": ["1", "2"], "initial_to_current": [[["prices", "winners", "butterflies"], [45, "", ""], [60, "", ""], [75, "", ""], [90, "", ""]], [["prices", "winners", "butterflies"], [45, "Yvette", ""], [60, "", "peacock"], [75, "", ""], [90, "", ""]], [["prices", "winners", "butterflies"], [45, "Yvette", ""], [60, "", "peacock"], [75, "Phillip", ""], [90, "", "swallowtail"]]], "unsolvable_child": [["prices", "winners", "butterflies"], [45, "Yvette", "grayling"], [60, "", "peacock"], [75, "Phillip", "atlas"], [90, "", "swallowtail"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "winners", "butterflies"], [45, "Phillip", "grayling"], [60, "Walter", "swallowtail"], [75, "Yvette", "peacock"], [90, "Otis", "atlas"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "", ""], [9, "Orlando", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], "applied_clues": ["4"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "Orlando", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "", "Bull Creek"], [9, "Orlando", "Lake Jesup"], [10, "", ""], [11, "Meredith", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "Esther", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "applied_clues": ["4", "6", "3", "7"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "Esther", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "Esther", ""], [11, "Lana", "Bull Creek"], [12, "Danielle", "Reedy Creek"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 25, 26, 27, 28, 29.\nstock symbols : ABTR, HBW, JMO, KMPP, PSTO.\nclients : Abigail, Charlie, Edith, Francine, Heathcliff.\nsectors : energy, financial, technology, telecom, utilities.", "clues": {"1": {"text": "Of the stock that sold for $28 per share and PSTO, one was in the technology sector and the other was bought by Abigail.", "conditions": "((T[r(28)][c('sectors')] == 'technology' and T[r('PSTO')][c('clients')] == 'Abigail') or (T[r('PSTO')][c('sectors')] == 'technology' and T[r(28)][c('clients')] == 'Abigail')) and (T[r(28)][c('stock symbols')] != 'PSTO') and (T[r('technology')][c('clients')] != 'Abigail')"}, "2": {"text": "Of the telecom stock and the stock that sold for $27 per share, one was KMPP and the other was bought by Charlie.", "conditions": "((T[r('telecom')][c('stock symbols')] == 'KMPP' and T[r(27)][c('clients')] == 'Charlie') or (T[r(27)][c('stock symbols')] == 'KMPP' and T[r('telecom')][c('clients')] == 'Charlie')) and (T[r('telecom')][c('prices')] != 27) and (T[r('KMPP')][c('clients')] != 'Charlie')"}, "3": {"text": "The stock Edith bought was per share more expensive than the technology stock.", "conditions": "(T[r('Edith')][c('prices')] > T[r('technology')][c('prices')])"}, "4": {"text": "The five stocks were JMO, the stock that sold for $25 per share, the energy stock, the utilities stock and the financial stock.", "conditions": "(T[r(25)][c('stock symbols')] != 'JMO') and (T[r('energy')][c('stock symbols')] != 'JMO') and (T[r('utilities')][c('stock symbols')] != 'JMO') and (T[r('financial')][c('stock symbols')] != 'JMO') and (T[r('energy')][c('prices')] != 25) and (T[r('utilities')][c('prices')] != 25) and (T[r('financial')][c('prices')] != 25)"}, "5": {"text": "Of the financial stock and the stock Charlie bought, one was PSTO and the other sold for $25 per share.", "conditions": "((T[r('financial')][c('stock symbols')] == 'PSTO' and T[r('Charlie')][c('prices')] == 25) or (T[r('Charlie')][c('stock symbols')] == 'PSTO' and T[r('financial')][c('prices')] == 25)) and (T[r('financial')][c('clients')] != 'Charlie') and (T[r('PSTO')][c('prices')] != 25)"}, "6": {"text": "JMO was either the stock Edith bought or the stock Francine bought.", "conditions": "(T[r('JMO')][c('clients')] == 'Edith' or T[r('JMO')][c('clients')] == 'Francine')"}, "7": {"text": "The utilities stock was 2 dollars per share more expensive than HBW.", "conditions": "(T[r('utilities')][c('prices')] == T[r('HBW')][c('prices')] + 2)"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "JMO", "Francine", "technology"], [29, "", "", ""]], "applied_clues": ["2", "5", "1", "4", "6"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "", "", ""], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "", "financial"], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", ""], [28, "", "", "technology"], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "JMO", "", "technology"], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "JMO", "Francine", "technology"], [29, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "energy"], [28, "JMO", "Francine", "technology"], [29, "", "Edith", "utilities"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "HBW", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "utilities"], [28, "JMO", "Francine", "technology"], [29, "ABTR", "Edith", "energy"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "\"Parties Unlimited\" caters to a wide variety of special requests (such as clowns or magicians) for its clients. Using only the clues below, match the days to the options from requests and families. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 3, 4, 5, 6, 7.\nrequests : clown, petting zoo, photo booth, rock band, superhero.\nfamilies : Benton, Hayden, Ingram, Stanley, Zimmerman.", "clues": {"1": {"text": "The party on October 5 is for the Ingrams.", "conditions": "(T[r(5)][c('families')] == 'Ingram')"}, "2": {"text": "The booking that requested the clown is sometime after the Ingram family booking.", "conditions": "(T[r('clown')][c('days')] > T[r('Ingram')][c('days')])"}, "3": {"text": "The booking on October 4 is either the party that requested the petting zoo or the Hayden family booking.", "conditions": "(T[r(4)][c('requests')] == 'petting zoo' or T[r(4)][c('families')] == 'Hayden') and (T[r('Hayden')][c('requests')] != 'petting zoo')"}, "4": {"text": "The five events are the booking on October 7, the party that requested the rock band, the event that requested the superhero, the Ingram family party and the Benton family party.", "conditions": "(T[r('rock band')][c('days')] != 7) and (T[r('superhero')][c('days')] != 7) and (T[r('Ingram')][c('days')] != 7) and (T[r('Benton')][c('days')] != 7) and (T[r('rock band')][c('families')] != 'Ingram') and (T[r('rock band')][c('families')] != 'Benton') and (T[r('superhero')][c('families')] != 'Ingram') and (T[r('superhero')][c('families')] != 'Benton')"}, "5": {"text": "The booking that requested the photo booth is either the event on October 6 or the event on October 3.", "conditions": "(T[r('photo booth')][c('days')] == 6 or T[r('photo booth')][c('days')] == 3)"}, "6": {"text": "The Ingram family booking is 1 day before the booking that requested the superhero.", "conditions": "(T[r('Ingram')][c('days')] == T[r('superhero')][c('days')] - 1)"}, "7": {"text": "The party that requested the superhero is for the Zimmermans.", "conditions": "(T[r('superhero')][c('families')] == 'Zimmerman')"}}, "initial": [["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", ""], [6, "", "Hayden"], [7, "", ""]], "applied_clues": ["5", "3"], "initial_to_current": [[["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", ""], [6, "", "Hayden"], [7, "", ""]]], "unsolvable_child": [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", "Ingram"], [6, "", "Hayden"], [7, "", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["days", "requests", "families"], [3, "photo booth", "Benton"], [4, "rock band", "Hayden"], [5, "petting zoo", "Ingram"], [6, "superhero", "Zimmerman"], [7, "clown", "Stanley"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", "Dale Durham"], [22, "Ken", "", "Hank Hensley"], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5", "8", "4"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "Ken", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", "Dale Durham"], [22, "Ken", "", "Hank Hensley"], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Yvette", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", "Dale Durham"], [22, "Ken", "", "Hank Hensley"], [29, "Sherrie", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], "applied_clues": ["1", "3", "8"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "Felix", "", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", "Worthington"], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "Zachary", "beach chair", ""], [225, "", "", "banana"]], "applied_clues": ["5", "2", "7", "11"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "Zachary", "beach chair", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "Zachary", "beach chair", ""], [225, "", "", "banana"]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "train", ""], [200, "Zachary", "beach chair", ""], [225, "", "", "banana"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "applied_clues": ["5"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "", ""], ["June 7th", "", "", ""]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "Paradise", "soy"], ["June 6th", "", "", "alfalfa"], ["June 7th", "", "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]], "applied_clues": ["3", "10", "11", "2", "8", "1"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "Deanna", "", "Elk Grove"], [540, "", 4, ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "Leigh", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, ""], [380, "Leigh", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", "Modesto"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], "applied_clues": ["2", "10", "4"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], "applied_clues": ["1"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3", "5"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", "alfalfa"], ["June 6th", "", "Paradise", ""], ["June 7th", "Lucky Star", "", "soy"]], "applied_clues": ["5", "4"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "Lucky Star", "", "soy"]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", "alfalfa"], ["June 6th", "", "Paradise", ""], ["June 7th", "Lucky Star", "", "soy"]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", "alfalfa"], ["June 6th", "Meadowgrove", "Paradise", ""], ["June 7th", "Lucky Star", "", "soy"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Alexandra decided to cook a series of low-calorie meals for her family this week. Using only the clues below, match the calories to the options from recipes and nights. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "calories : 380, 400, 420, 440, 460.\nrecipes : bulgur salad, chili pork, citrus halibut, garlic tilapia, kale quinoa.\nnights : May 11th, May 12th, May 13th, May 15th, May 16th.", "clues": {"1": {"text": "The kale quinoa contains somewhat more calories than the recipe served on May 11th.", "conditions": "(T[r('kale quinoa')][c('calories')] > T[r('May 11th')][c('calories')])"}, "2": {"text": "The dish with 460 calories was served on May 13th.", "conditions": "(T[r(460)][c('nights')] == 'May 13th')"}, "3": {"text": "The bulgur salad contains 60 fewer calories than the meal served on May 16th.", "conditions": "(T[r('bulgur salad')][c('calories')] == T[r('May 16th')][c('calories')] - 60)"}, "4": {"text": "Of the dish served on May 13th and the meal served on May 11th, one was the citrus halibut and the other has 400 calories.", "conditions": "((T[r('May 13th')][c('recipes')] == 'citrus halibut' and T[r('May 11th')][c('calories')] == 400) or (T[r('May 11th')][c('recipes')] == 'citrus halibut' and T[r('May 13th')][c('calories')] == 400)) and (T[r('citrus halibut')][c('calories')] != 400)"}, "5": {"text": "The recipe served on May 12th contains 40 fewer calories than the garlic tilapia.", "conditions": "(T[r('May 12th')][c('calories')] == T[r('garlic tilapia')][c('calories')] - 40)"}}, "initial": [["calories", "recipes", "nights"], [380, "", ""], [400, "", ""], [420, "", ""], [440, "", ""], [460, "", ""]], "current": [["calories", "recipes", "nights"], [380, "", ""], [400, "", "May 11th"], [420, "kale quinoa", ""], [440, "", ""], [460, "citrus halibut", "May 13th"]], "applied_clues": ["4", "2", "1"], "initial_to_current": [[["calories", "recipes", "nights"], [380, "", ""], [400, "", ""], [420, "", ""], [440, "", ""], [460, "", ""]], [["calories", "recipes", "nights"], [380, "", ""], [400, "", "May 11th"], [420, "", ""], [440, "", ""], [460, "citrus halibut", "May 13th"]], [["calories", "recipes", "nights"], [380, "", ""], [400, "", "May 11th"], [420, "", ""], [440, "", ""], [460, "citrus halibut", "May 13th"]], [["calories", "recipes", "nights"], [380, "", ""], [400, "", "May 11th"], [420, "kale quinoa", ""], [440, "", ""], [460, "citrus halibut", "May 13th"]]], "unsolvable_child": [["calories", "recipes", "nights"], [380, "bulgur salad", ""], [400, "", "May 11th"], [420, "kale quinoa", ""], [440, "", "May 16th"], [460, "citrus halibut", "May 13th"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["calories", "recipes", "nights"], [380, "bulgur salad", "May 12th"], [400, "chili pork", "May 11th"], [420, "garlic tilapia", "May 15th"], [440, "kale quinoa", "May 16th"], [460, "citrus halibut", "May 13th"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "", "violet", "Corinth"], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "Orlando", "", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", "Corinth"], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "Orlando", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "", "violet", "Corinth"], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "Orlando", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "", ""], [12, "", ""]], "applied_clues": ["1", "5", "7", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "", ""], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Bushnell County is putting together a historical brochure about some of the ancient cultures that used to live there. Using only the clues below, match the years to the options from cultures and populations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "years : 100, 350, 600, 850.\ncultures : Budel, Hatgare, Oiracha, Sameos.\npopulations : 4500, 5000, 7500, 9500.", "clues": {"1": {"text": "The Oiracha culture, the culture founded in 850 AD and the culture with 4500 people were all different cultures.", "conditions": "(T[r(850)][c('cultures')] != 'Oiracha') and (T[r(4500)][c('cultures')] != 'Oiracha') and (T[r(4500)][c('years')] != 850)"}, "2": {"text": "The culture with 9500 people was founded sometime before the culture with 4500 people.", "conditions": "(T[r(9500)][c('years')]<T[r(4500)][c('years')])"}, "3": {"text": "Of the culture with 4500 people and the culture with 9500 people, one was the Budel culture and the other was founded in 600 AD.", "conditions": "((T[r(4500)][c('cultures')]== 'Budel' and T[r(9500)][c('years')]== 600) or (T[r(4500)][c('years')]== 600 and T[r(9500)][c('cultures')]== 'Budel')) and (T[r(600)][c('cultures')]!= 'Budel')"}, "4": {"text": "The culture with 5000 people was founded 250 years before the culture with 9500 people.", "conditions": "(T[r(5000)][c('years')] + 250 == T[r(9500)][c('years')])"}, "5": {"text": "The Sameos culture was founded 250 years before the culture with 7500 people.", "conditions": "(T[r('Sameos')][c('years')] + 250 == T[r(7500)][c('years')])"}}, "initial": [["years", "cultures", "populations"], [100, "", ""], [350, "", ""], [600, "", ""], [850, "", ""]], "current": [["years", "cultures", "populations"], [100, "Budel", 9500], [350, "Oiracha", ""], [600, "", 4500], [850, "", ""]], "applied_clues": ["3", "1"], "initial_to_current": [[["years", "cultures", "populations"], [100, "", ""], [350, "", ""], [600, "", ""], [850, "", ""]], [["years", "cultures", "populations"], [100, "Budel", 9500], [350, "", ""], [600, "", 4500], [850, "", ""]], [["years", "cultures", "populations"], [100, "Budel", 9500], [350, "Oiracha", ""], [600, "", 4500], [850, "", ""]]], "unsolvable_child": [["years", "cultures", "populations"], [100, "Budel", 9500], [350, "Oiracha", ""], [600, "", 4500], [850, "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["years", "cultures", "populations"], [100, "Oiracha", 5000], [350, "Budel", 9500], [600, "Sameos", 4500], [850, "Hatgare", 7500]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Nicholas and Edith are having a small dinner party this evening at their home in Cedar Valley, and they've decided to open a select number of rare wines from their personal collection to celebrate the occasion. Using only the clues below, match the vintages to the options from wines and types. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "vintages : 1984, 1988, 1992, 1996.\nwines : Annata Branco, Bianca Flaux, Ece Suss, Vendemmia.\ntypes : gewurztraminer, merlot, pinot noir, riesling.", "clues": {"1": {"text": "The Ece Suss was bottled sometime after the Annata Branco.", "conditions": "(T[r('Ece Suss')][c('vintages')] > T[r('Annata Branco')][c('vintages')])"}, "2": {"text": "The Bianca Flaux was bottled 4 years before the Vendemmia.", "conditions": "(T[r('Vendemmia')][c('vintages')] - T[r('Bianca Flaux')][c('vintages')] == 4)"}, "3": {"text": "The 1988 bottle is a pinot noir.", "conditions": "(T[r(1988)][c('types')] == 'pinot noir')"}, "4": {"text": "The merlot is either the Annata Branco or the Bianca Flaux.", "conditions": "(T[r('merlot')][c('wines')] == 'Annata Branco' or T[r('merlot')][c('wines')] == 'Bianca Flaux')"}, "5": {"text": "The Bianca Flaux was bottled sometime after the Ece Suss.", "conditions": "(T[r('Bianca Flaux')][c('vintages')] > T[r('Ece Suss')][c('vintages')])"}, "6": {"text": "The 1984 bottle is a gewurztraminer.", "conditions": "(T[r(1984)][c('types')] == 'gewurztraminer')"}}, "initial": [["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], "current": [["vintages", "wines", "types"], [1984, "Bianca Flaux", ""], [1988, "Vendemmia", ""], [1992, "", ""], [1996, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], [["vintages", "wines", "types"], [1984, "Bianca Flaux", ""], [1988, "Vendemmia", ""], [1992, "", ""], [1996, "", ""]]], "unsolvable_child": [["vintages", "wines", "types"], [1984, "Bianca Flaux", "merlot"], [1988, "Vendemmia", ""], [1992, "Annata Branco", ""], [1996, "Ece Suss", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["vintages", "wines", "types"], [1984, "Annata Branco", "gewurztraminer"], [1988, "Ece Suss", "pinot noir"], [1992, "Bianca Flaux", "merlot"], [1996, "Vendemmia", "riesling"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]], "applied_clues": ["4"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Seth", "", "gamma rays"], [2, "", "TV-412", "larval growth"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "GX-13", ""]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3", "5", "2"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "red", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]], "applied_clues": ["3"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Deanna", 4, "Ontario"], [380, "Gretchen", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "", "", ""], [700, "", "", ""]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lorena's Specialty Cakes has a number of different orders to fulfill this week. Using only the clues below, match the delivery dates to the options from customers, cake shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "delivery dates : 5, 6, 7, 8, 9.\ncustomers : Danielson, Harper, Keller, Lowe, Nolan.\ncake shapes : biplane, rocket ship, sailboat, sports car, turtle.\nflavors : banana, coconut, lemon, raspberry, strawberry.", "clues": {"1": {"text": "The lemon cake will be delivered 3 days after the raspberry cake.", "conditions": "(T[r('lemon')][c('delivery dates')] - T[r('raspberry')][c('delivery dates')] == 3)"}, "2": {"text": "Mrs. Nolan's cake will be delivered 1 day before the cake shaped like a sports car.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 1 == T[r('sports car')][c('delivery dates')])"}, "3": {"text": "Mrs. Danielson's order won't be delivered on October 6.", "conditions": "(T[r('Danielson')][c('delivery dates')] != 6)"}, "4": {"text": "The October 8 delivery will be in the shape of a biplane.", "conditions": "(T[r(8)][c('cake shapes')] == 'biplane')"}, "5": {"text": "Neither Mrs. Harper's order nor the strawberry cake is the October 6 delivery.", "conditions": "(T[r('Harper')][c('delivery dates')] != 6 and T[r('strawberry')][c('delivery dates')] != 6) and (T[r('Harper')][c('flavors')] != 'strawberry')"}, "6": {"text": "Mrs. Nolan's cake will be delivered 2 days before the strawberry cake.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 2 == T[r('strawberry')][c('delivery dates')])"}, "7": {"text": "The cake shaped like a rocket ship will be delivered 1 day before the coconut cake.", "conditions": "(T[r('rocket ship')][c('delivery dates')] + 1 == T[r('coconut')][c('delivery dates')])"}, "8": {"text": "Mrs. Harper's order won't be shaped like a biplane.", "conditions": "(T[r('Harper')][c('cake shapes')] != 'biplane')"}, "9": {"text": "Mrs. Keller's order won't be shaped like a sports car.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sports car')"}, "10": {"text": "The order shaped like a sailboat will be delivered 2 days after the raspberry cake.", "conditions": "(T[r('sailboat')][c('delivery dates')] == T[r('raspberry')][c('delivery dates')] + 2)"}, "11": {"text": "Mrs. Keller's cake won't be shaped like a sailboat.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sailboat')"}}, "initial": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], "current": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "", "sports car", "coconut"], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "Danielson", "", ""]], "applied_clues": ["1", "10", "6", "2", "5", "3", "7"], "initial_to_current": [[["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "Danielson", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "", "sports car", "coconut"], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "Danielson", "", ""]]], "unsolvable_child": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "", "sports car", "coconut"], [7, "", "sailboat", "strawberry"], [8, "Harper", "biplane", "lemon"], [9, "Danielson", "turtle", "banana"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "Lowe", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Keller", "biplane", "lemon"], [9, "Harper", "turtle", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "75 million", ""], [1500, "", "90 million", "New Zealand"]], "applied_clues": ["6", "2", "11", "3"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "75 million", ""], [1500, "", "90 million", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "75 million", ""], [1500, "", "90 million", "New Zealand"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "Sergio", "baseball", ""], [39, "", "", "garbage man"]], "applied_clues": ["3", "12", "8", "6", "4"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "baseball", ""], [39, "", "", "garbage man"]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "baseball", ""], [39, "", "", "garbage man"]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "Sergio", "baseball", ""], [39, "", "", "garbage man"]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "Lowell", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "Sergio", "baseball", ""], [39, "", "", "garbage man"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "Zachary", "", ""], [225, "", "", "banana"]], "applied_clues": ["5", "2", "7", "11"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "Zachary", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "Zachary", "", ""], [225, "", "", "banana"]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "Zachary", "train", ""], [225, "", "", "banana"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "Esther", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]], "applied_clues": ["4", "6", "3", "7"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]], [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]], [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "Esther", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "Esther", "Lake Jesup"], [10, "Orlando", ""], [11, "Lana", "Reedy Creek"], [12, "Danielle", "Bull Creek"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "red", ""], [4, "", "white", "Forest City"], [5, "", "", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3", "5", "2", "10"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "red", ""], [4, "", "white", "Forest City"], [5, "", "", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "red", ""], [4, "Splat Squad", "white", "Forest City"], [5, "", "orange", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "\"Against the Grain\" offers hand-made wooden furniture at reasonable prices. Each item is made by an in-house employee. Using only the clues below, match the dollars to the options from woodworkers, woods, and pieces. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "dollars: 250, 275, 300, 325, 350, 375.\nwoodworkers : Bonita, Ellen, Josephine, Kendra, Olivia, Patsy.\nwoods : ash, mahogany, oak, poplar, rosewood, walnut.\npieces : barstool, bookshelf, coffee table, end table, footstool, hutch.", "clues": {"1": {"text": "The $325 piece is the barstool.", "conditions": "(T[r(325)][c('pieces')] == 'barstool')"}, "2": {"text": "Of the piece made of ash and the barstool, one was crafted by Bonita and the other costs $250.", "conditions": "((T[r('ash')][c('woodworkers')] == 'Bonita' and T[r('barstool')][c('dollars')] == 250 ) or (T[r('barstool')][c('woodworkers')] == 'Bonita' and T[r('ash')][c('dollars')] == 250)) and (T[r('ash')][c('pieces')] != 'barstool') and (T[r('Bonita')][c('dollars')] != 250)"}, "3": {"text": "The end table costs 25 dollars more than Ellen's item.", "conditions": "(T[r('end table')][c('dollars')] == T[r('Ellen')][c('dollars')] + 25)"}, "4": {"text": "Ellen's piece costs 50 dollars more than the hutch.", "conditions": "(T[r('Ellen')][c('dollars')] == T[r('hutch')][c('dollars')] + 50)"}, "5": {"text": "The bookshelf wasn't made of oak.", "conditions": "(T[r('bookshelf')][c('woods')] != 'oak')"}, "6": {"text": "Kendra's item wasn't made of rosewood.", "conditions": "(T[r('Kendra')][c('woods')] != 'rosewood')"}, "7": {"text": "Neither the coffee table nor the item made of oak is Kendra's piece.", "conditions": "(T[r('Kendra')][c('pieces')] != 'coffee table' and T[r('oak')][c('woodworkers')] != 'Kendra') and (T[r('oak')][c('pieces')] != 'coffee table')"}, "8": {"text": "Josephine's item is either the item made of walnut or the end table.", "conditions": "(T[r('Josephine')][c('woods')] == 'walnut' or T[r('Josephine')][c('pieces')] == 'end table') and (T[r('walnut')][c('pieces')] != 'end table')"}, "9": {"text": "Of Bonita's piece and the bookshelf, one was made of poplar and the other costs $275.", "conditions": "((T[r('Bonita')][c('woods')] == 'poplar' and T[r('bookshelf')][c('dollars')] == 275) or (T[r('bookshelf')][c('woods')] == 'poplar' and T[r('Bonita')][c('dollars')] == 275)) and (T[r('Bonita')][c('pieces')] != 'bookshelf') and (T[r('poplar')][c('dollars')] != 275)"}, "10": {"text": "The piece made of walnut costs 75 dollars more than Patsy's piece.", "conditions": "(T[r('walnut')][c('dollars')] == T[r('Patsy')][c('dollars')] + 75)"}, "11": {"text": "Neither the piece made of oak nor the item made of walnut is the coffee table.", "conditions": "(T[r('oak')][c('pieces')] != 'coffee table' and T[r('walnut')][c('pieces')] != 'coffee table')"}}, "initial": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], "current": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", "coffee table"], [275, "Patsy", "", "bookshelf"], [300, "", "oak", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", ""], [375, "Josephine", "", "end table"]], "applied_clues": ["2", "9", "1", "3", "4", "8", "10", "11"], "initial_to_current": [[["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", ""], [300, "", "", ""], [325, "Bonita", "", "barstool"], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", ""], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "", ""], [375, "", "", "end table"]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "", ""], [375, "", "", "end table"]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "", "", "bookshelf"], [300, "", "", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", ""], [375, "Josephine", "", "end table"]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "Patsy", "", "bookshelf"], [300, "", "", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", ""], [375, "Josephine", "", "end table"]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", "coffee table"], [275, "Patsy", "", "bookshelf"], [300, "", "oak", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", ""], [375, "Josephine", "", "end table"]]], "unsolvable_child": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", "coffee table"], [275, "Patsy", "", "bookshelf"], [300, "", "oak", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", "footstool"], [375, "Josephine", "", "end table"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["dollars", "woodworkers", "woods", "pieces"], [250, "Olivia", "ash", "coffee table"], [275, "Patsy", "rosewood", "bookshelf"], [300, "Kendra", "mahogany", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", "footstool"], [375, "Josephine", "oak", "end table"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", "Green Swamp"]], "applied_clues": ["1", "5", "7", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", "Green Swamp"]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", "Green Swamp"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", "Green Swamp"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "Yvonne", "", ""]], "applied_clues": ["2", "10", "4"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "Yvonne", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "Gene", "Escape", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "Yvonne", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "raft spider", ""], [120, "Phyllis", "", ""]], "applied_clues": ["1", "12", "3", "9"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "raft spider", ""], [120, "Phyllis", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Olga", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", "Honduras"], [105, "Yvette", "raft spider", ""], [120, "Phyllis", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], "applied_clues": ["4", "5", "8", "2", "11"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], "applied_clues": ["1", "12", "3"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", "waiter"], [11, "Vernon", "golf", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "Harvey", "", ""]], "applied_clues": ["3", "12", "8", "6", "4", "7", "5", "9", "10"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", "waiter"], [11, "Vernon", "golf", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", "waiter"], [11, "Vernon", "golf", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "Harvey", "", ""]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", "waiter"], [11, "Vernon", "golf", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "hockey", "garbage man"], [39, "Harvey", "soccer", ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "Lonnie", "black widow", ""]], "applied_clues": ["1", "12", "3", "9"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "Lonnie", "black widow", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "Lonnie", "black widow", ""]], [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "Lonnie", "black widow", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Phyllis", "", "Spain"], [60, "Olga", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", "Honduras"], [105, "Yvette", "raft spider", ""], [120, "Lonnie", "black widow", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], "applied_clues": ["2", "10", "4", "5", "8"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Eunice", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], "clue_applied_to_unsolvable_child": "12"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1", "3", "7"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "Lena", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1", "3", "7"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "Lena", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers and trainers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 8, 9, 10, 11, 12.\ncustomers : Arnold, Blake, Danny, Emma, Garrett.\ntrainers : Howard, Irene, Jimmy, Kristin, Nicholas.", "clues": {"1": {"text": "Danny's appointment is 1 hour before the appointment with Irene.", "conditions": "(T[r('Danny')][c('times')] == T[r('Irene')][c('times')] - 1)"}, "2": {"text": "Of the lesson with Irene and the session at 11am, one is Emma's and the other is Blake's.", "conditions": "(T[r('Emma')][c('trainers')] == 'Irene' and T[r('Blake')][c('times')] == 11 or T[r('Blake')][c('trainers')] == 'Irene' and T[r('Emma')][c('times')] == 11) and (T[r('Irene')][c('times')] != 11)"}, "3": {"text": "The lesson at 8 am is either Emma's lesson or the appointment with Jimmy.", "conditions": "(T[r('Emma')][c('times')] == 8 or T[r('Jimmy')][c('times')] == 8) and (T[r('Emma')][c('trainers')] != 'Jimmy')"}, "4": {"text": "The session at 12 am is with Howard.", "conditions": "(T[r(12)][c('trainers')] == 'Howard')"}, "5": {"text": "The appointment at 11 am isn't with Nicholas.", "conditions": "(T[r(11)][c('trainers')] != 'Nicholas')"}, "6": {"text": "Emma's session is 2 hours after Arnold's lesson.", "conditions": "(T[r('Emma')][c('times')] == T[r('Arnold')][c('times')] + 2)"}}, "initial": [["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["times", "customers", "trainers"], [8, "", ""], [9, "Emma", "Irene"], [10, "", ""], [11, "Blake", ""], [12, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["times", "customers", "trainers"], [8, "", ""], [9, "Emma", "Irene"], [10, "", ""], [11, "Blake", ""], [12, "", ""]]], "unsolvable_child": [["times", "customers", "trainers"], [8, "", "Jimmy"], [9, "Emma", "Irene"], [10, "", ""], [11, "Blake", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["times", "customers", "trainers"], [8, "Arnold", "Jimmy"], [9, "Danny", "Nicholas"], [10, "Emma", "Irene"], [11, "Blake", "Kristin"], [12, "Garrett", "Howard"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5", "8"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Dale Durham"], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", "Hank Hensley"], [29, "", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "", "alfalfa"], ["June 7th", "", "Paradise", ""]], "applied_clues": ["5", "4"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "", "alfalfa"], ["June 7th", "", "Paradise", ""]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "", "alfalfa"], ["June 7th", "Meadowgrove", "Paradise", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "75 million", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], "applied_clues": ["6", "2", "11", "3"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "75 million", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "75 million", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], "applied_clues": ["4", "5", "8", "2", "11", "7"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", ""], [700, "", "", ""]], "applied_clues": ["3", "10", "11"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "Deanna", "", "Elk Grove"], [540, "", 4, ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", ""], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "Leigh", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], "applied_clues": ["6", "2"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "GX-13", "gamma rays"], [3, "", "", ""], [4, "", "", ""], [5, "Seth", "", "larval growth"]], "applied_clues": ["4", "8"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "larval growth"]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "GX-13", "gamma rays"], [3, "", "", ""], [4, "", "", ""], [5, "Seth", "", "larval growth"]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "GX-13", "gamma rays"], [3, "", "WB-664", ""], [4, "", "AV-435", ""], [5, "Seth", "ZF-15", "larval growth"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Hank Hensley"], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", "Dale Durham"], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5", "8", "4"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Hank Hensley"], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", "Dale Durham"], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Yvette", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Hank Hensley"], [15, "Wayne", "", "Fred Fuentes"], [22, "Ken", "Frogs of Iowa", "Dale Durham"], [29, "Sherrie", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 25, 26, 27, 28, 29.\nstock symbols : ABTR, HBW, JMO, KMPP, PSTO.\nclients : Abigail, Charlie, Edith, Francine, Heathcliff.\nsectors : energy, financial, technology, telecom, utilities.", "clues": {"1": {"text": "Of the stock that sold for $28 per share and PSTO, one was in the technology sector and the other was bought by Abigail.", "conditions": "((T[r(28)][c('sectors')] == 'technology' and T[r('PSTO')][c('clients')] == 'Abigail') or (T[r('PSTO')][c('sectors')] == 'technology' and T[r(28)][c('clients')] == 'Abigail')) and (T[r(28)][c('stock symbols')] != 'PSTO') and (T[r('technology')][c('clients')] != 'Abigail')"}, "2": {"text": "Of the telecom stock and the stock that sold for $27 per share, one was KMPP and the other was bought by Charlie.", "conditions": "((T[r('telecom')][c('stock symbols')] == 'KMPP' and T[r(27)][c('clients')] == 'Charlie') or (T[r(27)][c('stock symbols')] == 'KMPP' and T[r('telecom')][c('clients')] == 'Charlie')) and (T[r('telecom')][c('prices')] != 27) and (T[r('KMPP')][c('clients')] != 'Charlie')"}, "3": {"text": "The stock Edith bought was per share more expensive than the technology stock.", "conditions": "(T[r('Edith')][c('prices')] > T[r('technology')][c('prices')])"}, "4": {"text": "The five stocks were JMO, the stock that sold for $25 per share, the energy stock, the utilities stock and the financial stock.", "conditions": "(T[r(25)][c('stock symbols')] != 'JMO') and (T[r('energy')][c('stock symbols')] != 'JMO') and (T[r('utilities')][c('stock symbols')] != 'JMO') and (T[r('financial')][c('stock symbols')] != 'JMO') and (T[r('energy')][c('prices')] != 25) and (T[r('utilities')][c('prices')] != 25) and (T[r('financial')][c('prices')] != 25)"}, "5": {"text": "Of the financial stock and the stock Charlie bought, one was PSTO and the other sold for $25 per share.", "conditions": "((T[r('financial')][c('stock symbols')] == 'PSTO' and T[r('Charlie')][c('prices')] == 25) or (T[r('Charlie')][c('stock symbols')] == 'PSTO' and T[r('financial')][c('prices')] == 25)) and (T[r('financial')][c('clients')] != 'Charlie') and (T[r('PSTO')][c('prices')] != 25)"}, "6": {"text": "JMO was either the stock Edith bought or the stock Francine bought.", "conditions": "(T[r('JMO')][c('clients')] == 'Edith' or T[r('JMO')][c('clients')] == 'Francine')"}, "7": {"text": "The utilities stock was 2 dollars per share more expensive than HBW.", "conditions": "(T[r('utilities')][c('prices')] == T[r('HBW')][c('prices')] + 2)"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "", "Francine", "technology"], [29, "JMO", "Edith", ""]], "applied_clues": ["2", "5", "1", "4", "6"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "", "", ""], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "", "financial"], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", ""], [28, "", "", "technology"], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "", "", "technology"], [29, "JMO", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "", "Francine", "technology"], [29, "JMO", "Edith", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "energy"], [28, "", "Francine", "technology"], [29, "JMO", "Edith", "utilities"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "HBW", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "utilities"], [28, "JMO", "Francine", "technology"], [29, "ABTR", "Edith", "energy"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Color Blinds", "blue", ""], [2, "", "purple", "Prairie City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "Night Ninjas", "", ""]], "applied_clues": ["4", "11"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "Color Blinds", "blue", ""], [2, "", "", "Prairie City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "Color Blinds", "blue", ""], [2, "", "purple", "Prairie City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "Night Ninjas", "", ""]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Color Blinds", "blue", ""], [2, "", "purple", "Prairie City"], [3, "", "white", "Forest City"], [4, "", "", ""], [5, "", "", ""], [6, "Night Ninjas", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "Daryl", "", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "Daryl", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "Daryl", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "Seth", "", "gamma rays"], [4, "", "", ""], [5, "", "GX-13", "larval growth"]], "applied_clues": ["4", "8"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "larval growth"]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "Seth", "", "gamma rays"], [4, "", "", ""], [5, "", "GX-13", "larval growth"]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "WB-664", ""], [3, "Seth", "AV-435", "gamma rays"], [4, "", "ZF-15", ""], [5, "", "GX-13", "larval growth"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Portland"], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], "applied_clues": ["4", "5", "8"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Portland"], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Portland"], [30, "", "", ""], [33, "Winifred", "", ""], [36, "", 7, ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Springfield County Bird Club met today, and several of its members brought their newest acquisitions. Using only the clues below, match the months to the options from names and birds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nnames : Bonita, Joan, Laura, Roberta, Velma.\nbirds : finch, lorikeet, lovebird, macaw, parakeet.", "clues": {"1": {"text": "Velma's pet isn't the lovebird.", "conditions": "(T[r('Velma')][c('birds')] != 'lovebird')"}, "2": {"text": "Of the finch and the macaw, one was bought in January and the other is Laura's.", "conditions": "((T[r('finch')][c('months')] == 1 and T[r('macaw')][c('names')] == 'Laura') or (T[r('macaw')][c('months')] == 1 and T[r('finch')][c('names')] == 'Laura')) and (T[r(1)][c('names')] != 'Laura')"}, "3": {"text": "The bird bought in March is either Bonita's pet or the finch.", "conditions": "(T[r(3)][c('names')] == 'Bonita' or T[r(3)][c('birds')] == 'finch') and (T[r('Bonita')][c('birds')] != 'finch')"}, "4": {"text": "Joan's pet was bought 3 months before the lorikeet.", "conditions": "(T[r('Joan')][c('months')] + 3 == T[r('lorikeet')][c('months')])"}, "5": {"text": "The finch was bought sometime after Roberta's pet.", "conditions": "(T[r('finch')][c('months')] > T[r('Roberta')][c('months')])"}, "6": {"text": "Bonita's pet was bought in May.", "conditions": "(T[r('Bonita')][c('months')] == 5)"}, "7": {"text": "The macaw was bought 1 month before the parakeet.", "conditions": "(T[r('macaw')][c('months')] + 1 == T[r('parakeet')][c('months')])"}}, "initial": [["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], "current": [["months", "names", "birds"], [1, "", "finch"], [2, "", ""], [3, "", ""], [4, "Laura", "macaw"], [5, "", "parakeet"]], "applied_clues": ["2", "7"], "initial_to_current": [[["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "finch"], [2, "", ""], [3, "", ""], [4, "Laura", "macaw"], [5, "", ""]], [["months", "names", "birds"], [1, "", "finch"], [2, "", ""], [3, "", ""], [4, "Laura", "macaw"], [5, "", "parakeet"]]], "unsolvable_child": [["months", "names", "birds"], [1, "", "finch"], [2, "", ""], [3, "Bonita", ""], [4, "Laura", "macaw"], [5, "", "parakeet"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Roberta", "parakeet"], [3, "Laura", "finch"], [4, "Velma", "lorikeet"], [5, "Bonita", "lovebird"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3", "5", "2", "10", "1"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "red", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", "Yucca Valley"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "", "", ""], [225, "Zachary", "", "banana"]], "applied_clues": ["5", "2", "7", "11"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "", "", ""], [225, "Zachary", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "", "", ""], [225, "Zachary", "", "banana"]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "", "train", ""], [225, "Zachary", "", "banana"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "Zachary", "", ""], [225, "", "", ""]], "applied_clues": ["5", "2", "7"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "Zachary", "", ""], [225, "", "", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "Zachary", "", ""], [225, "", "", "banana"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Springfield County Bird Club met today, and several of its members brought their newest acquisitions. Using only the clues below, match the months to the options from names and birds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nnames : Bonita, Joan, Laura, Roberta, Velma.\nbirds : finch, lorikeet, lovebird, macaw, parakeet.", "clues": {"1": {"text": "Velma's pet isn't the lovebird.", "conditions": "(T[r('Velma')][c('birds')] != 'lovebird')"}, "2": {"text": "Of the finch and the macaw, one was bought in January and the other is Laura's.", "conditions": "((T[r('finch')][c('months')] == 1 and T[r('macaw')][c('names')] == 'Laura') or (T[r('macaw')][c('months')] == 1 and T[r('finch')][c('names')] == 'Laura')) and (T[r(1)][c('names')] != 'Laura')"}, "3": {"text": "The bird bought in March is either Bonita's pet or the finch.", "conditions": "(T[r(3)][c('names')] == 'Bonita' or T[r(3)][c('birds')] == 'finch') and (T[r('Bonita')][c('birds')] != 'finch')"}, "4": {"text": "Joan's pet was bought 3 months before the lorikeet.", "conditions": "(T[r('Joan')][c('months')] + 3 == T[r('lorikeet')][c('months')])"}, "5": {"text": "The finch was bought sometime after Roberta's pet.", "conditions": "(T[r('finch')][c('months')] > T[r('Roberta')][c('months')])"}, "6": {"text": "Bonita's pet was bought in May.", "conditions": "(T[r('Bonita')][c('months')] == 5)"}, "7": {"text": "The macaw was bought 1 month before the parakeet.", "conditions": "(T[r('macaw')][c('months')] + 1 == T[r('parakeet')][c('months')])"}}, "initial": [["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], "current": [["months", "names", "birds"], [1, "", "finch"], [2, "Laura", "macaw"], [3, "", ""], [4, "", ""], [5, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "finch"], [2, "Laura", "macaw"], [3, "", ""], [4, "", ""], [5, "", ""]]], "unsolvable_child": [["months", "names", "birds"], [1, "", "finch"], [2, "Laura", "macaw"], [3, "", "parakeet"], [4, "", ""], [5, "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Roberta", "parakeet"], [3, "Laura", "finch"], [4, "Velma", "lorikeet"], [5, "Bonita", "lovebird"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "Zachary", "beach chair", ""], [225, "", "", ""]], "applied_clues": ["5", "2", "7"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "Zachary", "beach chair", ""], [225, "", "", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "Zachary", "beach chair", ""], [225, "", "", "banana"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], "applied_clues": ["3", "12", "8"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 25, 26, 27, 28, 29.\nstock symbols : ABTR, HBW, JMO, KMPP, PSTO.\nclients : Abigail, Charlie, Edith, Francine, Heathcliff.\nsectors : energy, financial, technology, telecom, utilities.", "clues": {"1": {"text": "Of the stock that sold for $28 per share and PSTO, one was in the technology sector and the other was bought by Abigail.", "conditions": "((T[r(28)][c('sectors')] == 'technology' and T[r('PSTO')][c('clients')] == 'Abigail') or (T[r('PSTO')][c('sectors')] == 'technology' and T[r(28)][c('clients')] == 'Abigail')) and (T[r(28)][c('stock symbols')] != 'PSTO') and (T[r('technology')][c('clients')] != 'Abigail')"}, "2": {"text": "Of the telecom stock and the stock that sold for $27 per share, one was KMPP and the other was bought by Charlie.", "conditions": "((T[r('telecom')][c('stock symbols')] == 'KMPP' and T[r(27)][c('clients')] == 'Charlie') or (T[r(27)][c('stock symbols')] == 'KMPP' and T[r('telecom')][c('clients')] == 'Charlie')) and (T[r('telecom')][c('prices')] != 27) and (T[r('KMPP')][c('clients')] != 'Charlie')"}, "3": {"text": "The stock Edith bought was per share more expensive than the technology stock.", "conditions": "(T[r('Edith')][c('prices')] > T[r('technology')][c('prices')])"}, "4": {"text": "The five stocks were JMO, the stock that sold for $25 per share, the energy stock, the utilities stock and the financial stock.", "conditions": "(T[r(25)][c('stock symbols')] != 'JMO') and (T[r('energy')][c('stock symbols')] != 'JMO') and (T[r('utilities')][c('stock symbols')] != 'JMO') and (T[r('financial')][c('stock symbols')] != 'JMO') and (T[r('energy')][c('prices')] != 25) and (T[r('utilities')][c('prices')] != 25) and (T[r('financial')][c('prices')] != 25)"}, "5": {"text": "Of the financial stock and the stock Charlie bought, one was PSTO and the other sold for $25 per share.", "conditions": "((T[r('financial')][c('stock symbols')] == 'PSTO' and T[r('Charlie')][c('prices')] == 25) or (T[r('Charlie')][c('stock symbols')] == 'PSTO' and T[r('financial')][c('prices')] == 25)) and (T[r('financial')][c('clients')] != 'Charlie') and (T[r('PSTO')][c('prices')] != 25)"}, "6": {"text": "JMO was either the stock Edith bought or the stock Francine bought.", "conditions": "(T[r('JMO')][c('clients')] == 'Edith' or T[r('JMO')][c('clients')] == 'Francine')"}, "7": {"text": "The utilities stock was 2 dollars per share more expensive than HBW.", "conditions": "(T[r('utilities')][c('prices')] == T[r('HBW')][c('prices')] + 2)"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Francine", "energy"], [28, "", "", "technology"], [29, "JMO", "Edith", ""]], "applied_clues": ["2", "5", "1", "4", "6"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "", "", ""], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "", "financial"], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", ""], [28, "", "", "technology"], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "", "", "technology"], [29, "JMO", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Francine", "energy"], [28, "", "", "technology"], [29, "JMO", "Edith", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Francine", "energy"], [28, "", "Heathcliff", "technology"], [29, "JMO", "Edith", "utilities"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "HBW", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "utilities"], [28, "JMO", "Francine", "technology"], [29, "ABTR", "Edith", "energy"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], "applied_clues": ["6", "2", "11", "3"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "Liberty", ""]], "applied_clues": ["2", "10", "4"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "Liberty", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Escape", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "Liberty", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", "Mack truck"], [300, "", "", ""], [350, "", "", ""], [400, "Dream Machine", "Kimberly", "Airstream"]], "applied_clues": ["2", "1"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", "Airstream"]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", "Mack truck"], [300, "", "", ""], [350, "", "", ""], [400, "Dream Machine", "Kimberly", "Airstream"]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", "Mack truck"], [300, "Books-4-U", "", ""], [350, "Ready Reader", "", ""], [400, "Dream Machine", "Kimberly", "Airstream"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], "applied_clues": ["4", "5", "8", "2"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "Kimberly", "Mack truck"], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "Dream Machine", "Sheryl", ""]], "applied_clues": ["2", "1"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "Kimberly", "Mack truck"], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "Dream Machine", "Sheryl", ""]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Kimberly", "Mack truck"], [300, "Books-4-U", "", ""], [350, "Explore More", "", "Airstream"], [400, "Dream Machine", "Sheryl", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1", "3", "7"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Lena", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1", "3"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "", "violet", "Corinth"], [22, "Cesar", "white", "Waldoboro"], [23, "Orlando", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "gray", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", "Corinth"], [22, "Cesar", "white", "Waldoboro"], [23, "Orlando", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "gray", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "", "violet", "Corinth"], [22, "Cesar", "white", "Waldoboro"], [23, "Orlando", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "gray", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "Phyllis", "", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "applied_clues": ["1", "12", "3", "9"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "Phyllis", "", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Olga", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "Phyllis", "", "Honduras"], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "larval growth"]], "applied_clues": ["4"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "larval growth"]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "GX-13", "gamma rays"], [3, "", "", ""], [4, "", "", ""], [5, "Seth", "", "larval growth"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The U. S. Air Force is currently testing a number of new experimental, supersonic aircraft, each built by a different aerospace company. Using only the clues below, match the prices to the options from aircraft, companies, and top speeds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 100, 125, 150, 175.\naircraft : Darkwing 6, Falcon X-2, Kesseling, Raven 12.\ncompanies : Ale and Moore, Forsyth, Pittakan, Tenerife.\ntop speeds : Mach 2.3, Mach 2.9, Mach 3.2, Mach 3.4.", "clues": {"1": {"text": "The Darkwing 6 costs 50 million dollars more than the jet built by Tenerife.", "conditions": "(T[r('Darkwing 6')][c('prices')] == T[r('Tenerife')][c('prices')] + 50)"}, "2": {"text": "The Raven 12 doesn't cost $125 million.", "conditions": "(T[r('Raven 12')][c('prices')] != 125)"}, "3": {"text": "The plane with a top speed of Mach 3.2 costs more than the jet built by Tenerife.", "conditions": "(T[r('Mach 3.2')][c('prices')] > T[r('Tenerife')][c('prices')])"}, "4": {"text": "The aircraft with a top speed of Mach 2.9, the aircraft built by Forsyth, and the $150 million aircraft are three different jets.", "conditions": "(T[r('Mach 2.9')][c('companies')]!='Forsyth') and (T[r(150)][c('companies')]!='Forsyth') and (T[r(150)][c('top speeds')]!='Mach 3.2')"}, "5": {"text": "The plane with a top speed of Mach 2.9 is either the Raven 12 or the $100 million jet.", "conditions": "(T[r('Mach 2.9')][c('aircraft')] == 'Raven 12' or T[r('Mach 2.9')][c('prices')] == 100) and (T[r('Raven 12')][c('prices')] != 100)"}, "6": {"text": "The $125 million plane, the aircraft with a top speed of Mach 3.4 and the jet built by Forsyth are all different jets.", "conditions": "(T[r(125)][c('top speeds')] != 'Mach 3.4') and (T[r('Forsyth')][c('top speeds')] != 'Mach 3.4') and (T[r(125)][c('companies')]!='Forsyth')"}, "7": {"text": "The plane with a top speed of Mach 3.2 is either the plane built by Tenerife or the plane built by Pittakan.", "conditions": "(T[r('Mach 3.2')][c('companies')] == 'Tenerife' or T[r('Mach 3.2')][c('companies')] == 'Pittakan')"}, "8": {"text": "The Falcon X-2 was built by Tenerife.", "conditions": "(T[r('Falcon X-2')][c('companies')] == 'Tenerife')"}}, "initial": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], "current": [["prices", "aircraft", "companies", "top speeds"], [100, "", "Tenerife", "Mach 2.9"], [125, "", "Pittakan", "Mach 3.2"], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], "applied_clues": ["5", "2", "6", "4", "7"], "initial_to_current": [[["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", "Mach 3.2"], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "Tenerife", "Mach 2.9"], [125, "", "Pittakan", "Mach 3.2"], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]]], "unsolvable_child": [["prices", "aircraft", "companies", "top speeds"], [100, "", "Tenerife", "Mach 2.9"], [125, "", "Pittakan", "Mach 3.2"], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "aircraft", "companies", "top speeds"], [100, "Falcon X-2", "Tenerife", "Mach 2.9"], [125, "Kesseling", "Pittakan", "Mach 3.2"], [150, "Darkwing 6", "Ale and Moore", "Mach 3.4"], [175, "Raven 12", "Forsyth", "Mach 2.3"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", "alfalfa"], ["June 6th", "", "Paradise", ""], ["June 7th", "", "", ""]], "applied_clues": ["5", "4"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", "alfalfa"], ["June 6th", "", "Paradise", ""], ["June 7th", "", "", ""]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", "alfalfa"], ["June 6th", "Meadowgrove", "Paradise", ""], ["June 7th", "", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "Seth", "", "gamma rays"], [3, "", "", ""], [4, "", "", ""], [5, "", "GX-13", "larval growth"]], "applied_clues": ["4", "8"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "larval growth"]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "Seth", "", "gamma rays"], [3, "", "", ""], [4, "", "", ""], [5, "", "GX-13", "larval growth"]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "Seth", "WB-664", "gamma rays"], [3, "", "AV-435", ""], [4, "", "ZF-15", ""], [5, "", "GX-13", "larval growth"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Piper Hills Academy recently installed a high-speed 3-D printer in its technology lab, and several students were given an opportunity this week to use it in order to print items of their own design. Using only the clues below, match the times to the options from students, items, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 10, 15, 20, 25, 30, 35.\nstudents : Adrienne, Bertha, Eleanor, Felicia, Irma, Willis.\nitems : cup, flower, mask, phone case, skull, whistle.\ncolors : green, orange, purple, red, white, yellow.", "clues": {"1": {"text": "The skull took 5 more minutes to print than Bertha's piece.", "conditions": "(T[r('skull')][c('times')] == 5 + T[r('Bertha')][c('times')])"}, "2": {"text": "Of the red piece and the item that printed in 20 minutes, one was the mask and the other was Felicia's.", "conditions": "(((T[r('red')][c('items')] == 'mask' and T[r(20)][c('students')] == 'Felicia') or (T[r('red')][c('students')] == 'Felicia' and T[r(20)][c('items')] == 'mask'))) and (T[r(20)][c('colors')] != 'red') and (T[r('Felicia')][c('items')] != 'mask')"}, "3": {"text": "Willis's item wasn't the skull.", "conditions": "(T[r('Willis')][c('items')] != 'skull')"}, "4": {"text": "The item that printed in 25 minutes wasn't the phone case.", "conditions": "(T[r(25)][c('items')] != 'phone case')"}, "5": {"text": "Adrienne's piece was either the piece that printed in 10 minutes or the red item.", "conditions": "(T[r('Adrienne')][c('times')] == 10 or T[r('Adrienne')][c('colors')] == 'red') and (T[r(10)][c('colors')] != 'red')"}, "6": {"text": "Of the item that printed in 30 minutes and the item that printed in 20 minutes, one was Irma's and the other was the skull.", "conditions": "(((T[r(30)][c('students')] == 'Irma' and T[r(20)][c('items')] == 'skull') or (T[r(30)][c('items')] == 'skull' and T[r(20)][c('students')] == 'Irma'))) and (T[r('Irma')][c('items')] != 'skull')"}, "7": {"text": "Bertha's piece took 10 more minutes to print than the flower.", "conditions": "(T[r('Bertha')][c('times')] == 10 + T[r('flower')][c('times')])"}, "8": {"text": "The yellow design wasn't the phone case.", "conditions": "(T[r('yellow')][c('items')] != 'phone case')"}, "9": {"text": "Of the flower and the white design, one took 15 minutes to print and the other took 10 minutes to print.", "conditions": "(((T[r('flower')][c('times')] == 15 and T[r('white')][c('times')] == 10) or (T[r('flower')][c('times')] == 10 and T[r('white')][c('times')] == 15))) and (T[r('flower')][c('colors')] != 'white')"}, "10": {"text": "The cup required somewhat fewer minutes to print than Felicia's design.", "conditions": "(T[r('cup')][c('times')] < T[r('Felicia')][c('times')])"}, "11": {"text": "Felicia's design required 15 fewer minutes to print than the green item.", "conditions": "(T[r('Felicia')][c('times')] == T[r('green')][c('times')] - 15)"}, "12": {"text": "The orange design, the flower, Irma's item and the item that printed in 35 minutes were all different items.", "conditions": "(T[r('orange')][c('items')] != 'flower') and (T[r('orange')][c('students')] != 'Irma') and (T[r('orange')][c('times')] != 35) and (T[r('flower')][c('students')] != 'Irma') and (T[r('flower')][c('times')] != 35) and (T[r('Irma')][c('times')] != 35)"}}, "initial": [["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "current": [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Felicia", "skull", ""], [25, "", "", ""], [30, "Irma", "mask", "red"], [35, "", "", ""]], "applied_clues": ["9", "6", "2"], "initial_to_current": [[["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "skull", ""], [25, "", "", ""], [30, "Irma", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Felicia", "skull", ""], [25, "", "", ""], [30, "Irma", "mask", "red"], [35, "", "", ""]]], "unsolvable_child": [["times", "students", "items", "colors"], [10, "Adrienne", "flower", ""], [15, "", "", "white"], [20, "Felicia", "skull", ""], [25, "", "", ""], [30, "Irma", "mask", "red"], [35, "", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["times", "students", "items", "colors"], [10, "Adrienne", "cup", "white"], [15, "Felicia", "flower", "red"], [20, "Irma", "mask", "yellow"], [25, "Bertha", "whistle", "orange"], [30, "Eleanor", "skull", "green"], [35, "Willis", "phone case", "purple"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the nominations to the options from movies, directors, and genres. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "nominations : 2, 3, 4, 5.\nmovies : Silk Mist, The Illusion, Thorn of Suns, Wild Ones.\ndirectors : Danny Trevor, Gabby Jones, Tank Reznor, Virgil Katz.\ngenres : comedy, drama, romance, thriller.", "clues": {"1": {"text": "The thriller is either the movie that received 4 nominations or Wild Ones.", "conditions": "(T[r('thriller')][c('nominations')] == 4 or T[r('thriller')][c('movies')] == 'Wild Ones') and (T[r(4)][c('movies')] != 'Wild Ones')"}, "2": {"text": "The film directed by Virgil Katz received one more nomination than the film directed by Danny Trevor.", "conditions": "(T[r('Virgil Katz')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] + 1)"}, "3": {"text": "The movie directed by Gabby Jones is either the film that received 4 nominations or Thorn of Suns.", "conditions": "(T[r('Gabby Jones')][c('nominations')] == 4 or T[r('Gabby Jones')][c('movies')] == 'Thorn of Suns') and (T[r(4)][c('movies')] != 'Thorn of Suns')"}, "4": {"text": "The comedy was directed by Tank Reznor.", "conditions": "(T[r('comedy')][c('directors')] == 'Tank Reznor')"}, "5": {"text": "Wild Ones received one fewer nomination than the movie directed by Danny Trevor.", "conditions": "(T[r('Wild Ones')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] - 1)"}, "6": {"text": "Silk Mist was the drama.", "conditions": "(T[r('Silk Mist')][c('genres')] == 'drama')"}, "7": {"text": "The romance received more nominations than the movie directed by Tank Reznor.", "conditions": "(T[r('romance')][c('nominations')] > T[r('Tank Reznor')][c('nominations')])"}}, "initial": [["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "", ""], [4, "", "Gabby Jones", ""], [5, "Thorn of Suns", "", ""]], "applied_clues": ["1", "3"], "initial_to_current": [[["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "", ""], [4, "", "Gabby Jones", ""], [5, "Thorn of Suns", "", ""]]], "unsolvable_child": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "Danny Trevor", ""], [4, "", "Gabby Jones", ""], [5, "Thorn of Suns", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "comedy"], [3, "Silk Mist", "Danny Trevor", "drama"], [4, "The Illusion", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", "romance"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "Zachary", "beach chair", "banana"]], "applied_clues": ["5", "2", "7", "11"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "Zachary", "beach chair", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "Zachary", "beach chair", "banana"]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "train", ""], [200, "", "", ""], [225, "Zachary", "beach chair", "banana"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the nominations to the options from movies, directors, and genres. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "nominations : 2, 3, 4, 5.\nmovies : Silk Mist, The Illusion, Thorn of Suns, Wild Ones.\ndirectors : Danny Trevor, Gabby Jones, Tank Reznor, Virgil Katz.\ngenres : comedy, drama, romance, thriller.", "clues": {"1": {"text": "The thriller is either the movie that received 4 nominations or Wild Ones.", "conditions": "(T[r('thriller')][c('nominations')] == 4 or T[r('thriller')][c('movies')] == 'Wild Ones') and (T[r(4)][c('movies')] != 'Wild Ones')"}, "2": {"text": "The film directed by Virgil Katz received one more nomination than the film directed by Danny Trevor.", "conditions": "(T[r('Virgil Katz')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] + 1)"}, "3": {"text": "The movie directed by Gabby Jones is either the film that received 4 nominations or Thorn of Suns.", "conditions": "(T[r('Gabby Jones')][c('nominations')] == 4 or T[r('Gabby Jones')][c('movies')] == 'Thorn of Suns') and (T[r(4)][c('movies')] != 'Thorn of Suns')"}, "4": {"text": "The comedy was directed by Tank Reznor.", "conditions": "(T[r('comedy')][c('directors')] == 'Tank Reznor')"}, "5": {"text": "Wild Ones received one fewer nomination than the movie directed by Danny Trevor.", "conditions": "(T[r('Wild Ones')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] - 1)"}, "6": {"text": "Silk Mist was the drama.", "conditions": "(T[r('Silk Mist')][c('genres')] == 'drama')"}, "7": {"text": "The romance received more nominations than the movie directed by Tank Reznor.", "conditions": "(T[r('romance')][c('nominations')] > T[r('Tank Reznor')][c('nominations')])"}}, "initial": [["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "Thorn of Suns", "", ""], [4, "", "Gabby Jones", ""], [5, "", "", ""]], "applied_clues": ["1", "3"], "initial_to_current": [[["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "Thorn of Suns", "", ""], [4, "", "Gabby Jones", ""], [5, "", "", ""]]], "unsolvable_child": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "Thorn of Suns", "Danny Trevor", ""], [4, "", "Gabby Jones", ""], [5, "", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "comedy"], [3, "Silk Mist", "Danny Trevor", "drama"], [4, "The Illusion", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", "romance"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], "applied_clues": ["3", "12", "8", "6"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "Daryl", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "Orlando", "", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Daryl", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "Orlando", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Daryl", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "Orlando", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], "applied_clues": ["3", "12"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], "applied_clues": ["7"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Phyllis", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "applied_clues": ["1", "12", "3", "9"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Phyllis", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Olga", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Phyllis", "", ""], [90, "Lonnie", "black widow", "Honduras"], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "chainsaws", ""], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]], "applied_clues": ["7", "10", "6"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "chainsaws", ""], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "", "", "Selma"], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "chainsaws", ""], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "", "chainsaws", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]], "applied_clues": ["7", "10", "6"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "chainsaws", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "", "chainsaws", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", "Selma"], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", "Kansas"], [75, "Etsalle", "MRT-628", ""], [100, "", "", ""]], "applied_clues": ["4", "3"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", "Kansas"], [75, "Etsalle", "MRT-628", ""], [100, "", "", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "", "BMG-831", ""], [50, "Injitsu", "", "Kansas"], [75, "Etsalle", "MRT-628", ""], [100, "", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "Ken", "", "Hank Hensley"], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5", "8", "4"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "Ken", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "Ken", "", "Hank Hensley"], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Yvette", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", "Dale Durham"], [22, "Ken", "", "Hank Hensley"], [29, "Sherrie", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", "alfalfa"], ["June 6th", "Lucky Star", "Paradise", "soy"], ["June 7th", "", "", ""]], "applied_clues": ["5", "4"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "Lucky Star", "", "soy"], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", "alfalfa"], ["June 6th", "Lucky Star", "Paradise", "soy"], ["June 7th", "", "", ""]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", "alfalfa"], ["June 6th", "Lucky Star", "Paradise", "soy"], ["June 7th", "Meadowgrove", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "75 million", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], "applied_clues": ["6", "2", "11", "3", "4"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "75 million", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "75 million", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "75 million", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "Edith", "financial"], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], "applied_clues": ["10"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "Edith", "financial"], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "GXTV", "", "real estate"], [26, "", "", ""], [27, "", "Edith", "financial"], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "", "New Zealand"]], "applied_clues": ["6", "2", "11"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "90 million", "New Zealand"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], "applied_clues": ["6"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "Orlando", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", "Bull Creek"]], "applied_clues": ["4", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "Orlando", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "Orlando", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", "Bull Creek"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "Orlando", "Lake Jesup"], [10, "", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "Liberty", ""]], "applied_clues": ["2", "10", "4"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "Liberty", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "Escape", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Yvonne", "", ""], [8, "", "Liberty", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "Lucky Star", "Paradise", "soy"], ["June 7th", "", "", "alfalfa"]], "applied_clues": ["5", "4"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "Lucky Star", "", "soy"], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "Lucky Star", "Paradise", "soy"], ["June 7th", "", "", "alfalfa"]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Meadowgrove", "", ""], ["June 6th", "Lucky Star", "Paradise", "soy"], ["June 7th", "", "", "alfalfa"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Nicholas and Edith are having a small dinner party this evening at their home in Cedar Valley, and they've decided to open a select number of rare wines from their personal collection to celebrate the occasion. Using only the clues below, match the vintages to the options from wines and types. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "vintages : 1984, 1988, 1992, 1996.\nwines : Annata Branco, Bianca Flaux, Ece Suss, Vendemmia.\ntypes : gewurztraminer, merlot, pinot noir, riesling.", "clues": {"1": {"text": "The Ece Suss was bottled sometime after the Annata Branco.", "conditions": "(T[r('Ece Suss')][c('vintages')] > T[r('Annata Branco')][c('vintages')])"}, "2": {"text": "The Bianca Flaux was bottled 4 years before the Vendemmia.", "conditions": "(T[r('Vendemmia')][c('vintages')] - T[r('Bianca Flaux')][c('vintages')] == 4)"}, "3": {"text": "The 1988 bottle is a pinot noir.", "conditions": "(T[r(1988)][c('types')] == 'pinot noir')"}, "4": {"text": "The merlot is either the Annata Branco or the Bianca Flaux.", "conditions": "(T[r('merlot')][c('wines')] == 'Annata Branco' or T[r('merlot')][c('wines')] == 'Bianca Flaux')"}, "5": {"text": "The Bianca Flaux was bottled sometime after the Ece Suss.", "conditions": "(T[r('Bianca Flaux')][c('vintages')] > T[r('Ece Suss')][c('vintages')])"}, "6": {"text": "The 1984 bottle is a gewurztraminer.", "conditions": "(T[r(1984)][c('types')] == 'gewurztraminer')"}}, "initial": [["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], "current": [["vintages", "wines", "types"], [1984, "", ""], [1988, "Bianca Flaux", ""], [1992, "Vendemmia", ""], [1996, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], [["vintages", "wines", "types"], [1984, "", ""], [1988, "Bianca Flaux", ""], [1992, "Vendemmia", ""], [1996, "", ""]]], "unsolvable_child": [["vintages", "wines", "types"], [1984, "Annata Branco", "merlot"], [1988, "Bianca Flaux", ""], [1992, "Vendemmia", ""], [1996, "Ece Suss", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["vintages", "wines", "types"], [1984, "Annata Branco", "gewurztraminer"], [1988, "Ece Suss", "pinot noir"], [1992, "Bianca Flaux", "merlot"], [1996, "Vendemmia", "riesling"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "mobile phones", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], "applied_clues": ["7", "10", "6", "8", "9", "4", "11", "2", "3"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "mobile phones", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "mobile phones", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Ken", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", "Fred Fuentes"], [15, "Wayne", "Frogs of Iowa", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Lake Jesup"], [9, "", "Cassia"], [10, "", ""], [11, "", ""], [12, "", ""]], "applied_clues": ["1"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Lake Jesup"], [9, "", "Cassia"], [10, "", ""], [11, "", ""], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Lake Jesup"], [9, "", "Cassia"], [10, "Alex", ""], [11, "", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", "Corinth"], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "gray", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", "Corinth"], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "gray", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", "Corinth"], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "gray", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the nominations to the options from movies, directors, and genres. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "nominations : 2, 3, 4, 5.\nmovies : Silk Mist, The Illusion, Thorn of Suns, Wild Ones.\ndirectors : Danny Trevor, Gabby Jones, Tank Reznor, Virgil Katz.\ngenres : comedy, drama, romance, thriller.", "clues": {"1": {"text": "The thriller is either the movie that received 4 nominations or Wild Ones.", "conditions": "(T[r('thriller')][c('nominations')] == 4 or T[r('thriller')][c('movies')] == 'Wild Ones') and (T[r(4)][c('movies')] != 'Wild Ones')"}, "2": {"text": "The film directed by Virgil Katz received one more nomination than the film directed by Danny Trevor.", "conditions": "(T[r('Virgil Katz')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] + 1)"}, "3": {"text": "The movie directed by Gabby Jones is either the film that received 4 nominations or Thorn of Suns.", "conditions": "(T[r('Gabby Jones')][c('nominations')] == 4 or T[r('Gabby Jones')][c('movies')] == 'Thorn of Suns') and (T[r(4)][c('movies')] != 'Thorn of Suns')"}, "4": {"text": "The comedy was directed by Tank Reznor.", "conditions": "(T[r('comedy')][c('directors')] == 'Tank Reznor')"}, "5": {"text": "Wild Ones received one fewer nomination than the movie directed by Danny Trevor.", "conditions": "(T[r('Wild Ones')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] - 1)"}, "6": {"text": "Silk Mist was the drama.", "conditions": "(T[r('Silk Mist')][c('genres')] == 'drama')"}, "7": {"text": "The romance received more nominations than the movie directed by Tank Reznor.", "conditions": "(T[r('romance')][c('nominations')] > T[r('Tank Reznor')][c('nominations')])"}}, "initial": [["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "", ""], [4, "", "", ""], [5, "Thorn of Suns", "Gabby Jones", ""]], "applied_clues": ["1", "3"], "initial_to_current": [[["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "", ""], [4, "", "", ""], [5, "Thorn of Suns", "Gabby Jones", ""]]], "unsolvable_child": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", "thriller"], [3, "", "Danny Trevor", ""], [4, "", "", ""], [5, "Thorn of Suns", "Gabby Jones", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "comedy"], [3, "Silk Mist", "Danny Trevor", "drama"], [4, "The Illusion", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", "romance"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The international desk at the Herald News-Times sent out a number of its top reporters to cover breaking stories in various parts of the world this week. Using only the clues below, match the days to the options from reporters and stories. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days :4, 5, 6, 7.\nreporters : Linda Lott, Randy Reid, Sid Snyder, Tam Terry.\nstories : earthquake, flooding, royal wedding, solar eclipse.", "clues": {"1": {"text": "The four people were the reporter sent out on April 7th, the reporter who covered the solar eclipse, the journalist who covered the earthquake and Randy Reid.", "conditions": "(T[r(7)][c('stories')] != 'solar eclipse') and (T[r(7)][c('stories')] != 'earthquake') and (T[r(7)][c('reporters')]!='Randy Reid') and (T[r('solar eclipse')][c('reporters')]!='Randy Reid') and (T[r('earthquake')][c('reporters')]!='Randy Reid')"}, "2": {"text": "Sid Snyder left 1 day after Tam Terry.", "conditions": "(T[r('Sid Snyder')][c('days')] - T[r('Tam Terry')][c('days')] == 1)"}, "3": {"text": "Randy Reid left 1 day after the journalist who covered the solar eclipse.", "conditions": "(T[r('Randy Reid')][c('days')] - T[r('solar eclipse')][c('days')] == 1)"}, "4": {"text": "Linda Lott left 1 day before the journalist who covered the flooding.", "conditions": "(T[r('flooding')][c('days')] - T[r('Linda Lott')][c('days')] == 1)"}}, "initial": [["days", "reporters", "stories"], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "reporters", "stories"], [4, "", ""], [5, "Tam Terry", ""], [6, "Sid Snyder", "solar eclipse"], [7, "Randy Reid", ""]], "applied_clues": ["2", "3"], "initial_to_current": [[["days", "reporters", "stories"], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "reporters", "stories"], [4, "", ""], [5, "Tam Terry", ""], [6, "Sid Snyder", ""], [7, "", ""]], [["days", "reporters", "stories"], [4, "", ""], [5, "Tam Terry", ""], [6, "Sid Snyder", "solar eclipse"], [7, "Randy Reid", ""]]], "unsolvable_child": [["days", "reporters", "stories"], [4, "Linda Lott", ""], [5, "Tam Terry", "flooding"], [6, "Sid Snyder", "solar eclipse"], [7, "Randy Reid", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["days", "reporters", "stories"], [4, "Linda Lott", "solar eclipse"], [5, "Randy Reid", "flooding"], [6, "Tam Terry", "earthquake"], [7, "Sid Snyder", "royal wedding"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "Lena", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1", "3", "7", "8"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Irene", ""], ["11:30am", "", "Lena", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "Crystal", "Irene", ""], ["11:30am", "", "Lena", "free weights"], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "", "", ""]], "applied_clues": ["2", "10"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "Yvonne", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "", "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers and trainers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 8, 9, 10, 11, 12.\ncustomers : Arnold, Blake, Danny, Emma, Garrett.\ntrainers : Howard, Irene, Jimmy, Kristin, Nicholas.", "clues": {"1": {"text": "Danny's appointment is 1 hour before the appointment with Irene.", "conditions": "(T[r('Danny')][c('times')] == T[r('Irene')][c('times')] - 1)"}, "2": {"text": "Of the lesson with Irene and the session at 11am, one is Emma's and the other is Blake's.", "conditions": "(T[r('Emma')][c('trainers')] == 'Irene' and T[r('Blake')][c('times')] == 11 or T[r('Blake')][c('trainers')] == 'Irene' and T[r('Emma')][c('times')] == 11) and (T[r('Irene')][c('times')] != 11)"}, "3": {"text": "The lesson at 8 am is either Emma's lesson or the appointment with Jimmy.", "conditions": "(T[r('Emma')][c('times')] == 8 or T[r('Jimmy')][c('times')] == 8) and (T[r('Emma')][c('trainers')] != 'Jimmy')"}, "4": {"text": "The session at 12 am is with Howard.", "conditions": "(T[r(12)][c('trainers')] == 'Howard')"}, "5": {"text": "The appointment at 11 am isn't with Nicholas.", "conditions": "(T[r(11)][c('trainers')] != 'Nicholas')"}, "6": {"text": "Emma's session is 2 hours after Arnold's lesson.", "conditions": "(T[r('Emma')][c('times')] == T[r('Arnold')][c('times')] + 2)"}}, "initial": [["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["times", "customers", "trainers"], [8, "", "Jimmy"], [9, "", ""], [10, "Blake", "Irene"], [11, "Emma", ""], [12, "", ""]], "applied_clues": ["2", "3"], "initial_to_current": [[["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "Blake", "Irene"], [11, "Emma", ""], [12, "", ""]], [["times", "customers", "trainers"], [8, "", "Jimmy"], [9, "", ""], [10, "Blake", "Irene"], [11, "Emma", ""], [12, "", ""]]], "unsolvable_child": [["times", "customers", "trainers"], [8, "", "Jimmy"], [9, "Arnold", ""], [10, "Blake", "Irene"], [11, "Emma", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["times", "customers", "trainers"], [8, "Arnold", "Jimmy"], [9, "Danny", "Nicholas"], [10, "Emma", "Irene"], [11, "Blake", "Kristin"], [12, "Garrett", "Howard"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "Seth", "", "gamma rays"], [5, "", "GX-13", "larval growth"]], "applied_clues": ["4", "8"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "larval growth"]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "Seth", "", "gamma rays"], [5, "", "GX-13", "larval growth"]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "WB-664", ""], [3, "", "AV-435", ""], [4, "Seth", "ZF-15", "gamma rays"], [5, "", "GX-13", "larval growth"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The U. S. Air Force is currently testing a number of new experimental, supersonic aircraft, each built by a different aerospace company. Using only the clues below, match the prices to the options from aircraft, companies, and top speeds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 100, 125, 150, 175.\naircraft : Darkwing 6, Falcon X-2, Kesseling, Raven 12.\ncompanies : Ale and Moore, Forsyth, Pittakan, Tenerife.\ntop speeds : Mach 2.3, Mach 2.9, Mach 3.2, Mach 3.4.", "clues": {"1": {"text": "The Darkwing 6 costs 50 million dollars more than the jet built by Tenerife.", "conditions": "(T[r('Darkwing 6')][c('prices')] == T[r('Tenerife')][c('prices')] + 50)"}, "2": {"text": "The Raven 12 doesn't cost $125 million.", "conditions": "(T[r('Raven 12')][c('prices')] != 125)"}, "3": {"text": "The plane with a top speed of Mach 3.2 costs more than the jet built by Tenerife.", "conditions": "(T[r('Mach 3.2')][c('prices')] > T[r('Tenerife')][c('prices')])"}, "4": {"text": "The aircraft with a top speed of Mach 2.9, the aircraft built by Forsyth, and the $150 million aircraft are three different jets.", "conditions": "(T[r('Mach 2.9')][c('companies')]!='Forsyth') and (T[r(150)][c('companies')]!='Forsyth') and (T[r(150)][c('top speeds')]!='Mach 3.2')"}, "5": {"text": "The plane with a top speed of Mach 2.9 is either the Raven 12 or the $100 million jet.", "conditions": "(T[r('Mach 2.9')][c('aircraft')] == 'Raven 12' or T[r('Mach 2.9')][c('prices')] == 100) and (T[r('Raven 12')][c('prices')] != 100)"}, "6": {"text": "The $125 million plane, the aircraft with a top speed of Mach 3.4 and the jet built by Forsyth are all different jets.", "conditions": "(T[r(125)][c('top speeds')] != 'Mach 3.4') and (T[r('Forsyth')][c('top speeds')] != 'Mach 3.4') and (T[r(125)][c('companies')]!='Forsyth')"}, "7": {"text": "The plane with a top speed of Mach 3.2 is either the plane built by Tenerife or the plane built by Pittakan.", "conditions": "(T[r('Mach 3.2')][c('companies')] == 'Tenerife' or T[r('Mach 3.2')][c('companies')] == 'Pittakan')"}, "8": {"text": "The Falcon X-2 was built by Tenerife.", "conditions": "(T[r('Falcon X-2')][c('companies')] == 'Tenerife')"}}, "initial": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], "current": [["prices", "aircraft", "companies", "top speeds"], [100, "", "Tenerife", "Mach 2.9"], [125, "", "Pittakan", "Mach 3.2"], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], "applied_clues": ["5", "2", "6", "4", "7", "3"], "initial_to_current": [[["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", "Mach 3.2"], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "Tenerife", "Mach 2.9"], [125, "", "Pittakan", "Mach 3.2"], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "Tenerife", "Mach 2.9"], [125, "", "Pittakan", "Mach 3.2"], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]]], "unsolvable_child": [["prices", "aircraft", "companies", "top speeds"], [100, "Falcon X-2", "Tenerife", "Mach 2.9"], [125, "", "Pittakan", "Mach 3.2"], [150, "Raven 12", "Ale and Moore", "Mach 3.4"], [175, "", "Forsyth", "Mach 2.3"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["prices", "aircraft", "companies", "top speeds"], [100, "Falcon X-2", "Tenerife", "Mach 2.9"], [125, "Kesseling", "Pittakan", "Mach 3.2"], [150, "Darkwing 6", "Ale and Moore", "Mach 3.4"], [175, "Raven 12", "Forsyth", "Mach 2.3"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "applied_clues": ["9"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", ""]], "applied_clues": ["1", "5"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", "Green Swamp"], [11, "", ""], [12, "Alex", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], "applied_clues": ["2", "10"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "Yvonne", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "Gene", "", "goblin"], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "", "Green Swamp"], [9, "", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "Alex", ""]], "applied_clues": ["1", "5", "7"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "Alex", ""]], [["distances", "hikers", "start points"], [8, "", "Green Swamp"], [9, "", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "Alex", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "", "Green Swamp"], [9, "Danielle", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "Alex", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", "alfalfa"], ["June 6th", "Meadowgrove", "Paradise", ""], ["June 7th", "", "", ""]], "applied_clues": ["5", "4", "6"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", "alfalfa"], ["June 6th", "", "Paradise", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", "alfalfa"], ["June 6th", "Meadowgrove", "Paradise", ""], ["June 7th", "", "", ""]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", "alfalfa"], ["June 6th", "Meadowgrove", "Paradise", "beets"], ["June 7th", "", "", "potatoes"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", "Yucca Valley"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3", "5", "2", "10", "1", "8"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "red", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", "Yucca Valley"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", "Yucca Valley"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", "Corinth"]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", "Corinth"]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", "Corinth"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]], "applied_clues": ["7", "10", "6"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", "Selma"], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], "applied_clues": ["10"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "GXTV", "", "real estate"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Bushnell County is putting together a historical brochure about some of the ancient cultures that used to live there. Using only the clues below, match the years to the options from cultures and populations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "years : 100, 350, 600, 850.\ncultures : Budel, Hatgare, Oiracha, Sameos.\npopulations : 4500, 5000, 7500, 9500.", "clues": {"1": {"text": "The Oiracha culture, the culture founded in 850 AD and the culture with 4500 people were all different cultures.", "conditions": "(T[r(850)][c('cultures')] != 'Oiracha') and (T[r(4500)][c('cultures')] != 'Oiracha') and (T[r(4500)][c('years')] != 850)"}, "2": {"text": "The culture with 9500 people was founded sometime before the culture with 4500 people.", "conditions": "(T[r(9500)][c('years')]<T[r(4500)][c('years')])"}, "3": {"text": "Of the culture with 4500 people and the culture with 9500 people, one was the Budel culture and the other was founded in 600 AD.", "conditions": "((T[r(4500)][c('cultures')]== 'Budel' and T[r(9500)][c('years')]== 600) or (T[r(4500)][c('years')]== 600 and T[r(9500)][c('cultures')]== 'Budel')) and (T[r(600)][c('cultures')]!= 'Budel')"}, "4": {"text": "The culture with 5000 people was founded 250 years before the culture with 9500 people.", "conditions": "(T[r(5000)][c('years')] + 250 == T[r(9500)][c('years')])"}, "5": {"text": "The Sameos culture was founded 250 years before the culture with 7500 people.", "conditions": "(T[r('Sameos')][c('years')] + 250 == T[r(7500)][c('years')])"}}, "initial": [["years", "cultures", "populations"], [100, "", ""], [350, "", ""], [600, "", ""], [850, "", ""]], "current": [["years", "cultures", "populations"], [100, "", ""], [350, "Budel", 4500], [600, "", 9500], [850, "", ""]], "applied_clues": ["3"], "initial_to_current": [[["years", "cultures", "populations"], [100, "", ""], [350, "", ""], [600, "", ""], [850, "", ""]], [["years", "cultures", "populations"], [100, "", ""], [350, "Budel", 4500], [600, "", 9500], [850, "", ""]]], "unsolvable_child": [["years", "cultures", "populations"], [100, "Oiracha", ""], [350, "Budel", 4500], [600, "", 9500], [850, "", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["years", "cultures", "populations"], [100, "Oiracha", 5000], [350, "Budel", 9500], [600, "Sameos", 4500], [850, "Hatgare", 7500]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Bill is shopping for a digital camera. Using only the clues below, match the prices to the options from companies and cameras. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices (dollars) : 550, 575, 600, 625.\ncompanies : Dayero, Lirios, Nectron, Torvia.\ncameras : DM-5000, Lectra 6, Tela G5, Zenix 2C.", "clues": {"1": {"text": "The camera made by Lirios costs 25 dollars more than the model made by Torvia.", "conditions": "(T[r('Lirios')][c('prices')] == T[r('Torvia')][c('prices')] + 25)"}, "2": {"text": "The Zenix 2C costs more than the model made by Torvia.", "conditions": "(T[r('Zenix 2C')][c('prices')] > T[r('Torvia')][c('prices')])"}, "3": {"text": "Of the camera made by Torvia and the model made by Nectron, one is the Tela G5 and the other costs $550.", "conditions": "((T[r('Torvia')][c('cameras')] == 'Tela G5' and T[r(550)][c('companies')] == 'Nectron') or (T[r('Nectron')][c('cameras')] == 'Tela G5' and T[r(550)][c('companies')] == 'Torvia')) and (T[r(550)][c('cameras')] != 'Tela G5') and (T[r('Torvia')][c('companies')] != 'Nectron')"}, "4": {"text": "The camera made by Lirios is the Lectra 6.", "conditions": "(T[r('Lirios')][c('cameras')] == 'Lectra 6')"}, "5": {"text": "The Tela G5 costs 25 dollars more than the Zenix 2C.", "conditions": "(T[r('Tela G5')][c('prices')] == T[r('Zenix 2C')][c('prices')] + 25)"}}, "initial": [["prices", "companies", "cameras"], [550, "", ""], [575, "", ""], [600, "", ""], [625, "", ""]], "current": [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "Lirios", "Zenix 2C"], [600, "Nectron", "Tela G5"], [625, "", ""]], "applied_clues": ["3", "1", "5"], "initial_to_current": [[["prices", "companies", "cameras"], [550, "", ""], [575, "", ""], [600, "", ""], [625, "", ""]], [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "", ""], [600, "Nectron", "Tela G5"], [625, "", ""]], [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "Lirios", ""], [600, "Nectron", "Tela G5"], [625, "", ""]], [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "Lirios", "Zenix 2C"], [600, "Nectron", "Tela G5"], [625, "", ""]]], "unsolvable_child": [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "Lirios", "Zenix 2C"], [600, "Nectron", "Tela G5"], [625, "Dayero", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "companies", "cameras"], [550, "Torvia", "DM-5000"], [575, "Lirios", "Lectra 6"], [600, "Dayero", "Zenix 2C"], [625, "Nectron", "Tela G5"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The international desk at the Herald News-Times sent out a number of its top reporters to cover breaking stories in various parts of the world this week. Using only the clues below, match the days to the options from reporters and stories. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days :4, 5, 6, 7.\nreporters : Linda Lott, Randy Reid, Sid Snyder, Tam Terry.\nstories : earthquake, flooding, royal wedding, solar eclipse.", "clues": {"1": {"text": "The four people were the reporter sent out on April 7th, the reporter who covered the solar eclipse, the journalist who covered the earthquake and Randy Reid.", "conditions": "(T[r(7)][c('stories')] != 'solar eclipse') and (T[r(7)][c('stories')] != 'earthquake') and (T[r(7)][c('reporters')]!='Randy Reid') and (T[r('solar eclipse')][c('reporters')]!='Randy Reid') and (T[r('earthquake')][c('reporters')]!='Randy Reid')"}, "2": {"text": "Sid Snyder left 1 day after Tam Terry.", "conditions": "(T[r('Sid Snyder')][c('days')] - T[r('Tam Terry')][c('days')] == 1)"}, "3": {"text": "Randy Reid left 1 day after the journalist who covered the solar eclipse.", "conditions": "(T[r('Randy Reid')][c('days')] - T[r('solar eclipse')][c('days')] == 1)"}, "4": {"text": "Linda Lott left 1 day before the journalist who covered the flooding.", "conditions": "(T[r('flooding')][c('days')] - T[r('Linda Lott')][c('days')] == 1)"}}, "initial": [["days", "reporters", "stories"], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "reporters", "stories"], [4, "Tam Terry", ""], [5, "Sid Snyder", ""], [6, "", ""], [7, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["days", "reporters", "stories"], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "reporters", "stories"], [4, "Tam Terry", ""], [5, "Sid Snyder", ""], [6, "", ""], [7, "", ""]]], "unsolvable_child": [["days", "reporters", "stories"], [4, "Tam Terry", ""], [5, "Sid Snyder", "solar eclipse"], [6, "Randy Reid", ""], [7, "Linda Lott", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["days", "reporters", "stories"], [4, "Linda Lott", "solar eclipse"], [5, "Randy Reid", "flooding"], [6, "Tam Terry", "earthquake"], [7, "Sid Snyder", "royal wedding"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "", "", ""], [225, "Zachary", "", "banana"]], "applied_clues": ["5", "2", "7", "11"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "", "", ""], [225, "Zachary", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "", "", ""], [225, "Zachary", "", "banana"]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "", "train", ""], [225, "Zachary", "", "banana"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", "Green Swamp"]], "applied_clues": ["1", "5", "7", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", "Green Swamp"]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", "Green Swamp"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", "Green Swamp"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "GXTV", "", "real estate"], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "GXTV", "", "real estate"], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "GXTV", "", "real estate"], [29, "JMO", "Heathcliff", "telecom"], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "", "black", ""], [48, "", "", ""], [55, "", "", ""], [62, "Felix", "gray", "Toledo"], [69, "", "", "Oakland Acres"]], "applied_clues": ["1", "3"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "Felix", "gray", ""], [69, "", "", "Oakland Acres"]], [["scores", "players", "colors", "hometowns"], [41, "", "black", ""], [48, "", "", ""], [55, "", "", ""], [62, "Felix", "gray", "Toledo"], [69, "", "", "Oakland Acres"]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "Tom", "black", ""], [48, "", "", ""], [55, "", "", ""], [62, "Felix", "gray", "Toledo"], [69, "", "", "Oakland Acres"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "applied_clues": ["5"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "\"Parties Unlimited\" caters to a wide variety of special requests (such as clowns or magicians) for its clients. Using only the clues below, match the days to the options from requests and families. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 3, 4, 5, 6, 7.\nrequests : clown, petting zoo, photo booth, rock band, superhero.\nfamilies : Benton, Hayden, Ingram, Stanley, Zimmerman.", "clues": {"1": {"text": "The party on October 5 is for the Ingrams.", "conditions": "(T[r(5)][c('families')] == 'Ingram')"}, "2": {"text": "The booking that requested the clown is sometime after the Ingram family booking.", "conditions": "(T[r('clown')][c('days')] > T[r('Ingram')][c('days')])"}, "3": {"text": "The booking on October 4 is either the party that requested the petting zoo or the Hayden family booking.", "conditions": "(T[r(4)][c('requests')] == 'petting zoo' or T[r(4)][c('families')] == 'Hayden') and (T[r('Hayden')][c('requests')] != 'petting zoo')"}, "4": {"text": "The five events are the booking on October 7, the party that requested the rock band, the event that requested the superhero, the Ingram family party and the Benton family party.", "conditions": "(T[r('rock band')][c('days')] != 7) and (T[r('superhero')][c('days')] != 7) and (T[r('Ingram')][c('days')] != 7) and (T[r('Benton')][c('days')] != 7) and (T[r('rock band')][c('families')] != 'Ingram') and (T[r('rock band')][c('families')] != 'Benton') and (T[r('superhero')][c('families')] != 'Ingram') and (T[r('superhero')][c('families')] != 'Benton')"}, "5": {"text": "The booking that requested the photo booth is either the event on October 6 or the event on October 3.", "conditions": "(T[r('photo booth')][c('days')] == 6 or T[r('photo booth')][c('days')] == 3)"}, "6": {"text": "The Ingram family booking is 1 day before the booking that requested the superhero.", "conditions": "(T[r('Ingram')][c('days')] == T[r('superhero')][c('days')] - 1)"}, "7": {"text": "The party that requested the superhero is for the Zimmermans.", "conditions": "(T[r('superhero')][c('families')] == 'Zimmerman')"}}, "initial": [["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", ""], [6, "", ""], [7, "", "Hayden"]], "applied_clues": ["5", "3"], "initial_to_current": [[["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", ""], [6, "", ""], [7, "", "Hayden"]]], "unsolvable_child": [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", "Ingram"], [6, "", ""], [7, "", "Hayden"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["days", "requests", "families"], [3, "photo booth", "Benton"], [4, "rock band", "Hayden"], [5, "petting zoo", "Ingram"], [6, "superhero", "Zimmerman"], [7, "clown", "Stanley"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", ""]], "applied_clues": ["1", "5"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "Phyllis", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "applied_clues": ["1", "12", "3", "9"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "Phyllis", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "raft spider", ""], [120, "", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Olga", "", "Spain"], [60, "Phyllis", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", "Honduras"], [105, "Yvette", "raft spider", ""], [120, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Springfield County Bird Club met today, and several of its members brought their newest acquisitions. Using only the clues below, match the months to the options from names and birds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nnames : Bonita, Joan, Laura, Roberta, Velma.\nbirds : finch, lorikeet, lovebird, macaw, parakeet.", "clues": {"1": {"text": "Velma's pet isn't the lovebird.", "conditions": "(T[r('Velma')][c('birds')] != 'lovebird')"}, "2": {"text": "Of the finch and the macaw, one was bought in January and the other is Laura's.", "conditions": "((T[r('finch')][c('months')] == 1 and T[r('macaw')][c('names')] == 'Laura') or (T[r('macaw')][c('months')] == 1 and T[r('finch')][c('names')] == 'Laura')) and (T[r(1)][c('names')] != 'Laura')"}, "3": {"text": "The bird bought in March is either Bonita's pet or the finch.", "conditions": "(T[r(3)][c('names')] == 'Bonita' or T[r(3)][c('birds')] == 'finch') and (T[r('Bonita')][c('birds')] != 'finch')"}, "4": {"text": "Joan's pet was bought 3 months before the lorikeet.", "conditions": "(T[r('Joan')][c('months')] + 3 == T[r('lorikeet')][c('months')])"}, "5": {"text": "The finch was bought sometime after Roberta's pet.", "conditions": "(T[r('finch')][c('months')] > T[r('Roberta')][c('months')])"}, "6": {"text": "Bonita's pet was bought in May.", "conditions": "(T[r('Bonita')][c('months')] == 5)"}, "7": {"text": "The macaw was bought 1 month before the parakeet.", "conditions": "(T[r('macaw')][c('months')] + 1 == T[r('parakeet')][c('months')])"}}, "initial": [["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], "current": [["months", "names", "birds"], [1, "", "macaw"], [2, "Bonita", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], "applied_clues": ["2", "7", "3"], "initial_to_current": [[["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", ""], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "Bonita", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]]], "unsolvable_child": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Bonita", "parakeet"], [3, "Laura", "finch"], [4, "", "lorikeet"], [5, "", "lovebird"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Roberta", "parakeet"], [3, "Laura", "finch"], [4, "Velma", "lorikeet"], [5, "Bonita", "lovebird"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Lena", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1", "3", "7", "8"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Lena", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "Lena", "free weights"], ["11:30am", "Crystal", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1", "3"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], "applied_clues": ["4", "11"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", "Green Swamp"]], "applied_clues": ["1", "5", "7"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", "Green Swamp"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", "Green Swamp"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], "applied_clues": ["7", "10", "6", "8", "9", "4", "11", "2"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "Nick", "mobile phones", "Carbon"], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Help Donna make sense of Dr. Finklestein's appointment list for today. Using only the clues below, match the times to the options from names, ailments, and insurers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 9, 10, 11, 12.\nnames : Billy, Guy, Paul, Terry.\nailments : back pain, hip pain, shingles, vertigo.\ninsurers : Ambercare, HealthCo, Lifealign, Triflex.", "clues": {"1": {"text": "The person with Lifealign insurance has an appointment sometime before the patient suffering from shingles.", "conditions": "(T[r('Lifealign')][c('times')] < T[r('shingles')][c('times')])"}, "2": {"text": "The patient with the 12 noon appointment is either Terry or the patient with Ambercare insurance.", "conditions": "(T[r(12)][c('names')] == 'Terry' or T[r(12)][c('insurers')] == 'Ambercare') and (T[r('Terry')][c('insurers')] != 'Ambercare')"}, "3": {"text": "The patient suffering from back pain has an appointment 2 hours before Guy.", "conditions": "(T[r('back pain')][c('times')] == T[r('Guy')][c('times')] - 2)"}, "4": {"text": "The person with Ambercare insurance has an appointment sometime after the person suffering from vertigo.", "conditions": "(T[r('Ambercare')][c('times')] > T[r('vertigo')][c('times')])"}, "5": {"text": "Neither Billy nor the person suffering from shingles is the person with Lifealign insurance.", "conditions": "(T[r('Billy')][c('insurers')] != 'Lifealign' and T[r('shingles')][c('insurers')] != 'Lifealign') and (T[r('Billy')][c('ailments')] != 'shingles')"}, "6": {"text": "The person with the 9:00am appointment is either Paul or the patient suffering from back pain.", "conditions": "(T[r(9)][c('names')] == 'Paul' or T[r(9)][c('ailments')] == 'back pain') and (T[r('Paul')][c('ailments')] != 'back pain')"}, "7": {"text": "The patient with the 10:00am appointment has Triflex insurance.", "conditions": "(T[r(10)][c('insurers')] == 'Triflex')"}, "8": {"text": "Of the patient suffering from vertigo and the person with Ambercare insurance, one has the 11:00am appointment and the other is Billy.", "conditions": "((T[r('vertigo')][c('times')] == 11 and T[r('Ambercare')][c('names')] == 'Billy') or (T[r('Ambercare')][c('times')] == 11 and T[r('vertigo')][c('names')] == 'Billy')) and (T[r('vertigo')][c('insurers')] != 'Ambercare') and (T[r(11)][c('names')] != 'Billy')"}}, "initial": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], "current": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "vertigo", ""], [11, "", "", "Ambercare"], [12, "Terry", "", ""]], "applied_clues": ["8", "2", "4"], "initial_to_current": [[["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "vertigo", ""], [11, "", "", "Ambercare"], [12, "", "", ""]], [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "vertigo", ""], [11, "", "", "Ambercare"], [12, "Terry", "", ""]], [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "vertigo", ""], [11, "", "", "Ambercare"], [12, "Terry", "", ""]]], "unsolvable_child": [["times", "names", "ailments", "insurers"], [9, "Guy", "back pain", ""], [10, "Billy", "vertigo", ""], [11, "Paul", "", "Ambercare"], [12, "Terry", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", "Lifealign"], [10, "Paul", "shingles", "Triflex"], [11, "Guy", "vertigo", "HealthCo"], [12, "Billy", "hip pain", "Ambercare"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", "Yorktown"], [55, "Felix", "black", "Oakland Acres"], [62, "", "", "Worthington"], [69, "", "gray", ""]], "applied_clues": ["1", "3", "8", "7"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "Felix", "", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", "Yorktown"], [55, "Felix", "black", "Oakland Acres"], [62, "", "", "Worthington"], [69, "", "gray", ""]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", "Yorktown"], [55, "Felix", "black", "Oakland Acres"], [62, "", "", "Worthington"], [69, "", "gray", "Mount Union"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "Alex", ""]], "applied_clues": ["1", "5"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "Alex", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "", "Green Swamp"], [9, "", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "Alex", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], "applied_clues": ["7", "10", "6", "8", "9", "4", "11"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Color Blinds", "blue", ""], [2, "", "", "Prairie City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "applied_clues": ["4"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "Color Blinds", "blue", ""], [2, "", "", "Prairie City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Color Blinds", "blue", ""], [2, "", "purple", "Prairie City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "Night Ninjas", "", ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3", "5", "2"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "red", ""], [4, "", "white", "Forest City"], [5, "", "", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The U. S. Air Force is currently testing a number of new experimental, supersonic aircraft, each built by a different aerospace company. Using only the clues below, match the prices to the options from aircraft, companies, and top speeds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 100, 125, 150, 175.\naircraft : Darkwing 6, Falcon X-2, Kesseling, Raven 12.\ncompanies : Ale and Moore, Forsyth, Pittakan, Tenerife.\ntop speeds : Mach 2.3, Mach 2.9, Mach 3.2, Mach 3.4.", "clues": {"1": {"text": "The Darkwing 6 costs 50 million dollars more than the jet built by Tenerife.", "conditions": "(T[r('Darkwing 6')][c('prices')] == T[r('Tenerife')][c('prices')] + 50)"}, "2": {"text": "The Raven 12 doesn't cost $125 million.", "conditions": "(T[r('Raven 12')][c('prices')] != 125)"}, "3": {"text": "The plane with a top speed of Mach 3.2 costs more than the jet built by Tenerife.", "conditions": "(T[r('Mach 3.2')][c('prices')] > T[r('Tenerife')][c('prices')])"}, "4": {"text": "The aircraft with a top speed of Mach 2.9, the aircraft built by Forsyth, and the $150 million aircraft are three different jets.", "conditions": "(T[r('Mach 2.9')][c('companies')]!='Forsyth') and (T[r(150)][c('companies')]!='Forsyth') and (T[r(150)][c('top speeds')]!='Mach 3.2')"}, "5": {"text": "The plane with a top speed of Mach 2.9 is either the Raven 12 or the $100 million jet.", "conditions": "(T[r('Mach 2.9')][c('aircraft')] == 'Raven 12' or T[r('Mach 2.9')][c('prices')] == 100) and (T[r('Raven 12')][c('prices')] != 100)"}, "6": {"text": "The $125 million plane, the aircraft with a top speed of Mach 3.4 and the jet built by Forsyth are all different jets.", "conditions": "(T[r(125)][c('top speeds')] != 'Mach 3.4') and (T[r('Forsyth')][c('top speeds')] != 'Mach 3.4') and (T[r(125)][c('companies')]!='Forsyth')"}, "7": {"text": "The plane with a top speed of Mach 3.2 is either the plane built by Tenerife or the plane built by Pittakan.", "conditions": "(T[r('Mach 3.2')][c('companies')] == 'Tenerife' or T[r('Mach 3.2')][c('companies')] == 'Pittakan')"}, "8": {"text": "The Falcon X-2 was built by Tenerife.", "conditions": "(T[r('Falcon X-2')][c('companies')] == 'Tenerife')"}}, "initial": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], "current": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], "applied_clues": ["5", "2", "6"], "initial_to_current": [[["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]]], "unsolvable_child": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", "Mach 3.2"], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["prices", "aircraft", "companies", "top speeds"], [100, "Falcon X-2", "Tenerife", "Mach 2.9"], [125, "Kesseling", "Pittakan", "Mach 3.2"], [150, "Darkwing 6", "Ale and Moore", "Mach 3.4"], [175, "Raven 12", "Forsyth", "Mach 2.3"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "", "WB-664", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], "applied_clues": ["4", "8", "1"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "WB-664", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Help Donna make sense of Dr. Finklestein's appointment list for today. Using only the clues below, match the times to the options from names, ailments, and insurers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 9, 10, 11, 12.\nnames : Billy, Guy, Paul, Terry.\nailments : back pain, hip pain, shingles, vertigo.\ninsurers : Ambercare, HealthCo, Lifealign, Triflex.", "clues": {"1": {"text": "The person with Lifealign insurance has an appointment sometime before the patient suffering from shingles.", "conditions": "(T[r('Lifealign')][c('times')] < T[r('shingles')][c('times')])"}, "2": {"text": "The patient with the 12 noon appointment is either Terry or the patient with Ambercare insurance.", "conditions": "(T[r(12)][c('names')] == 'Terry' or T[r(12)][c('insurers')] == 'Ambercare') and (T[r('Terry')][c('insurers')] != 'Ambercare')"}, "3": {"text": "The patient suffering from back pain has an appointment 2 hours before Guy.", "conditions": "(T[r('back pain')][c('times')] == T[r('Guy')][c('times')] - 2)"}, "4": {"text": "The person with Ambercare insurance has an appointment sometime after the person suffering from vertigo.", "conditions": "(T[r('Ambercare')][c('times')] > T[r('vertigo')][c('times')])"}, "5": {"text": "Neither Billy nor the person suffering from shingles is the person with Lifealign insurance.", "conditions": "(T[r('Billy')][c('insurers')] != 'Lifealign' and T[r('shingles')][c('insurers')] != 'Lifealign') and (T[r('Billy')][c('ailments')] != 'shingles')"}, "6": {"text": "The person with the 9:00am appointment is either Paul or the patient suffering from back pain.", "conditions": "(T[r(9)][c('names')] == 'Paul' or T[r(9)][c('ailments')] == 'back pain') and (T[r('Paul')][c('ailments')] != 'back pain')"}, "7": {"text": "The patient with the 10:00am appointment has Triflex insurance.", "conditions": "(T[r(10)][c('insurers')] == 'Triflex')"}, "8": {"text": "Of the patient suffering from vertigo and the person with Ambercare insurance, one has the 11:00am appointment and the other is Billy.", "conditions": "((T[r('vertigo')][c('times')] == 11 and T[r('Ambercare')][c('names')] == 'Billy') or (T[r('Ambercare')][c('times')] == 11 and T[r('vertigo')][c('names')] == 'Billy')) and (T[r('vertigo')][c('insurers')] != 'Ambercare') and (T[r(11)][c('names')] != 'Billy')"}}, "initial": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], "current": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "vertigo", ""], [11, "", "", "Ambercare"], [12, "", "", ""]], "applied_clues": ["8"], "initial_to_current": [[["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "vertigo", ""], [11, "", "", "Ambercare"], [12, "", "", ""]]], "unsolvable_child": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "vertigo", ""], [11, "", "", "Ambercare"], [12, "Terry", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", "Lifealign"], [10, "Paul", "shingles", "Triflex"], [11, "Guy", "vertigo", "HealthCo"], [12, "Billy", "hip pain", "Ambercare"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "Orlando", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "Orlando", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "Orlando", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Help Donna make sense of Dr. Finklestein's appointment list for today. Using only the clues below, match the times to the options from names, ailments, and insurers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 9, 10, 11, 12.\nnames : Billy, Guy, Paul, Terry.\nailments : back pain, hip pain, shingles, vertigo.\ninsurers : Ambercare, HealthCo, Lifealign, Triflex.", "clues": {"1": {"text": "The person with Lifealign insurance has an appointment sometime before the patient suffering from shingles.", "conditions": "(T[r('Lifealign')][c('times')] < T[r('shingles')][c('times')])"}, "2": {"text": "The patient with the 12 noon appointment is either Terry or the patient with Ambercare insurance.", "conditions": "(T[r(12)][c('names')] == 'Terry' or T[r(12)][c('insurers')] == 'Ambercare') and (T[r('Terry')][c('insurers')] != 'Ambercare')"}, "3": {"text": "The patient suffering from back pain has an appointment 2 hours before Guy.", "conditions": "(T[r('back pain')][c('times')] == T[r('Guy')][c('times')] - 2)"}, "4": {"text": "The person with Ambercare insurance has an appointment sometime after the person suffering from vertigo.", "conditions": "(T[r('Ambercare')][c('times')] > T[r('vertigo')][c('times')])"}, "5": {"text": "Neither Billy nor the person suffering from shingles is the person with Lifealign insurance.", "conditions": "(T[r('Billy')][c('insurers')] != 'Lifealign' and T[r('shingles')][c('insurers')] != 'Lifealign') and (T[r('Billy')][c('ailments')] != 'shingles')"}, "6": {"text": "The person with the 9:00am appointment is either Paul or the patient suffering from back pain.", "conditions": "(T[r(9)][c('names')] == 'Paul' or T[r(9)][c('ailments')] == 'back pain') and (T[r('Paul')][c('ailments')] != 'back pain')"}, "7": {"text": "The patient with the 10:00am appointment has Triflex insurance.", "conditions": "(T[r(10)][c('insurers')] == 'Triflex')"}, "8": {"text": "Of the patient suffering from vertigo and the person with Ambercare insurance, one has the 11:00am appointment and the other is Billy.", "conditions": "((T[r('vertigo')][c('times')] == 11 and T[r('Ambercare')][c('names')] == 'Billy') or (T[r('Ambercare')][c('times')] == 11 and T[r('vertigo')][c('names')] == 'Billy')) and (T[r('vertigo')][c('insurers')] != 'Ambercare') and (T[r(11)][c('names')] != 'Billy')"}}, "initial": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], "current": [["times", "names", "ailments", "insurers"], [9, "Billy", "vertigo", ""], [10, "", "", ""], [11, "", "", "Ambercare"], [12, "", "", ""]], "applied_clues": ["8"], "initial_to_current": [[["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], [["times", "names", "ailments", "insurers"], [9, "Billy", "vertigo", ""], [10, "", "", ""], [11, "", "", "Ambercare"], [12, "", "", ""]]], "unsolvable_child": [["times", "names", "ailments", "insurers"], [9, "Billy", "vertigo", ""], [10, "", "", ""], [11, "", "", "Ambercare"], [12, "Terry", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", "Lifealign"], [10, "Paul", "shingles", "Triflex"], [11, "Guy", "vertigo", "HealthCo"], [12, "Billy", "hip pain", "Ambercare"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "MVP Events prides itself on planning large-scale parties for 50 or more people, anywhere in the United States. This month the company has several different events to plan. Using only the clues below, match the people to the options from planners, events, and locations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "people : 50, 75, 100, 125.\nplanners : Bridget, Clarence, Herbert, Oliver.\nevents : anniversary, graduation, retreat, symposium.\nlocations : Connecticut, Delaware, Georgia, Wyoming.", "clues": {"1": {"text": "The event in Connecticut will involve 25 more people than the symposium job.", "conditions": "(T[r('Connecticut')][c('people')] == T[r('symposium')][c('people')] + 25)"}, "2": {"text": "The assignment in Delaware will involve 25 more people than Oliver's job.", "conditions": "(T[r('Delaware')][c('people')] == T[r('Oliver')][c('people')] + 25)"}, "3": {"text": "Bridget's job won't be in Wyoming.", "conditions": "(T[r('Bridget')][c('locations')] != 'Wyoming')"}, "4": {"text": "Of the event in Wyoming and Clarence's event, one will have 125 attendees and the other is the graduation.", "conditions": "((T[r('Wyoming')][c('people')] == 125 and T[r('Clarence')][c('events')] == 'graduation') or (T[r('Wyoming')][c('events')] == 'graduation' and T[r('Clarence')][c('people')] == 125)) and (T[r('graduation')][c('people')] != 125) and (T[r('Clarence')][c('locations')] != 'Wyoming')"}, "5": {"text": "The retreat assignment will involve somewhat more people than the event in Connecticut.", "conditions": "(T[r('retreat')][c('people')] > T[r('Connecticut')][c('people')])"}, "6": {"text": "Oliver's job is either the event in Georgia or the symposium assignment.", "conditions": "(T[r('Oliver')][c('locations')] == 'Georgia' or T[r('Oliver')][c('events')] == 'symposium') and (T[r('Georgia')][c('events')] != 'symposium')"}}, "initial": [["people", "planners", "events", "locations"], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""], [125, "", "", ""]], "current": [["people", "planners", "events", "locations"], [50, "Clarence", "graduation", ""], [75, "", "", ""], [100, "", "", ""], [125, "", "", "Wyoming"]], "applied_clues": ["4"], "initial_to_current": [[["people", "planners", "events", "locations"], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""], [125, "", "", ""]], [["people", "planners", "events", "locations"], [50, "Clarence", "graduation", ""], [75, "", "", ""], [100, "", "", ""], [125, "", "", "Wyoming"]]], "unsolvable_child": [["people", "planners", "events", "locations"], [50, "Clarence", "graduation", ""], [75, "", "symposium", ""], [100, "", "", "Connecticut"], [125, "", "", "Wyoming"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["people", "planners", "events", "locations"], [50, "Oliver", "anniversary", "Georgia"], [75, "Bridget", "symposium", "Delaware"], [100, "Clarence", "graduation", "Connecticut"], [125, "Herbert", "retreat", "Wyoming"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "Omar", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", ""], [5, "Christian", "GX-13", ""]], "applied_clues": ["4", "8", "1", "2", "9"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "WB-664", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "Omar", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", ""], [5, "Christian", "GX-13", ""]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "Omar", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "photosynthesis"], [5, "Christian", "GX-13", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "\"Against the Grain\" offers hand-made wooden furniture at reasonable prices. Each item is made by an in-house employee. Using only the clues below, match the dollars to the options from woodworkers, woods, and pieces. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "dollars: 250, 275, 300, 325, 350, 375.\nwoodworkers : Bonita, Ellen, Josephine, Kendra, Olivia, Patsy.\nwoods : ash, mahogany, oak, poplar, rosewood, walnut.\npieces : barstool, bookshelf, coffee table, end table, footstool, hutch.", "clues": {"1": {"text": "The $325 piece is the barstool.", "conditions": "(T[r(325)][c('pieces')] == 'barstool')"}, "2": {"text": "Of the piece made of ash and the barstool, one was crafted by Bonita and the other costs $250.", "conditions": "((T[r('ash')][c('woodworkers')] == 'Bonita' and T[r('barstool')][c('dollars')] == 250 ) or (T[r('barstool')][c('woodworkers')] == 'Bonita' and T[r('ash')][c('dollars')] == 250)) and (T[r('ash')][c('pieces')] != 'barstool') and (T[r('Bonita')][c('dollars')] != 250)"}, "3": {"text": "The end table costs 25 dollars more than Ellen's item.", "conditions": "(T[r('end table')][c('dollars')] == T[r('Ellen')][c('dollars')] + 25)"}, "4": {"text": "Ellen's piece costs 50 dollars more than the hutch.", "conditions": "(T[r('Ellen')][c('dollars')] == T[r('hutch')][c('dollars')] + 50)"}, "5": {"text": "The bookshelf wasn't made of oak.", "conditions": "(T[r('bookshelf')][c('woods')] != 'oak')"}, "6": {"text": "Kendra's item wasn't made of rosewood.", "conditions": "(T[r('Kendra')][c('woods')] != 'rosewood')"}, "7": {"text": "Neither the coffee table nor the item made of oak is Kendra's piece.", "conditions": "(T[r('Kendra')][c('pieces')] != 'coffee table' and T[r('oak')][c('woodworkers')] != 'Kendra') and (T[r('oak')][c('pieces')] != 'coffee table')"}, "8": {"text": "Josephine's item is either the item made of walnut or the end table.", "conditions": "(T[r('Josephine')][c('woods')] == 'walnut' or T[r('Josephine')][c('pieces')] == 'end table') and (T[r('walnut')][c('pieces')] != 'end table')"}, "9": {"text": "Of Bonita's piece and the bookshelf, one was made of poplar and the other costs $275.", "conditions": "((T[r('Bonita')][c('woods')] == 'poplar' and T[r('bookshelf')][c('dollars')] == 275) or (T[r('bookshelf')][c('woods')] == 'poplar' and T[r('Bonita')][c('dollars')] == 275)) and (T[r('Bonita')][c('pieces')] != 'bookshelf') and (T[r('poplar')][c('dollars')] != 275)"}, "10": {"text": "The piece made of walnut costs 75 dollars more than Patsy's piece.", "conditions": "(T[r('walnut')][c('dollars')] == T[r('Patsy')][c('dollars')] + 75)"}, "11": {"text": "Neither the piece made of oak nor the item made of walnut is the coffee table.", "conditions": "(T[r('oak')][c('pieces')] != 'coffee table' and T[r('walnut')][c('pieces')] != 'coffee table')"}}, "initial": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], "current": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "Bonita", "", "barstool"], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], "applied_clues": ["2"], "initial_to_current": [[["dollars", "woodworkers", "woods", "pieces"], [250, "", "", ""], [275, "", "", ""], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "Bonita", "", "barstool"], [300, "", "", ""], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]]], "unsolvable_child": [["dollars", "woodworkers", "woods", "pieces"], [250, "", "ash", ""], [275, "Bonita", "", "barstool"], [300, "", "poplar", "bookshelf"], [325, "", "", ""], [350, "", "", ""], [375, "", "", ""]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["dollars", "woodworkers", "woods", "pieces"], [250, "Olivia", "ash", "coffee table"], [275, "Patsy", "rosewood", "bookshelf"], [300, "Kendra", "mahogany", "hutch"], [325, "Bonita", "poplar", "barstool"], [350, "Ellen", "walnut", "footstool"], [375, "Josephine", "oak", "end table"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Nick", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]], "applied_clues": ["7", "10", "6"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Nick", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Nick", "", ""], [4, "Melissa", "", "Selma"], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], "applied_clues": ["4", "2", "1", "3"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "", ""]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Seth", "", "gamma rays"], [2, "", "TV-412", "larval growth"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "GX-13", ""]], "applied_clues": ["4", "8"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Seth", "", "gamma rays"], [2, "", "TV-412", "larval growth"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "GX-13", ""]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Seth", "WB-664", "gamma rays"], [2, "", "TV-412", "larval growth"], [3, "", "ZF-15", ""], [4, "", "AV-435", ""], [5, "Christian", "GX-13", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "Liberty", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "Yvonne", "", ""]], "applied_clues": ["2", "10", "4"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "Liberty", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "Yvonne", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "Liberty", "goblin"], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "Yvonne", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], "applied_clues": ["2", "10", "4", "5"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "Liberty", ""], [5, "", "Escape", ""], [6, "Ora", "Osprey", ""], [7, "Gene", "", "goblin"], [8, "Yvonne", "", ""]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], "applied_clues": ["2"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Paradise", "soy"], ["June 5th", "Lucky Star", "Red Oak", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "", "", ""]], "applied_clues": ["5", "4"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Paradise", "soy"], ["June 5th", "Lucky Star", "Red Oak", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "", "", ""]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Paradise", "soy"], ["June 5th", "Lucky Star", "Red Oak", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "Meadowgrove", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "Leigh", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]], "applied_clues": ["3", "10", "11", "2"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "Deanna", "", "Elk Grove"], [540, "", 4, ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "Leigh", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, ""], [380, "Leigh", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], "applied_clues": ["10"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "GXTV", "", "real estate"], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "", "", ""], [225, "Zachary", "", ""]], "applied_clues": ["5", "2", "7"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "", "", ""], [225, "Zachary", "", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "", "", ""], [225, "Zachary", "", "banana"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1", "3"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Piper Hills Academy recently installed a high-speed 3-D printer in its technology lab, and several students were given an opportunity this week to use it in order to print items of their own design. Using only the clues below, match the times to the options from students, items, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 10, 15, 20, 25, 30, 35.\nstudents : Adrienne, Bertha, Eleanor, Felicia, Irma, Willis.\nitems : cup, flower, mask, phone case, skull, whistle.\ncolors : green, orange, purple, red, white, yellow.", "clues": {"1": {"text": "The skull took 5 more minutes to print than Bertha's piece.", "conditions": "(T[r('skull')][c('times')] == 5 + T[r('Bertha')][c('times')])"}, "2": {"text": "Of the red piece and the item that printed in 20 minutes, one was the mask and the other was Felicia's.", "conditions": "(((T[r('red')][c('items')] == 'mask' and T[r(20)][c('students')] == 'Felicia') or (T[r('red')][c('students')] == 'Felicia' and T[r(20)][c('items')] == 'mask'))) and (T[r(20)][c('colors')] != 'red') and (T[r('Felicia')][c('items')] != 'mask')"}, "3": {"text": "Willis's item wasn't the skull.", "conditions": "(T[r('Willis')][c('items')] != 'skull')"}, "4": {"text": "The item that printed in 25 minutes wasn't the phone case.", "conditions": "(T[r(25)][c('items')] != 'phone case')"}, "5": {"text": "Adrienne's piece was either the piece that printed in 10 minutes or the red item.", "conditions": "(T[r('Adrienne')][c('times')] == 10 or T[r('Adrienne')][c('colors')] == 'red') and (T[r(10)][c('colors')] != 'red')"}, "6": {"text": "Of the item that printed in 30 minutes and the item that printed in 20 minutes, one was Irma's and the other was the skull.", "conditions": "(((T[r(30)][c('students')] == 'Irma' and T[r(20)][c('items')] == 'skull') or (T[r(30)][c('items')] == 'skull' and T[r(20)][c('students')] == 'Irma'))) and (T[r('Irma')][c('items')] != 'skull')"}, "7": {"text": "Bertha's piece took 10 more minutes to print than the flower.", "conditions": "(T[r('Bertha')][c('times')] == 10 + T[r('flower')][c('times')])"}, "8": {"text": "The yellow design wasn't the phone case.", "conditions": "(T[r('yellow')][c('items')] != 'phone case')"}, "9": {"text": "Of the flower and the white design, one took 15 minutes to print and the other took 10 minutes to print.", "conditions": "(((T[r('flower')][c('times')] == 15 and T[r('white')][c('times')] == 10) or (T[r('flower')][c('times')] == 10 and T[r('white')][c('times')] == 15))) and (T[r('flower')][c('colors')] != 'white')"}, "10": {"text": "The cup required somewhat fewer minutes to print than Felicia's design.", "conditions": "(T[r('cup')][c('times')] < T[r('Felicia')][c('times')])"}, "11": {"text": "Felicia's design required 15 fewer minutes to print than the green item.", "conditions": "(T[r('Felicia')][c('times')] == T[r('green')][c('times')] - 15)"}, "12": {"text": "The orange design, the flower, Irma's item and the item that printed in 35 minutes were all different items.", "conditions": "(T[r('orange')][c('items')] != 'flower') and (T[r('orange')][c('students')] != 'Irma') and (T[r('orange')][c('times')] != 35) and (T[r('flower')][c('students')] != 'Irma') and (T[r('flower')][c('times')] != 35) and (T[r('Irma')][c('times')] != 35)"}}, "initial": [["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "current": [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "skull", ""], [25, "", "", ""], [30, "Irma", "", ""], [35, "", "", ""]], "applied_clues": ["9", "6"], "initial_to_current": [[["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "skull", ""], [25, "", "", ""], [30, "Irma", "", ""], [35, "", "", ""]]], "unsolvable_child": [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Felicia", "skull", ""], [25, "", "mask", "red"], [30, "Irma", "", ""], [35, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["times", "students", "items", "colors"], [10, "Adrienne", "cup", "white"], [15, "Felicia", "flower", "red"], [20, "Irma", "mask", "yellow"], [25, "Bertha", "whistle", "orange"], [30, "Eleanor", "skull", "green"], [35, "Willis", "phone case", "purple"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Springfield County Bird Club met today, and several of its members brought their newest acquisitions. Using only the clues below, match the months to the options from names and birds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nnames : Bonita, Joan, Laura, Roberta, Velma.\nbirds : finch, lorikeet, lovebird, macaw, parakeet.", "clues": {"1": {"text": "Velma's pet isn't the lovebird.", "conditions": "(T[r('Velma')][c('birds')] != 'lovebird')"}, "2": {"text": "Of the finch and the macaw, one was bought in January and the other is Laura's.", "conditions": "((T[r('finch')][c('months')] == 1 and T[r('macaw')][c('names')] == 'Laura') or (T[r('macaw')][c('months')] == 1 and T[r('finch')][c('names')] == 'Laura')) and (T[r(1)][c('names')] != 'Laura')"}, "3": {"text": "The bird bought in March is either Bonita's pet or the finch.", "conditions": "(T[r(3)][c('names')] == 'Bonita' or T[r(3)][c('birds')] == 'finch') and (T[r('Bonita')][c('birds')] != 'finch')"}, "4": {"text": "Joan's pet was bought 3 months before the lorikeet.", "conditions": "(T[r('Joan')][c('months')] + 3 == T[r('lorikeet')][c('months')])"}, "5": {"text": "The finch was bought sometime after Roberta's pet.", "conditions": "(T[r('finch')][c('months')] > T[r('Roberta')][c('months')])"}, "6": {"text": "Bonita's pet was bought in May.", "conditions": "(T[r('Bonita')][c('months')] == 5)"}, "7": {"text": "The macaw was bought 1 month before the parakeet.", "conditions": "(T[r('macaw')][c('months')] + 1 == T[r('parakeet')][c('months')])"}}, "initial": [["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], "current": [["months", "names", "birds"], [1, "", "finch"], [2, "Laura", "macaw"], [3, "", "parakeet"], [4, "", ""], [5, "", ""]], "applied_clues": ["2", "7"], "initial_to_current": [[["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "finch"], [2, "Laura", "macaw"], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "finch"], [2, "Laura", "macaw"], [3, "", "parakeet"], [4, "", ""], [5, "", ""]]], "unsolvable_child": [["months", "names", "birds"], [1, "", "finch"], [2, "Laura", "macaw"], [3, "Bonita", "parakeet"], [4, "", ""], [5, "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Roberta", "parakeet"], [3, "Laura", "finch"], [4, "Velma", "lorikeet"], [5, "Bonita", "lovebird"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "Delia", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Omar", "AV-435", ""], [5, "Christian", "GX-13", ""]], "applied_clues": ["4", "8", "1", "2", "9"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "WB-664", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "Delia", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Omar", "AV-435", ""], [5, "Christian", "GX-13", ""]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", ""], [2, "Delia", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Omar", "AV-435", "photosynthesis"], [5, "Christian", "GX-13", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "white", "Forest City"], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "white", "Forest City"], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "white", "Forest City"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], "applied_clues": ["6", "2", "11", "3", "4"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "Phyllis", "", ""]], "applied_clues": ["1", "12", "3", "9"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", ""], [105, "Yvette", "raft spider", ""], [120, "Phyllis", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "Olga", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "Lonnie", "black widow", ""], [90, "", "", "Honduras"], [105, "Yvette", "raft spider", ""], [120, "Phyllis", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Pelican Bay College is sending a number of graduate students out to sea, each to study a different species of shark. Using only the clues below, match the months to the options from students, ships, and sharks. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 3, 4, 5, 6, 7, 8.\nstudents : Eunice, Gene, Kerry, Ora, Roberto, Yvonne.\nships : Escape, Liberty, Odyssey, Osprey, Pegasus, Serenity.\nsharks : basking, blacktip, goblin, hammerhead, leopard, tiger.", "clues": {"1": {"text": "Eunice's project has nothing to do with basking sharks.", "conditions": "(T[r('Eunice')][c('sharks')] != 'basking')"}, "2": {"text": "Of the assignment on the Odyssey and the project beginning in June, one is concerned with hammerhead sharks and the other is Ora's project.", "conditions": "((T[r(6)][c('students')] == 'Ora' and T[r('Odyssey')][c('sharks')] == 'hammerhead') or (T[r('Odyssey')][c('students')] == 'Ora' and T[r(6)][c('sharks')] == 'hammerhead')) and (T[r('Odyssey')][c('months')]!=6) and (T[r('Ora')][c('sharks')] != 'hammerhead')"}, "3": {"text": "The project beginning in August, the tiger shark assignment, Ora's assignment and Roberto's study are all different projects.", "conditions": "(T[r('tiger')][c('months')] != 8) and (T[r(8)][c('students')]!='Ora') and (T[r(8)][c('students')]!='Roberto') and (T[r('tiger')][c('students')]!='Ora') and (T[r('tiger')][c('students')]!='Roberto')"}, "4": {"text": "Neither the study on the Liberty nor the study beginning in June is Yvonne's project.", "conditions": "(T[r('Liberty')][c('students')] != 'Yvonne' and T[r(6)][c('students')] != 'Yvonne') and (T[r('Liberty')][c('months')] != 6)"}, "5": {"text": "Yvonne's project starts 3 months after the project on the Escape.", "conditions": "(T[r('Yvonne')][c('months')] == T[r('Escape')][c('months')] + 3)"}, "6": {"text": "Ora's study has nothing to do with basking sharks.", "conditions": "(T[r('Ora')][c('sharks')] != 'basking')"}, "7": {"text": "The study beginning in March has nothing to do with hammerhead sharks.", "conditions": "(T[r(3)][c('sharks')] != 'hammerhead')"}, "8": {"text": "The study on the Osprey starts 1 month before Gene's project.", "conditions": "(T[r('Osprey')][c('months')] == T[r('Gene')][c('months')] - 1)"}, "9": {"text": "The project beginning in April is on the Serenity.", "conditions": "(T[r(4)][c('ships')] == 'Serenity')"}, "10": {"text": "Of Gene's study and the project on the Osprey, one is concerned with goblin sharks and the other starts in June.", "conditions": "((T[r('Gene')][c('sharks')] == 'goblin' and T[r('Osprey')][c('months')] == 6) or (T[r('Gene')][c('months')] == 6 and T[r('Osprey')][c('sharks')] == 'goblin')) and (T[r('Gene')][c('ships')] != 'Osprey') and (T[r('goblin')][c('months')] != 6)"}, "11": {"text": "Neither the tiger shark project nor Ora's project is the study beginning in April.", "conditions": "(T[r('tiger')][c('months')] != 4 and T[r('Ora')][c('months')] != 4) and (T[r('Ora')][c('sharks')] != 'tiger')"}, "12": {"text": "The assignment on the Odyssey starts 1 month before Eunice's project.", "conditions": "(T[r('Odyssey')][c('months')] == T[r('Eunice')][c('months')] - 1)"}, "13": {"text": "The study beginning in March has nothing to do with blacktip sharks.", "conditions": "(T[r(3)][c('sharks')] != 'blacktip')"}}, "initial": [["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], "current": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]], "applied_clues": ["2"], "initial_to_current": [[["months", "students", "ships", "sharks"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""]], [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "", "", ""], [5, "", "", ""], [6, "Ora", "", ""], [7, "", "", ""], [8, "", "", ""]]], "unsolvable_child": [["months", "students", "ships", "sharks"], [3, "", "Odyssey", "hammerhead"], [4, "Gene", "", "goblin"], [5, "", "", ""], [6, "Ora", "Osprey", ""], [7, "", "", ""], [8, "", "", ""]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["months", "students", "ships", "sharks"], [3, "Ora", "Odyssey", "leopard"], [4, "Eunice", "Serenity", "blacktip"], [5, "Kerry", "Escape", "tiger"], [6, "Roberto", "Osprey", "hammerhead"], [7, "Gene", "Liberty", "goblin"], [8, "Yvonne", "Pegasus", "basking"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], "applied_clues": ["4", "2"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "Seth", "", "gamma rays"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "GX-13", ""]], "applied_clues": ["4", "8"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "Seth", "", "gamma rays"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "GX-13", ""]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "Seth", "WB-664", "gamma rays"], [3, "", "AV-435", ""], [4, "", "ZF-15", ""], [5, "Christian", "GX-13", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", "Mack truck"], [300, "Dream Machine", "Kimberly", ""], [350, "", "", ""], [400, "", "", "Airstream"]], "applied_clues": ["2", "1"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", "Airstream"]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", "Mack truck"], [300, "Dream Machine", "Kimberly", ""], [350, "", "", ""], [400, "", "", "Airstream"]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", "Mack truck"], [300, "Dream Machine", "Kimberly", ""], [350, "", "", ""], [400, "Books-4-U", "", "Airstream"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "", "", "Toledo"], [48, "Felix", "black", "Oakland Acres"], [55, "", "", ""], [62, "", "", ""], [69, "", "gray", ""]], "applied_clues": ["1", "3"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "Felix", "", "Oakland Acres"], [55, "", "", ""], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", "Toledo"], [48, "Felix", "black", "Oakland Acres"], [55, "", "", ""], [62, "", "", ""], [69, "", "gray", ""]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "Felix", "black", "Oakland Acres"], [55, "", "", ""], [62, "", "", ""], [69, "", "gray", ""]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], "applied_clues": ["1", "3"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "Felix", "", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lorena's Specialty Cakes has a number of different orders to fulfill this week. Using only the clues below, match the delivery dates to the options from customers, cake shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "delivery dates : 5, 6, 7, 8, 9.\ncustomers : Danielson, Harper, Keller, Lowe, Nolan.\ncake shapes : biplane, rocket ship, sailboat, sports car, turtle.\nflavors : banana, coconut, lemon, raspberry, strawberry.", "clues": {"1": {"text": "The lemon cake will be delivered 3 days after the raspberry cake.", "conditions": "(T[r('lemon')][c('delivery dates')] - T[r('raspberry')][c('delivery dates')] == 3)"}, "2": {"text": "Mrs. Nolan's cake will be delivered 1 day before the cake shaped like a sports car.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 1 == T[r('sports car')][c('delivery dates')])"}, "3": {"text": "Mrs. Danielson's order won't be delivered on October 6.", "conditions": "(T[r('Danielson')][c('delivery dates')] != 6)"}, "4": {"text": "The October 8 delivery will be in the shape of a biplane.", "conditions": "(T[r(8)][c('cake shapes')] == 'biplane')"}, "5": {"text": "Neither Mrs. Harper's order nor the strawberry cake is the October 6 delivery.", "conditions": "(T[r('Harper')][c('delivery dates')] != 6 and T[r('strawberry')][c('delivery dates')] != 6) and (T[r('Harper')][c('flavors')] != 'strawberry')"}, "6": {"text": "Mrs. Nolan's cake will be delivered 2 days before the strawberry cake.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 2 == T[r('strawberry')][c('delivery dates')])"}, "7": {"text": "The cake shaped like a rocket ship will be delivered 1 day before the coconut cake.", "conditions": "(T[r('rocket ship')][c('delivery dates')] + 1 == T[r('coconut')][c('delivery dates')])"}, "8": {"text": "Mrs. Harper's order won't be shaped like a biplane.", "conditions": "(T[r('Harper')][c('cake shapes')] != 'biplane')"}, "9": {"text": "Mrs. Keller's order won't be shaped like a sports car.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sports car')"}, "10": {"text": "The order shaped like a sailboat will be delivered 2 days after the raspberry cake.", "conditions": "(T[r('sailboat')][c('delivery dates')] == T[r('raspberry')][c('delivery dates')] + 2)"}, "11": {"text": "Mrs. Keller's cake won't be shaped like a sailboat.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sailboat')"}}, "initial": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], "current": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]], "applied_clues": ["1", "10", "6", "2", "5", "3", "7"], "initial_to_current": [[["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "Danielson", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]]], "unsolvable_child": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Harper", "biplane", "lemon"], [9, "", "turtle", "banana"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "Lowe", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Keller", "biplane", "lemon"], [9, "Harper", "turtle", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Piper Hills Academy recently installed a high-speed 3-D printer in its technology lab, and several students were given an opportunity this week to use it in order to print items of their own design. Using only the clues below, match the times to the options from students, items, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 10, 15, 20, 25, 30, 35.\nstudents : Adrienne, Bertha, Eleanor, Felicia, Irma, Willis.\nitems : cup, flower, mask, phone case, skull, whistle.\ncolors : green, orange, purple, red, white, yellow.", "clues": {"1": {"text": "The skull took 5 more minutes to print than Bertha's piece.", "conditions": "(T[r('skull')][c('times')] == 5 + T[r('Bertha')][c('times')])"}, "2": {"text": "Of the red piece and the item that printed in 20 minutes, one was the mask and the other was Felicia's.", "conditions": "(((T[r('red')][c('items')] == 'mask' and T[r(20)][c('students')] == 'Felicia') or (T[r('red')][c('students')] == 'Felicia' and T[r(20)][c('items')] == 'mask'))) and (T[r(20)][c('colors')] != 'red') and (T[r('Felicia')][c('items')] != 'mask')"}, "3": {"text": "Willis's item wasn't the skull.", "conditions": "(T[r('Willis')][c('items')] != 'skull')"}, "4": {"text": "The item that printed in 25 minutes wasn't the phone case.", "conditions": "(T[r(25)][c('items')] != 'phone case')"}, "5": {"text": "Adrienne's piece was either the piece that printed in 10 minutes or the red item.", "conditions": "(T[r('Adrienne')][c('times')] == 10 or T[r('Adrienne')][c('colors')] == 'red') and (T[r(10)][c('colors')] != 'red')"}, "6": {"text": "Of the item that printed in 30 minutes and the item that printed in 20 minutes, one was Irma's and the other was the skull.", "conditions": "(((T[r(30)][c('students')] == 'Irma' and T[r(20)][c('items')] == 'skull') or (T[r(30)][c('items')] == 'skull' and T[r(20)][c('students')] == 'Irma'))) and (T[r('Irma')][c('items')] != 'skull')"}, "7": {"text": "Bertha's piece took 10 more minutes to print than the flower.", "conditions": "(T[r('Bertha')][c('times')] == 10 + T[r('flower')][c('times')])"}, "8": {"text": "The yellow design wasn't the phone case.", "conditions": "(T[r('yellow')][c('items')] != 'phone case')"}, "9": {"text": "Of the flower and the white design, one took 15 minutes to print and the other took 10 minutes to print.", "conditions": "(((T[r('flower')][c('times')] == 15 and T[r('white')][c('times')] == 10) or (T[r('flower')][c('times')] == 10 and T[r('white')][c('times')] == 15))) and (T[r('flower')][c('colors')] != 'white')"}, "10": {"text": "The cup required somewhat fewer minutes to print than Felicia's design.", "conditions": "(T[r('cup')][c('times')] < T[r('Felicia')][c('times')])"}, "11": {"text": "Felicia's design required 15 fewer minutes to print than the green item.", "conditions": "(T[r('Felicia')][c('times')] == T[r('green')][c('times')] - 15)"}, "12": {"text": "The orange design, the flower, Irma's item and the item that printed in 35 minutes were all different items.", "conditions": "(T[r('orange')][c('items')] != 'flower') and (T[r('orange')][c('students')] != 'Irma') and (T[r('orange')][c('times')] != 35) and (T[r('flower')][c('students')] != 'Irma') and (T[r('flower')][c('times')] != 35) and (T[r('Irma')][c('times')] != 35)"}}, "initial": [["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "current": [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "applied_clues": ["9"], "initial_to_current": [[["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]]], "unsolvable_child": [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "", "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["times", "students", "items", "colors"], [10, "Adrienne", "cup", "white"], [15, "Felicia", "flower", "red"], [20, "Irma", "mask", "yellow"], [25, "Bertha", "whistle", "orange"], [30, "Eleanor", "skull", "green"], [35, "Willis", "phone case", "purple"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "chainsaws", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]], "applied_clues": ["7", "10", "6"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "chainsaws", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "chainsaws", ""], [3, "", "", ""], [4, "Melissa", "", "Selma"], [5, "", "flashlights", ""], [6, "Nick", "", "Menlo"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "Zachary", "beach chair", ""]], "applied_clues": ["5", "2", "7"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "Zachary", "beach chair", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "Zachary", "beach chair", "banana"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", "Airstream"]], "applied_clues": ["2"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", "Airstream"]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "Sheryl", "Mack truck"], [300, "Dream Machine", "Kimberly", ""], [350, "", "", ""], [400, "", "", "Airstream"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the nominations to the options from movies, directors, and genres. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "nominations : 2, 3, 4, 5.\nmovies : Silk Mist, The Illusion, Thorn of Suns, Wild Ones.\ndirectors : Danny Trevor, Gabby Jones, Tank Reznor, Virgil Katz.\ngenres : comedy, drama, romance, thriller.", "clues": {"1": {"text": "The thriller is either the movie that received 4 nominations or Wild Ones.", "conditions": "(T[r('thriller')][c('nominations')] == 4 or T[r('thriller')][c('movies')] == 'Wild Ones') and (T[r(4)][c('movies')] != 'Wild Ones')"}, "2": {"text": "The film directed by Virgil Katz received one more nomination than the film directed by Danny Trevor.", "conditions": "(T[r('Virgil Katz')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] + 1)"}, "3": {"text": "The movie directed by Gabby Jones is either the film that received 4 nominations or Thorn of Suns.", "conditions": "(T[r('Gabby Jones')][c('nominations')] == 4 or T[r('Gabby Jones')][c('movies')] == 'Thorn of Suns') and (T[r(4)][c('movies')] != 'Thorn of Suns')"}, "4": {"text": "The comedy was directed by Tank Reznor.", "conditions": "(T[r('comedy')][c('directors')] == 'Tank Reznor')"}, "5": {"text": "Wild Ones received one fewer nomination than the movie directed by Danny Trevor.", "conditions": "(T[r('Wild Ones')][c('nominations')] == T[r('Danny Trevor')][c('nominations')] - 1)"}, "6": {"text": "Silk Mist was the drama.", "conditions": "(T[r('Silk Mist')][c('genres')] == 'drama')"}, "7": {"text": "The romance received more nominations than the movie directed by Tank Reznor.", "conditions": "(T[r('romance')][c('nominations')] > T[r('Tank Reznor')][c('nominations')])"}}, "initial": [["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "", "", ""], [4, "", "Gabby Jones", "thriller"], [5, "Thorn of Suns", "", ""]], "applied_clues": ["1", "3"], "initial_to_current": [[["nominations", "movies", "directors", "genres"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "", "", ""], [4, "", "", "thriller"], [5, "", "", ""]], [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "", "", ""], [4, "", "Gabby Jones", "thriller"], [5, "Thorn of Suns", "", ""]]], "unsolvable_child": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "", ""], [3, "", "Danny Trevor", ""], [4, "", "Gabby Jones", "thriller"], [5, "Thorn of Suns", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["nominations", "movies", "directors", "genres"], [2, "Wild Ones", "Tank Reznor", "comedy"], [3, "Silk Mist", "Danny Trevor", "drama"], [4, "The Illusion", "Virgil Katz", "thriller"], [5, "Thorn of Suns", "Gabby Jones", "romance"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "GXTV", "", "real estate"]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "GXTV", "", "real estate"]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "Heathcliff", "telecom"], [30, "GXTV", "", "real estate"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners, spiders, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices: 45, 60, 75, 90, 105, 120.\nwinners : Hazel, Isaac, Lonnie, Olga, Phyllis, Yvette.\nspiders : archaenido, black widow, ipstin spider, raft spider, redback, wolf spider.\ncountries : France, Honduras, Malawi, Qatar, Russia, Spain.", "clues": {"1": {"text": "Of the specimen from Qatar and the arachnid that sold for $105, one was the ipstin spider and the other was won by Yvette.", "conditions": "((T[r('Qatar')][c('spiders')] == 'ipstin spider' and T[r(105)][c('winners')] == 'Yvette') or (T[r(105)][c('spiders')] == 'ipstin spider' and T[r('Qatar')][c('winners')] == 'Yvette')) and (T[r('Qatar')][c('prices')] !=105) and (T[r('ipstin spider')][c('winners')] != 'Yvette')"}, "2": {"text": "The arachnid that sold for $90 was either the specimen from Honduras or Olga's purchase.", "conditions": "(T[r(90)][c('countries')] == 'Honduras' or T[r(90)][c('winners')] == 'Olga') and (T[r('Honduras')][c('winners')] != 'Olga')"}, "3": {"text": "The black widow was either Lonnie's purchase or the arachnid that sold for $60.", "conditions": "(T[r('black widow')][c('winners')] == 'Lonnie' or T[r('black widow')][c('prices')] == 60) and (T[r('Lonnie')][c('prices')] != 60)"}, "4": {"text": "The redback cost 30 dollars more than Isaac's purchase.", "conditions": "(T[r('redback')][c('prices')] == T[r('Isaac')][c('prices')] + 30)"}, "5": {"text": "The ipstin spider cost 30 dollars more than Olga's purchase.", "conditions": "(T[r('ipstin spider')][c('prices')] == T[r('Olga')][c('prices')] + 30)"}, "6": {"text": "Neither Olga's purchase nor Hazel's purchase was the spider that sold for $120.", "conditions": "(T[r(120)][c('winners')] != 'Olga' and T[r(120)][c('winners')] != 'Hazel')"}, "7": {"text": "The spider that sold for $75 wasn't from Russia.", "conditions": "(T[r(75)][c('countries')] != 'Russia')"}, "8": {"text": "Yvette's purchase was from Honduras.", "conditions": "(T[r('Yvette')][c('countries')] == 'Honduras')"}, "9": {"text": "The arachnid that sold for $105 was either the raft spider or Phyllis's purchase.", "conditions": "(T[r(105)][c('spiders')] == 'raft spider' or T[r(105)][c('winners')] == 'Phyllis') and (T[r('Phyllis')][c('spiders')] != 'raft spider')"}, "10": {"text": "The arachnid that sold for $60 wasn't from Russia.", "conditions": "(T[r(60)][c('countries')] != 'Russia')"}, "11": {"text": "Neither the spider that sold for $105 nor the wolf spider was Hazel's purchase.", "conditions": "(T[r(105)][c('winners')] != 'Hazel' and T[r('wolf spider')][c('winners')] != 'Hazel') and (T[r(105)][c('spiders')] != 'wolf spider')"}, "12": {"text": "Of Lonnie's purchase and the arachnid that sold for $45, one was the black widow and the other was from Spain.", "conditions": "((T[r('Lonnie')][c('spiders')] == 'black widow' and T[r(45)][c('countries')] == 'Spain') or (T[r('Lonnie')][c('countries')] == 'Spain' and T[r(45)][c('spiders')] == 'black widow')) and (T[r('Lonnie')][c('prices')] != 45) and (T[r('black widow')][c('countries')] != 'Spain')"}, "13": {"text": "Isaac's purchase wasn't from Malawi.", "conditions": "(T[r('Isaac')][c('countries')] != 'Malawi')"}}, "initial": [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], "current": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], "applied_clues": ["1", "12"], "initial_to_current": [[["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "", ""], [75, "", "", ""], [90, "", "", ""], [105, "", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", ""], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "", "", ""], [105, "Yvette", "", ""], [120, "", "", ""]], [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]]], "unsolvable_child": [["prices", "winners", "spiders", "countries"], [45, "", "", "Spain"], [60, "", "ipstin spider", "Qatar"], [75, "", "", ""], [90, "Lonnie", "black widow", ""], [105, "Yvette", "", ""], [120, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "winners", "spiders", "countries"], [45, "Hazel", "archaenido", "Spain"], [60, "Isaac", "wolf spider", "France"], [75, "Lonnie", "black widow", "Malawi"], [90, "Olga", "redback", "Russia"], [105, "Yvette", "raft spider", "Honduras"], [120, "Phyllis", "ipstin spider", "Qatar"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "applied_clues": ["4"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Anthony", "violet", "Kamrar"], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "", "Lake Jesup"], [9, "Meredith", ""], [10, "Orlando", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "applied_clues": ["4", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", "Lake Jesup"], [9, "", ""], [10, "Orlando", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", "Lake Jesup"], [9, "Meredith", ""], [10, "Orlando", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "", "Lake Jesup"], [9, "Meredith", ""], [10, "Orlando", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Norfolk Times recently sponsored a \"Sail Around the World\" race that pitted dozens of sailors against each other to see who could circumnavigate the globe, solo, in the fewest number of days. Using only the clues below, match the days to the options from sailors and boat types. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 270, 274, 278, 282.\nsailors : Ed Alexander, Tara Carroll, Vicky Estes, Wendell Orr.\nboat types : gaff cutter, pilot cutter, schooner, sloop.", "clues": {"1": {"text": "Wendell Orr was either the sailor who finished in 270 days or the person in the gaff cutter.", "conditions": "(T[r('Wendell Orr')][c('days')] == 270 or T[r('Wendell Orr')][c('boat types')] == 'gaff cutter') and (T[r('gaff cutter')][c('days')] != 270)"}, "2": {"text": "Of Vicky Estes and the competitor in the sloop, one finished in 270 days and the other finished in 278 days.", "conditions": "((T[r('Vicky Estes')][c('days')] == 270 and T[r('sloop')][c('days')] == 278) or (T[r('Vicky Estes')][c('days')] == 278 and T[r('sloop')][c('days')] == 270)) and (T[r('sloop')][c('sailors')] != 'Vicky Estes')"}, "3": {"text": "Tara Carroll took 4 more days to finish than Ed Alexander.", "conditions": "(T[r('Tara Carroll')][c('days')] == T[r('Ed Alexander')][c('days')] + 4)"}, "4": {"text": "The sailor in the pilot cutter took 4 fewer days to finish than Ed Alexander.", "conditions": "(T[r('pilot cutter')][c('days')] == T[r('Ed Alexander')][c('days')] - 4)"}}, "initial": [["days", "sailors", "boat types"], [270, "", ""], [274, "", ""], [278, "", ""], [282, "", ""]], "current": [["days", "sailors", "boat types"], [270, "", "sloop"], [274, "", ""], [278, "Vicky Estes", ""], [282, "Wendell Orr", "gaff cutter"]], "applied_clues": ["2", "1"], "initial_to_current": [[["days", "sailors", "boat types"], [270, "", ""], [274, "", ""], [278, "", ""], [282, "", ""]], [["days", "sailors", "boat types"], [270, "", "sloop"], [274, "", ""], [278, "Vicky Estes", ""], [282, "", ""]], [["days", "sailors", "boat types"], [270, "", "sloop"], [274, "", ""], [278, "Vicky Estes", ""], [282, "Wendell Orr", "gaff cutter"]]], "unsolvable_child": [["days", "sailors", "boat types"], [270, "Ed Alexander", "sloop"], [274, "Tara Carroll", ""], [278, "Vicky Estes", ""], [282, "Wendell Orr", "gaff cutter"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["days", "sailors", "boat types"], [270, "Vicky Estes", "pilot cutter"], [274, "Ed Alexander", "schooner"], [278, "Tara Carroll", "sloop"], [282, "Wendell Orr", "gaff cutter"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", "Kansas"], [100, "Etsalle", "", ""]], "applied_clues": ["4", "3"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", "Kansas"], [100, "Etsalle", "", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "", "BMG-831", ""], [50, "Injitsu", "", ""], [75, "", "MRT-628", "Kansas"], [100, "Etsalle", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, ""], [380, "Leigh", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]], "applied_clues": ["3", "10", "11", "2", "8"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "Deanna", "", "Elk Grove"], [540, "", 4, ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "Leigh", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, ""], [380, "Leigh", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", "Fort Kent"], [700, "", "", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], "applied_clues": ["7", "10"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "Edith", "financial"], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", "telecom"], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "", "", ""], [29, "", "Frogs of Iowa", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "", "", ""], [29, "", "Frogs of Iowa", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Ken", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "", "", ""], [29, "", "Frogs of Iowa", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", "Green Swamp"]], "applied_clues": ["1", "5", "7"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", "Green Swamp"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", "Green Swamp"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", ""], [12, "", ""]], "applied_clues": ["4"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", ""], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "", "Bull Creek"], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "Meredith", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners and butterflies. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 45, 60, 75, 90.\nwinners : Otis, Phillip, Walter, Yvette.\nbutterflies : atlas, grayling, peacock, swallowtail.", "clues": {"1": {"text": "Yvette's purchase was either the insect that sold for $45 or the peacock butterfly.", "conditions": "(T[r('Yvette')][c('butterflies')] == 'peacock' or T[r('Yvette')][c('prices')] == 45) and (T[r('peacock')][c('prices')] != 45)"}, "2": {"text": "The swallowtail butterfly cost 15 dollars more than Phillip's purchase.", "conditions": "(T[r('swallowtail')][c('prices')] == T[r('Phillip')][c('prices')] + 15)"}, "3": {"text": "The atlas butterfly cost more than the peacock butterfly.", "conditions": "(T[r('atlas')][c('prices')] > T[r('peacock')][c('prices')])"}, "4": {"text": "The four butterflies were the butterfly that sold for $90, the grayling butterfly, Yvette's purchase and Walter's purchase.", "conditions": "(T[r(90)][c('butterflies')]!='grayling') and (T[r(90)][c('winners')]!='Yvette') and (T[r(90)][c('winners')]!='Walter') and (T[r('grayling')][c('winners')]!='Yvette') and (T[r('grayling')][c('winners')]!='Walter')"}}, "initial": [["prices", "winners", "butterflies"], [45, "", ""], [60, "", ""], [75, "", ""], [90, "", ""]], "current": [["prices", "winners", "butterflies"], [45, "", ""], [60, "Yvette", "peacock"], [75, "Phillip", ""], [90, "", "swallowtail"]], "applied_clues": ["1", "2"], "initial_to_current": [[["prices", "winners", "butterflies"], [45, "", ""], [60, "", ""], [75, "", ""], [90, "", ""]], [["prices", "winners", "butterflies"], [45, "", ""], [60, "Yvette", "peacock"], [75, "", ""], [90, "", ""]], [["prices", "winners", "butterflies"], [45, "", ""], [60, "Yvette", "peacock"], [75, "Phillip", ""], [90, "", "swallowtail"]]], "unsolvable_child": [["prices", "winners", "butterflies"], [45, "", "grayling"], [60, "Yvette", "peacock"], [75, "Phillip", "atlas"], [90, "", "swallowtail"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "winners", "butterflies"], [45, "Phillip", "grayling"], [60, "Walter", "swallowtail"], [75, "Yvette", "peacock"], [90, "Otis", "atlas"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "Deanna", 4, ""], [700, "", "", ""]], "applied_clues": ["3"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "Deanna", 4, ""], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "Gretchen", "", ""], [460, "", "", ""], [540, "", "", "Elk Grove"], [620, "Deanna", 4, "Ontario"], [700, "", "", ""]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Edith", "financial"], [26, "", "", ""], [27, "GXTV", "", "real estate"], [28, "", "", ""], [29, "JMO", "Heathcliff", "telecom"], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers and trainers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 8, 9, 10, 11, 12.\ncustomers : Arnold, Blake, Danny, Emma, Garrett.\ntrainers : Howard, Irene, Jimmy, Kristin, Nicholas.", "clues": {"1": {"text": "Danny's appointment is 1 hour before the appointment with Irene.", "conditions": "(T[r('Danny')][c('times')] == T[r('Irene')][c('times')] - 1)"}, "2": {"text": "Of the lesson with Irene and the session at 11am, one is Emma's and the other is Blake's.", "conditions": "(T[r('Emma')][c('trainers')] == 'Irene' and T[r('Blake')][c('times')] == 11 or T[r('Blake')][c('trainers')] == 'Irene' and T[r('Emma')][c('times')] == 11) and (T[r('Irene')][c('times')] != 11)"}, "3": {"text": "The lesson at 8 am is either Emma's lesson or the appointment with Jimmy.", "conditions": "(T[r('Emma')][c('times')] == 8 or T[r('Jimmy')][c('times')] == 8) and (T[r('Emma')][c('trainers')] != 'Jimmy')"}, "4": {"text": "The session at 12 am is with Howard.", "conditions": "(T[r(12)][c('trainers')] == 'Howard')"}, "5": {"text": "The appointment at 11 am isn't with Nicholas.", "conditions": "(T[r(11)][c('trainers')] != 'Nicholas')"}, "6": {"text": "Emma's session is 2 hours after Arnold's lesson.", "conditions": "(T[r('Emma')][c('times')] == T[r('Arnold')][c('times')] + 2)"}}, "initial": [["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["times", "customers", "trainers"], [8, "Emma", "Irene"], [9, "", ""], [10, "", ""], [11, "Blake", ""], [12, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["times", "customers", "trainers"], [8, "Emma", "Irene"], [9, "", ""], [10, "", ""], [11, "Blake", ""], [12, "", ""]]], "unsolvable_child": [["times", "customers", "trainers"], [8, "Emma", "Irene"], [9, "", "Jimmy"], [10, "", ""], [11, "Blake", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["times", "customers", "trainers"], [8, "Arnold", "Jimmy"], [9, "Danny", "Nicholas"], [10, "Emma", "Irene"], [11, "Blake", "Kristin"], [12, "Garrett", "Howard"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "Felix", "", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], "applied_clues": ["1"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "Felix", "", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "", "", "Toledo"], [48, "", "", ""], [55, "Felix", "black", "Oakland Acres"], [62, "", "", ""], [69, "", "gray", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Springfield County Bird Club met today, and several of its members brought their newest acquisitions. Using only the clues below, match the months to the options from names and birds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nnames : Bonita, Joan, Laura, Roberta, Velma.\nbirds : finch, lorikeet, lovebird, macaw, parakeet.", "clues": {"1": {"text": "Velma's pet isn't the lovebird.", "conditions": "(T[r('Velma')][c('birds')] != 'lovebird')"}, "2": {"text": "Of the finch and the macaw, one was bought in January and the other is Laura's.", "conditions": "((T[r('finch')][c('months')] == 1 and T[r('macaw')][c('names')] == 'Laura') or (T[r('macaw')][c('months')] == 1 and T[r('finch')][c('names')] == 'Laura')) and (T[r(1)][c('names')] != 'Laura')"}, "3": {"text": "The bird bought in March is either Bonita's pet or the finch.", "conditions": "(T[r(3)][c('names')] == 'Bonita' or T[r(3)][c('birds')] == 'finch') and (T[r('Bonita')][c('birds')] != 'finch')"}, "4": {"text": "Joan's pet was bought 3 months before the lorikeet.", "conditions": "(T[r('Joan')][c('months')] + 3 == T[r('lorikeet')][c('months')])"}, "5": {"text": "The finch was bought sometime after Roberta's pet.", "conditions": "(T[r('finch')][c('months')] > T[r('Roberta')][c('months')])"}, "6": {"text": "Bonita's pet was bought in May.", "conditions": "(T[r('Bonita')][c('months')] == 5)"}, "7": {"text": "The macaw was bought 1 month before the parakeet.", "conditions": "(T[r('macaw')][c('months')] + 1 == T[r('parakeet')][c('months')])"}}, "initial": [["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], "current": [["months", "names", "birds"], [1, "", "finch"], [2, "", ""], [3, "", ""], [4, "Laura", "macaw"], [5, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "finch"], [2, "", ""], [3, "", ""], [4, "Laura", "macaw"], [5, "", ""]]], "unsolvable_child": [["months", "names", "birds"], [1, "", "finch"], [2, "", ""], [3, "", ""], [4, "Laura", "macaw"], [5, "", "parakeet"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Roberta", "parakeet"], [3, "Laura", "finch"], [4, "Velma", "lorikeet"], [5, "Bonita", "lovebird"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], "applied_clues": ["4", "8"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "", "WB-664", ""], [2, "", "TV-412", "larval growth"], [3, "Seth", "ZF-15", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the prices to the options from winners and butterflies. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 45, 60, 75, 90.\nwinners : Otis, Phillip, Walter, Yvette.\nbutterflies : atlas, grayling, peacock, swallowtail.", "clues": {"1": {"text": "Yvette's purchase was either the insect that sold for $45 or the peacock butterfly.", "conditions": "(T[r('Yvette')][c('butterflies')] == 'peacock' or T[r('Yvette')][c('prices')] == 45) and (T[r('peacock')][c('prices')] != 45)"}, "2": {"text": "The swallowtail butterfly cost 15 dollars more than Phillip's purchase.", "conditions": "(T[r('swallowtail')][c('prices')] == T[r('Phillip')][c('prices')] + 15)"}, "3": {"text": "The atlas butterfly cost more than the peacock butterfly.", "conditions": "(T[r('atlas')][c('prices')] > T[r('peacock')][c('prices')])"}, "4": {"text": "The four butterflies were the butterfly that sold for $90, the grayling butterfly, Yvette's purchase and Walter's purchase.", "conditions": "(T[r(90)][c('butterflies')]!='grayling') and (T[r(90)][c('winners')]!='Yvette') and (T[r(90)][c('winners')]!='Walter') and (T[r('grayling')][c('winners')]!='Yvette') and (T[r('grayling')][c('winners')]!='Walter')"}}, "initial": [["prices", "winners", "butterflies"], [45, "", ""], [60, "", ""], [75, "", ""], [90, "", ""]], "current": [["prices", "winners", "butterflies"], [45, "Yvette", ""], [60, "Phillip", "peacock"], [75, "", "swallowtail"], [90, "", ""]], "applied_clues": ["1", "2"], "initial_to_current": [[["prices", "winners", "butterflies"], [45, "", ""], [60, "", ""], [75, "", ""], [90, "", ""]], [["prices", "winners", "butterflies"], [45, "Yvette", ""], [60, "", "peacock"], [75, "", ""], [90, "", ""]], [["prices", "winners", "butterflies"], [45, "Yvette", ""], [60, "Phillip", "peacock"], [75, "", "swallowtail"], [90, "", ""]]], "unsolvable_child": [["prices", "winners", "butterflies"], [45, "Yvette", "grayling"], [60, "Phillip", "peacock"], [75, "", "swallowtail"], [90, "", "atlas"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "winners", "butterflies"], [45, "Phillip", "grayling"], [60, "Walter", "swallowtail"], [75, "Yvette", "peacock"], [90, "Otis", "atlas"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], "applied_clues": ["4", "5", "8", "2", "11", "7", "3"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "Diane DeNiro", 10, ""], [33, "", "", "Portland"], [36, "", 7, ""]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Nicholas and Edith are having a small dinner party this evening at their home in Cedar Valley, and they've decided to open a select number of rare wines from their personal collection to celebrate the occasion. Using only the clues below, match the vintages to the options from wines and types. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "vintages : 1984, 1988, 1992, 1996.\nwines : Annata Branco, Bianca Flaux, Ece Suss, Vendemmia.\ntypes : gewurztraminer, merlot, pinot noir, riesling.", "clues": {"1": {"text": "The Ece Suss was bottled sometime after the Annata Branco.", "conditions": "(T[r('Ece Suss')][c('vintages')] > T[r('Annata Branco')][c('vintages')])"}, "2": {"text": "The Bianca Flaux was bottled 4 years before the Vendemmia.", "conditions": "(T[r('Vendemmia')][c('vintages')] - T[r('Bianca Flaux')][c('vintages')] == 4)"}, "3": {"text": "The 1988 bottle is a pinot noir.", "conditions": "(T[r(1988)][c('types')] == 'pinot noir')"}, "4": {"text": "The merlot is either the Annata Branco or the Bianca Flaux.", "conditions": "(T[r('merlot')][c('wines')] == 'Annata Branco' or T[r('merlot')][c('wines')] == 'Bianca Flaux')"}, "5": {"text": "The Bianca Flaux was bottled sometime after the Ece Suss.", "conditions": "(T[r('Bianca Flaux')][c('vintages')] > T[r('Ece Suss')][c('vintages')])"}, "6": {"text": "The 1984 bottle is a gewurztraminer.", "conditions": "(T[r(1984)][c('types')] == 'gewurztraminer')"}}, "initial": [["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], "current": [["vintages", "wines", "types"], [1984, "Annata Branco", "merlot"], [1988, "", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]], "applied_clues": ["2", "4"], "initial_to_current": [[["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], [["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]], [["vintages", "wines", "types"], [1984, "Annata Branco", "merlot"], [1988, "", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]]], "unsolvable_child": [["vintages", "wines", "types"], [1984, "Annata Branco", "merlot"], [1988, "Ece Suss", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["vintages", "wines", "types"], [1984, "Annata Branco", "gewurztraminer"], [1988, "Ece Suss", "pinot noir"], [1992, "Bianca Flaux", "merlot"], [1996, "Vendemmia", "riesling"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Nicholas and Edith are having a small dinner party this evening at their home in Cedar Valley, and they've decided to open a select number of rare wines from their personal collection to celebrate the occasion. Using only the clues below, match the vintages to the options from wines and types. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "vintages : 1984, 1988, 1992, 1996.\nwines : Annata Branco, Bianca Flaux, Ece Suss, Vendemmia.\ntypes : gewurztraminer, merlot, pinot noir, riesling.", "clues": {"1": {"text": "The Ece Suss was bottled sometime after the Annata Branco.", "conditions": "(T[r('Ece Suss')][c('vintages')] > T[r('Annata Branco')][c('vintages')])"}, "2": {"text": "The Bianca Flaux was bottled 4 years before the Vendemmia.", "conditions": "(T[r('Vendemmia')][c('vintages')] - T[r('Bianca Flaux')][c('vintages')] == 4)"}, "3": {"text": "The 1988 bottle is a pinot noir.", "conditions": "(T[r(1988)][c('types')] == 'pinot noir')"}, "4": {"text": "The merlot is either the Annata Branco or the Bianca Flaux.", "conditions": "(T[r('merlot')][c('wines')] == 'Annata Branco' or T[r('merlot')][c('wines')] == 'Bianca Flaux')"}, "5": {"text": "The Bianca Flaux was bottled sometime after the Ece Suss.", "conditions": "(T[r('Bianca Flaux')][c('vintages')] > T[r('Ece Suss')][c('vintages')])"}, "6": {"text": "The 1984 bottle is a gewurztraminer.", "conditions": "(T[r(1984)][c('types')] == 'gewurztraminer')"}}, "initial": [["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], "current": [["vintages", "wines", "types"], [1984, "Annata Branco", "merlot"], [1988, "Ece Suss", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]], "applied_clues": ["2", "4", "5"], "initial_to_current": [[["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "", ""], [1996, "", ""]], [["vintages", "wines", "types"], [1984, "", ""], [1988, "", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]], [["vintages", "wines", "types"], [1984, "Annata Branco", "merlot"], [1988, "", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]], [["vintages", "wines", "types"], [1984, "Annata Branco", "merlot"], [1988, "Ece Suss", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]]], "unsolvable_child": [["vintages", "wines", "types"], [1984, "Annata Branco", "merlot"], [1988, "Ece Suss", ""], [1992, "Bianca Flaux", ""], [1996, "Vendemmia", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["vintages", "wines", "types"], [1984, "Annata Branco", "gewurztraminer"], [1988, "Ece Suss", "pinot noir"], [1992, "Bianca Flaux", "merlot"], [1996, "Vendemmia", "riesling"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "Nick", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]], "applied_clues": ["7", "10", "6"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "Nick", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "Nick", "", ""], [3, "", "", ""], [4, "Melissa", "", "Selma"], [5, "", "flashlights", ""], [6, "", "chainsaws", "Menlo"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Springfield County Bird Club met today, and several of its members brought their newest acquisitions. Using only the clues below, match the months to the options from names and birds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nnames : Bonita, Joan, Laura, Roberta, Velma.\nbirds : finch, lorikeet, lovebird, macaw, parakeet.", "clues": {"1": {"text": "Velma's pet isn't the lovebird.", "conditions": "(T[r('Velma')][c('birds')] != 'lovebird')"}, "2": {"text": "Of the finch and the macaw, one was bought in January and the other is Laura's.", "conditions": "((T[r('finch')][c('months')] == 1 and T[r('macaw')][c('names')] == 'Laura') or (T[r('macaw')][c('months')] == 1 and T[r('finch')][c('names')] == 'Laura')) and (T[r(1)][c('names')] != 'Laura')"}, "3": {"text": "The bird bought in March is either Bonita's pet or the finch.", "conditions": "(T[r(3)][c('names')] == 'Bonita' or T[r(3)][c('birds')] == 'finch') and (T[r('Bonita')][c('birds')] != 'finch')"}, "4": {"text": "Joan's pet was bought 3 months before the lorikeet.", "conditions": "(T[r('Joan')][c('months')] + 3 == T[r('lorikeet')][c('months')])"}, "5": {"text": "The finch was bought sometime after Roberta's pet.", "conditions": "(T[r('finch')][c('months')] > T[r('Roberta')][c('months')])"}, "6": {"text": "Bonita's pet was bought in May.", "conditions": "(T[r('Bonita')][c('months')] == 5)"}, "7": {"text": "The macaw was bought 1 month before the parakeet.", "conditions": "(T[r('macaw')][c('months')] + 1 == T[r('parakeet')][c('months')])"}}, "initial": [["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], "current": [["months", "names", "birds"], [1, "Bonita", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], "applied_clues": ["2", "7", "3"], "initial_to_current": [[["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", ""], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "Bonita", "macaw"], [2, "", "parakeet"], [3, "Laura", "finch"], [4, "", ""], [5, "", ""]]], "unsolvable_child": [["months", "names", "birds"], [1, "Bonita", "macaw"], [2, "Joan", "parakeet"], [3, "Laura", "finch"], [4, "", "lovebird"], [5, "", "lorikeet"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Roberta", "parakeet"], [3, "Laura", "finch"], [4, "Velma", "lorikeet"], [5, "Bonita", "lovebird"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "Explore More", "Sheryl", ""], [350, "", "", ""], [400, "", "", "Airstream"]], "applied_clues": ["2"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "Explore More", "Sheryl", ""], [350, "", "", ""], [400, "", "", "Airstream"]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "Explore More", "Sheryl", "Mack truck"], [350, "", "", ""], [400, "", "", "Airstream"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The international desk at the Herald News-Times sent out a number of its top reporters to cover breaking stories in various parts of the world this week. Using only the clues below, match the days to the options from reporters and stories. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days :4, 5, 6, 7.\nreporters : Linda Lott, Randy Reid, Sid Snyder, Tam Terry.\nstories : earthquake, flooding, royal wedding, solar eclipse.", "clues": {"1": {"text": "The four people were the reporter sent out on April 7th, the reporter who covered the solar eclipse, the journalist who covered the earthquake and Randy Reid.", "conditions": "(T[r(7)][c('stories')] != 'solar eclipse') and (T[r(7)][c('stories')] != 'earthquake') and (T[r(7)][c('reporters')]!='Randy Reid') and (T[r('solar eclipse')][c('reporters')]!='Randy Reid') and (T[r('earthquake')][c('reporters')]!='Randy Reid')"}, "2": {"text": "Sid Snyder left 1 day after Tam Terry.", "conditions": "(T[r('Sid Snyder')][c('days')] - T[r('Tam Terry')][c('days')] == 1)"}, "3": {"text": "Randy Reid left 1 day after the journalist who covered the solar eclipse.", "conditions": "(T[r('Randy Reid')][c('days')] - T[r('solar eclipse')][c('days')] == 1)"}, "4": {"text": "Linda Lott left 1 day before the journalist who covered the flooding.", "conditions": "(T[r('flooding')][c('days')] - T[r('Linda Lott')][c('days')] == 1)"}}, "initial": [["days", "reporters", "stories"], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "reporters", "stories"], [4, "Tam Terry", ""], [5, "Sid Snyder", ""], [6, "", "solar eclipse"], [7, "Randy Reid", ""]], "applied_clues": ["2", "3"], "initial_to_current": [[["days", "reporters", "stories"], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "reporters", "stories"], [4, "Tam Terry", ""], [5, "Sid Snyder", ""], [6, "", ""], [7, "", ""]], [["days", "reporters", "stories"], [4, "Tam Terry", ""], [5, "Sid Snyder", ""], [6, "", "solar eclipse"], [7, "Randy Reid", ""]]], "unsolvable_child": [["days", "reporters", "stories"], [4, "Tam Terry", ""], [5, "Sid Snyder", ""], [6, "Linda Lott", "solar eclipse"], [7, "Randy Reid", "flooding"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["days", "reporters", "stories"], [4, "Linda Lott", "solar eclipse"], [5, "Randy Reid", "flooding"], [6, "Tam Terry", "earthquake"], [7, "Sid Snyder", "royal wedding"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "applied_clues": ["4", "6", "3"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "Esther", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", ""], [11, "", "Green Swamp"], [12, "Alex", ""]], "applied_clues": ["1", "5", "7", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", "Green Swamp"], [12, "Alex", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", ""], [11, "", "Green Swamp"], [12, "Alex", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", ""], [11, "", "Green Swamp"], [12, "Alex", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "applied_clues": ["4"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "", "Bull Creek"], [10, "", ""], [11, "Meredith", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "mobile phones", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], "applied_clues": ["7", "10", "6", "8", "9", "4", "11", "2", "3", "5"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", ""], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", ""], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", ""], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "mobile phones", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "mobile phones", ""], [3, "Melissa", "", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "Nick", "", "Carbon"], [2, "Shari", "mobile phones", ""], [3, "Melissa", "batons", "Selma"], [4, "Howard", "", "Nice"], [5, "", "chainsaws", "Menlo"], [6, "", "flashlights", ""]], "clue_applied_to_unsolvable_child": "14"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, ""], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]], "applied_clues": ["3", "10"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", 4, ""], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, ""], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", ""]], "applied_clues": ["2"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", ""]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", "Mack truck"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Help Donna make sense of Dr. Finklestein's appointment list for today. Using only the clues below, match the times to the options from names, ailments, and insurers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 9, 10, 11, 12.\nnames : Billy, Guy, Paul, Terry.\nailments : back pain, hip pain, shingles, vertigo.\ninsurers : Ambercare, HealthCo, Lifealign, Triflex.", "clues": {"1": {"text": "The person with Lifealign insurance has an appointment sometime before the patient suffering from shingles.", "conditions": "(T[r('Lifealign')][c('times')] < T[r('shingles')][c('times')])"}, "2": {"text": "The patient with the 12 noon appointment is either Terry or the patient with Ambercare insurance.", "conditions": "(T[r(12)][c('names')] == 'Terry' or T[r(12)][c('insurers')] == 'Ambercare') and (T[r('Terry')][c('insurers')] != 'Ambercare')"}, "3": {"text": "The patient suffering from back pain has an appointment 2 hours before Guy.", "conditions": "(T[r('back pain')][c('times')] == T[r('Guy')][c('times')] - 2)"}, "4": {"text": "The person with Ambercare insurance has an appointment sometime after the person suffering from vertigo.", "conditions": "(T[r('Ambercare')][c('times')] > T[r('vertigo')][c('times')])"}, "5": {"text": "Neither Billy nor the person suffering from shingles is the person with Lifealign insurance.", "conditions": "(T[r('Billy')][c('insurers')] != 'Lifealign' and T[r('shingles')][c('insurers')] != 'Lifealign') and (T[r('Billy')][c('ailments')] != 'shingles')"}, "6": {"text": "The person with the 9:00am appointment is either Paul or the patient suffering from back pain.", "conditions": "(T[r(9)][c('names')] == 'Paul' or T[r(9)][c('ailments')] == 'back pain') and (T[r('Paul')][c('ailments')] != 'back pain')"}, "7": {"text": "The patient with the 10:00am appointment has Triflex insurance.", "conditions": "(T[r(10)][c('insurers')] == 'Triflex')"}, "8": {"text": "Of the patient suffering from vertigo and the person with Ambercare insurance, one has the 11:00am appointment and the other is Billy.", "conditions": "((T[r('vertigo')][c('times')] == 11 and T[r('Ambercare')][c('names')] == 'Billy') or (T[r('Ambercare')][c('times')] == 11 and T[r('vertigo')][c('names')] == 'Billy')) and (T[r('vertigo')][c('insurers')] != 'Ambercare') and (T[r(11)][c('names')] != 'Billy')"}}, "initial": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], "current": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "vertigo", ""], [11, "", "", "Ambercare"], [12, "Terry", "", ""]], "applied_clues": ["8", "2"], "initial_to_current": [[["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "vertigo", ""], [11, "", "", "Ambercare"], [12, "", "", ""]], [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "vertigo", ""], [11, "", "", "Ambercare"], [12, "Terry", "", ""]]], "unsolvable_child": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "Billy", "vertigo", ""], [11, "", "", "Ambercare"], [12, "Terry", "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", "Lifealign"], [10, "Paul", "shingles", "Triflex"], [11, "Guy", "vertigo", "HealthCo"], [12, "Billy", "hip pain", "Ambercare"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "Zachary", "beach chair", ""], [225, "", "", ""]], "applied_clues": ["5", "2", "7"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "Zachary", "beach chair", ""], [225, "", "", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "Zachary", "beach chair", ""], [225, "", "", "banana"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "", "BMG-831", ""], [50, "Injitsu", "", ""], [75, "", "MRT-628", "Kansas"], [100, "Etsalle", "", ""]], "applied_clues": ["4", "3", "7"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", "Kansas"], [100, "Etsalle", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "BMG-831", ""], [50, "Injitsu", "", ""], [75, "", "MRT-628", "Kansas"], [100, "Etsalle", "", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "", "BMG-831", ""], [50, "Injitsu", "YGA-441", "Rhode Island"], [75, "", "MRT-628", "Kansas"], [100, "Etsalle", "SVZ-880", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Bill is shopping for a digital camera. Using only the clues below, match the prices to the options from companies and cameras. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices (dollars) : 550, 575, 600, 625.\ncompanies : Dayero, Lirios, Nectron, Torvia.\ncameras : DM-5000, Lectra 6, Tela G5, Zenix 2C.", "clues": {"1": {"text": "The camera made by Lirios costs 25 dollars more than the model made by Torvia.", "conditions": "(T[r('Lirios')][c('prices')] == T[r('Torvia')][c('prices')] + 25)"}, "2": {"text": "The Zenix 2C costs more than the model made by Torvia.", "conditions": "(T[r('Zenix 2C')][c('prices')] > T[r('Torvia')][c('prices')])"}, "3": {"text": "Of the camera made by Torvia and the model made by Nectron, one is the Tela G5 and the other costs $550.", "conditions": "((T[r('Torvia')][c('cameras')] == 'Tela G5' and T[r(550)][c('companies')] == 'Nectron') or (T[r('Nectron')][c('cameras')] == 'Tela G5' and T[r(550)][c('companies')] == 'Torvia')) and (T[r(550)][c('cameras')] != 'Tela G5') and (T[r('Torvia')][c('companies')] != 'Nectron')"}, "4": {"text": "The camera made by Lirios is the Lectra 6.", "conditions": "(T[r('Lirios')][c('cameras')] == 'Lectra 6')"}, "5": {"text": "The Tela G5 costs 25 dollars more than the Zenix 2C.", "conditions": "(T[r('Tela G5')][c('prices')] == T[r('Zenix 2C')][c('prices')] + 25)"}}, "initial": [["prices", "companies", "cameras"], [550, "", ""], [575, "", ""], [600, "", ""], [625, "", ""]], "current": [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "", ""], [600, "Nectron", "Tela G5"], [625, "", ""]], "applied_clues": ["3"], "initial_to_current": [[["prices", "companies", "cameras"], [550, "", ""], [575, "", ""], [600, "", ""], [625, "", ""]], [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "", ""], [600, "Nectron", "Tela G5"], [625, "", ""]]], "unsolvable_child": [["prices", "companies", "cameras"], [550, "Torvia", ""], [575, "Lirios", ""], [600, "Nectron", "Tela G5"], [625, "", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["prices", "companies", "cameras"], [550, "Torvia", "DM-5000"], [575, "Lirios", "Lectra 6"], [600, "Dayero", "Zenix 2C"], [625, "Nectron", "Tela G5"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers and shapes. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Karen, Natasha, Patrick, Salvador, Yvette.\nshapes : beach chair, golf ball, mountain, sports car, train.", "clues": {"1": {"text": "The $175 piece isn't shaped like a beach chair.", "conditions": "(T[r(175)][c('shapes')] != 'beach chair')"}, "2": {"text": "Natasha's piece costs 50 dollars less than Patrick's piece.", "conditions": "(T[r('Natasha')][c('prices')] == T[r('Patrick')][c('prices')] - 50)"}, "3": {"text": "The piece shaped like a train costs 75 dollars more than the cake shaped like a golf ball.", "conditions": "(T[r('train')][c('prices')] == T[r('golf ball')][c('prices')] + 75)"}, "4": {"text": "Salvador's piece is shaped like a sports car.", "conditions": "(T[r('Salvador')][c('shapes')] == 'sports car')"}, "5": {"text": "Natasha's piece costs somewhat more than Karen's piece.", "conditions": "(T[r('Natasha')][c('prices')] > T[r('Karen')][c('prices')])"}, "6": {"text": "Yvette's piece costs $175.", "conditions": "(T[r('Yvette')][c('prices')] == 175)"}}, "initial": [["prices", "customers", "shapes"], [125, "", ""], [150, "", ""], [175, "", ""], [200, "", ""], [225, "", ""]], "current": [["prices", "customers", "shapes"], [125, "", "beach chair"], [150, "", ""], [175, "Yvette", ""], [200, "", ""], [225, "", ""]], "applied_clues": ["6", "1"], "initial_to_current": [[["prices", "customers", "shapes"], [125, "", ""], [150, "", ""], [175, "", ""], [200, "", ""], [225, "", ""]], [["prices", "customers", "shapes"], [125, "", ""], [150, "", ""], [175, "Yvette", ""], [200, "", ""], [225, "", ""]], [["prices", "customers", "shapes"], [125, "", "beach chair"], [150, "", ""], [175, "Yvette", ""], [200, "", ""], [225, "", ""]]], "unsolvable_child": [["prices", "customers", "shapes"], [125, "", "beach chair"], [150, "Natasha", ""], [175, "Yvette", ""], [200, "Patrick", ""], [225, "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "customers", "shapes"], [125, "Karen", "golf ball"], [150, "Natasha", "beach chair"], [175, "Yvette", "mountain"], [200, "Patrick", "train"], [225, "Salvador", "sports car"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "Lucky Star", "Paradise", "soy"]], "applied_clues": ["5", "4"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "Lucky Star", "", "soy"]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "Lucky Star", "Paradise", "soy"]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Meadowgrove", "", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "Lucky Star", "Paradise", "soy"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "Daryl", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "Daryl", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "Daryl", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "red", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3", "5", "2", "10"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "red", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "gray", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "GXTV", "Heathcliff", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "GXTV", "Heathcliff", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "GXTV", "Heathcliff", "telecom"], [29, "JMO", "", "real estate"], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "Felix", "gray", ""], [62, "", "", ""], [69, "", "", "Oakland Acres"]], "applied_clues": ["1"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "Felix", "gray", ""], [62, "", "", ""], [69, "", "", "Oakland Acres"]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "", "black", ""], [48, "", "", ""], [55, "Felix", "gray", "Toledo"], [62, "", "", ""], [69, "", "", "Oakland Acres"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Piper Hills Academy recently installed a high-speed 3-D printer in its technology lab, and several students were given an opportunity this week to use it in order to print items of their own design. Using only the clues below, match the times to the options from students, items, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 10, 15, 20, 25, 30, 35.\nstudents : Adrienne, Bertha, Eleanor, Felicia, Irma, Willis.\nitems : cup, flower, mask, phone case, skull, whistle.\ncolors : green, orange, purple, red, white, yellow.", "clues": {"1": {"text": "The skull took 5 more minutes to print than Bertha's piece.", "conditions": "(T[r('skull')][c('times')] == 5 + T[r('Bertha')][c('times')])"}, "2": {"text": "Of the red piece and the item that printed in 20 minutes, one was the mask and the other was Felicia's.", "conditions": "(((T[r('red')][c('items')] == 'mask' and T[r(20)][c('students')] == 'Felicia') or (T[r('red')][c('students')] == 'Felicia' and T[r(20)][c('items')] == 'mask'))) and (T[r(20)][c('colors')] != 'red') and (T[r('Felicia')][c('items')] != 'mask')"}, "3": {"text": "Willis's item wasn't the skull.", "conditions": "(T[r('Willis')][c('items')] != 'skull')"}, "4": {"text": "The item that printed in 25 minutes wasn't the phone case.", "conditions": "(T[r(25)][c('items')] != 'phone case')"}, "5": {"text": "Adrienne's piece was either the piece that printed in 10 minutes or the red item.", "conditions": "(T[r('Adrienne')][c('times')] == 10 or T[r('Adrienne')][c('colors')] == 'red') and (T[r(10)][c('colors')] != 'red')"}, "6": {"text": "Of the item that printed in 30 minutes and the item that printed in 20 minutes, one was Irma's and the other was the skull.", "conditions": "(((T[r(30)][c('students')] == 'Irma' and T[r(20)][c('items')] == 'skull') or (T[r(30)][c('items')] == 'skull' and T[r(20)][c('students')] == 'Irma'))) and (T[r('Irma')][c('items')] != 'skull')"}, "7": {"text": "Bertha's piece took 10 more minutes to print than the flower.", "conditions": "(T[r('Bertha')][c('times')] == 10 + T[r('flower')][c('times')])"}, "8": {"text": "The yellow design wasn't the phone case.", "conditions": "(T[r('yellow')][c('items')] != 'phone case')"}, "9": {"text": "Of the flower and the white design, one took 15 minutes to print and the other took 10 minutes to print.", "conditions": "(((T[r('flower')][c('times')] == 15 and T[r('white')][c('times')] == 10) or (T[r('flower')][c('times')] == 10 and T[r('white')][c('times')] == 15))) and (T[r('flower')][c('colors')] != 'white')"}, "10": {"text": "The cup required somewhat fewer minutes to print than Felicia's design.", "conditions": "(T[r('cup')][c('times')] < T[r('Felicia')][c('times')])"}, "11": {"text": "Felicia's design required 15 fewer minutes to print than the green item.", "conditions": "(T[r('Felicia')][c('times')] == T[r('green')][c('times')] - 15)"}, "12": {"text": "The orange design, the flower, Irma's item and the item that printed in 35 minutes were all different items.", "conditions": "(T[r('orange')][c('items')] != 'flower') and (T[r('orange')][c('students')] != 'Irma') and (T[r('orange')][c('times')] != 35) and (T[r('flower')][c('students')] != 'Irma') and (T[r('flower')][c('times')] != 35) and (T[r('Irma')][c('times')] != 35)"}}, "initial": [["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "current": [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "", "", ""]], "applied_clues": ["9", "6"], "initial_to_current": [[["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "", "", ""]]], "unsolvable_child": [["times", "students", "items", "colors"], [10, "Felicia", "flower", "red"], [15, "", "", "white"], [20, "Irma", "mask", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["times", "students", "items", "colors"], [10, "Adrienne", "cup", "white"], [15, "Felicia", "flower", "red"], [20, "Irma", "mask", "yellow"], [25, "Bertha", "whistle", "orange"], [30, "Eleanor", "skull", "green"], [35, "Willis", "phone case", "purple"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "Esther", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "applied_clues": ["4", "6", "3", "7"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "Esther", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "Esther", ""], [11, "Lana", "Bull Creek"], [12, "Danielle", "Reedy Creek"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "Zachary", "", ""], [225, "", "", ""]], "applied_clues": ["5", "2", "7"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "Zachary", "", ""], [225, "", "", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", "raspberry"], [150, "Erica", "", "peach"], [175, "", "beach chair", ""], [200, "Zachary", "", ""], [225, "", "", "banana"]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "Deanna", "", "Elk Grove"], [540, "", 4, ""], [620, "", "", ""], [700, "", "", ""]], "applied_clues": ["3"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "Deanna", "", "Elk Grove"], [540, "", 4, ""], [620, "", "", ""], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, ""], [620, "", "", ""], [700, "", "", ""]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "", "", ""], [3, "Seth", "", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]], "applied_clues": ["4", "8"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "Christian", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "", "", ""], [3, "Seth", "", "gamma rays"], [4, "", "", ""], [5, "Christian", "GX-13", ""]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "", "TV-412", "larval growth"], [2, "", "WB-664", ""], [3, "Seth", "AV-435", "gamma rays"], [4, "", "ZF-15", ""], [5, "Christian", "GX-13", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]], "applied_clues": ["3", "12", "8", "6", "4", "7"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "", "", "garbage man"], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "Nathaniel", "lacrosse", ""], [25, "Sergio", "baseball", "lawyer"], [32, "Lowell", "", "garbage man"], [39, "", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "applied_clues": ["9", "2"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Wayne", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", "Gabby Garza"], [22, "", "", ""], [29, "", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", ""], [12, "", "Bull Creek"]], "applied_clues": ["4", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", ""], [12, "", "Bull Creek"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Meredith", ""], [9, "", "Lake Jesup"], [10, "Orlando", ""], [11, "", "Reedy Creek"], [12, "", "Bull Creek"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "\"Parties Unlimited\" caters to a wide variety of special requests (such as clowns or magicians) for its clients. Using only the clues below, match the days to the options from requests and families. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 3, 4, 5, 6, 7.\nrequests : clown, petting zoo, photo booth, rock band, superhero.\nfamilies : Benton, Hayden, Ingram, Stanley, Zimmerman.", "clues": {"1": {"text": "The party on October 5 is for the Ingrams.", "conditions": "(T[r(5)][c('families')] == 'Ingram')"}, "2": {"text": "The booking that requested the clown is sometime after the Ingram family booking.", "conditions": "(T[r('clown')][c('days')] > T[r('Ingram')][c('days')])"}, "3": {"text": "The booking on October 4 is either the party that requested the petting zoo or the Hayden family booking.", "conditions": "(T[r(4)][c('requests')] == 'petting zoo' or T[r(4)][c('families')] == 'Hayden') and (T[r('Hayden')][c('requests')] != 'petting zoo')"}, "4": {"text": "The five events are the booking on October 7, the party that requested the rock band, the event that requested the superhero, the Ingram family party and the Benton family party.", "conditions": "(T[r('rock band')][c('days')] != 7) and (T[r('superhero')][c('days')] != 7) and (T[r('Ingram')][c('days')] != 7) and (T[r('Benton')][c('days')] != 7) and (T[r('rock band')][c('families')] != 'Ingram') and (T[r('rock band')][c('families')] != 'Benton') and (T[r('superhero')][c('families')] != 'Ingram') and (T[r('superhero')][c('families')] != 'Benton')"}, "5": {"text": "The booking that requested the photo booth is either the event on October 6 or the event on October 3.", "conditions": "(T[r('photo booth')][c('days')] == 6 or T[r('photo booth')][c('days')] == 3)"}, "6": {"text": "The Ingram family booking is 1 day before the booking that requested the superhero.", "conditions": "(T[r('Ingram')][c('days')] == T[r('superhero')][c('days')] - 1)"}, "7": {"text": "The party that requested the superhero is for the Zimmermans.", "conditions": "(T[r('superhero')][c('families')] == 'Zimmerman')"}}, "initial": [["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "requests", "families"], [3, "photo booth", "Hayden"], [4, "petting zoo", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "applied_clues": ["5", "3"], "initial_to_current": [[["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", "Hayden"], [4, "petting zoo", ""], [5, "", ""], [6, "", ""], [7, "", ""]]], "unsolvable_child": [["days", "requests", "families"], [3, "photo booth", "Hayden"], [4, "petting zoo", ""], [5, "", "Ingram"], [6, "", ""], [7, "", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["days", "requests", "families"], [3, "photo booth", "Benton"], [4, "rock band", "Hayden"], [5, "petting zoo", "Ingram"], [6, "superhero", "Zimmerman"], [7, "clown", "Stanley"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Norfolk Times recently sponsored a \"Sail Around the World\" race that pitted dozens of sailors against each other to see who could circumnavigate the globe, solo, in the fewest number of days. Using only the clues below, match the days to the options from sailors and boat types. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 270, 274, 278, 282.\nsailors : Ed Alexander, Tara Carroll, Vicky Estes, Wendell Orr.\nboat types : gaff cutter, pilot cutter, schooner, sloop.", "clues": {"1": {"text": "Wendell Orr was either the sailor who finished in 270 days or the person in the gaff cutter.", "conditions": "(T[r('Wendell Orr')][c('days')] == 270 or T[r('Wendell Orr')][c('boat types')] == 'gaff cutter') and (T[r('gaff cutter')][c('days')] != 270)"}, "2": {"text": "Of Vicky Estes and the competitor in the sloop, one finished in 270 days and the other finished in 278 days.", "conditions": "((T[r('Vicky Estes')][c('days')] == 270 and T[r('sloop')][c('days')] == 278) or (T[r('Vicky Estes')][c('days')] == 278 and T[r('sloop')][c('days')] == 270)) and (T[r('sloop')][c('sailors')] != 'Vicky Estes')"}, "3": {"text": "Tara Carroll took 4 more days to finish than Ed Alexander.", "conditions": "(T[r('Tara Carroll')][c('days')] == T[r('Ed Alexander')][c('days')] + 4)"}, "4": {"text": "The sailor in the pilot cutter took 4 fewer days to finish than Ed Alexander.", "conditions": "(T[r('pilot cutter')][c('days')] == T[r('Ed Alexander')][c('days')] - 4)"}}, "initial": [["days", "sailors", "boat types"], [270, "", ""], [274, "", ""], [278, "", ""], [282, "", ""]], "current": [["days", "sailors", "boat types"], [270, "Vicky Estes", ""], [274, "Wendell Orr", "gaff cutter"], [278, "", "sloop"], [282, "", ""]], "applied_clues": ["2", "1"], "initial_to_current": [[["days", "sailors", "boat types"], [270, "", ""], [274, "", ""], [278, "", ""], [282, "", ""]], [["days", "sailors", "boat types"], [270, "Vicky Estes", ""], [274, "", ""], [278, "", "sloop"], [282, "", ""]], [["days", "sailors", "boat types"], [270, "Vicky Estes", ""], [274, "Wendell Orr", "gaff cutter"], [278, "", "sloop"], [282, "", ""]]], "unsolvable_child": [["days", "sailors", "boat types"], [270, "Vicky Estes", ""], [274, "Wendell Orr", "gaff cutter"], [278, "Ed Alexander", "sloop"], [282, "Tara Carroll", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["days", "sailors", "boat types"], [270, "Vicky Estes", "pilot cutter"], [274, "Ed Alexander", "schooner"], [278, "Tara Carroll", "sloop"], [282, "Wendell Orr", "gaff cutter"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "90 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "75 million", ""], [1500, "", "", "New Zealand"]], "applied_clues": ["6", "2", "11", "3", "4"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "90 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "75 million", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "90 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "75 million", ""], [1500, "", "", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "90 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "75 million", ""], [1500, "", "", "New Zealand"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "applied_clues": ["4", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "", "violet", "Corinth"], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "Daryl", "indigo", ""], [26, "Orlando", "", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", "Corinth"], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "Daryl", "indigo", ""], [26, "Orlando", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "", "violet", "Corinth"], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "Daryl", "indigo", ""], [26, "Orlando", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "Lucky Star", "", "soy"], ["June 7th", "", "", ""]], "applied_clues": ["5"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "Lucky Star", "", "soy"], ["June 7th", "", "", ""]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", "alfalfa"], ["June 5th", "", "", ""], ["June 6th", "Lucky Star", "Paradise", "soy"], ["June 7th", "", "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Rowena, the head librarian at the Juniper Hills Public Library, has to make several calls today to inquire about overdue library books. Using only the clues below, match the due dates to the options from borrowers, titles, and authors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "due dates : 1, 8, 15, 22, 29.\nborrowers : Ken, Rosa, Sherrie, Wayne, Yvette.\ntitles : Dancing Well, Frogs of Iowa, Kip and Ken, Stars Below, Time to Burn.\nauthors : Dale Durham, Fred Fuentes, Gabby Garza, Hank Hensley, Lyle Lester.", "clues": {"1": {"text": "Neither Sherrie's book nor Ken's book is the title by Gabby Garza.", "conditions": "(T[r('Sherrie')][c('authors')] != 'Gabby Garza' and T[r('Ken')][c('authors')] != 'Gabby Garza')"}, "2": {"text": "The title due on September 1 is either \"Kip and Ken\" or the book by Lyle Lester.", "conditions": "(T[r(1)][c('titles')] == 'Kip and Ken' or T[r(1)][c('authors')] == 'Lyle Lester') and (T[r('Kip and Ken')][c('authors')] != 'Lyle Lester')"}, "3": {"text": "Ken's book wasn't \"Dancing Well\".", "conditions": "(T[r('Ken')][c('titles')] != 'Dancing Well')"}, "4": {"text": "Ken's book is either the title by Hank Hensley or the title by Dale Durham.", "conditions": "(T[r('Ken')][c('authors')] == 'Hank Hensley' or T[r('Ken')][c('authors')] == 'Dale Durham')"}, "5": {"text": "Wayne's book is either \"Frogs of Iowa\" or the book by Fred Fuentes.", "conditions": "(T[r('Wayne')][c('titles')] == 'Frogs of Iowa' or T[r('Wayne')][c('authors')] == 'Fred Fuentes') and (T[r('Frogs of Iowa')][c('authors')] != 'Fred Fuentes')"}, "6": {"text": "Sherrie's book was due sometime after \"Kip and Ken\".", "conditions": "(T[r('Sherrie')][c('due dates')] > T[r('Kip and Ken')][c('due dates')])"}, "7": {"text": "The book by Gabby Garza was due 2 weeks after Wayne's book.", "conditions": "(T[r('Gabby Garza')][c('due dates')] == T[r('Wayne')][c('due dates')] + 14)"}, "8": {"text": "Ken's book wasn't due on September 8.", "conditions": "(T[r('Ken')][c('due dates')] != 8)"}, "9": {"text": "Of \"Time to Burn\" and Rosa's book, one was due on September 1 and the other was due on September 8.", "conditions": "((T[r('Time to Burn')][c('due dates')] == 1 and T[r('Rosa')][c('due dates')] == 8) or (T[r('Time to Burn')][c('due dates')] == 8 and T[r('Rosa')][c('due dates')] == 1)) and (T[r('Time to Burn')][c('borrowers')] != 'Rosa')"}, "10": {"text": "The title by Dale Durham was \"Time to Burn\".", "conditions": "(T[r('Dale Durham')][c('titles')] == 'Time to Burn')"}}, "initial": [["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], "current": [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]], "applied_clues": ["9", "2", "7", "5"], "initial_to_current": [[["due dates", "borrowers", "titles", "authors"], [1, "", "", ""], [8, "", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", ""], [8, "Rosa", "", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "", "", ""], [22, "", "", ""], [29, "", "", ""]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", ""], [22, "", "", ""], [29, "", "", "Gabby Garza"]], [["due dates", "borrowers", "titles", "authors"], [1, "", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]]], "unsolvable_child": [["due dates", "borrowers", "titles", "authors"], [1, "Ken", "Time to Burn", "Lyle Lester"], [8, "Rosa", "Kip and Ken", ""], [15, "Wayne", "", "Fred Fuentes"], [22, "", "Frogs of Iowa", ""], [29, "", "", "Gabby Garza"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["due dates", "borrowers", "titles", "authors"], [1, "Rosa", "Kip and Ken", "Fred Fuentes"], [8, "Sherrie", "Time to Burn", "Dale Durham"], [15, "Wayne", "Frogs of Iowa", "Lyle Lester"], [22, "Ken", "Stars Below", "Hank Hensley"], [29, "Yvette", "Dancing Well", "Gabby Garza"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Steve is a world-renowned herpetologist (an expert in reptiles and amphibians), and today he's been asked to bring a small collection of snakes in to Brunhilde High School for a class demonstration. Using only the clues below, match the lengths to the options from snakes, countries, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "lengths : 12, 18, 24, 30.\nsnakes : ash python, horned viper, pygmy racer, two-nosed asp.\ncountries : Cambodia, Nicaragua, Spain, Uganda.\ncolors : black & red, brown & red, green & white, yellow & blue.", "clues": {"1": {"text": "The horned viper is 12 inches long.", "conditions": "(T[r('horned viper')][c('lengths')] == 12)"}, "2": {"text": "The yellow & blue serpent is 6 inches shorter than the serpent from Uganda.", "conditions": "(T[r('yellow & blue')][c('lengths')] == T[r('Uganda')][c('lengths')] - 6)"}, "3": {"text": "The pygmy racer isn't exactly 18 inches long.", "conditions": "(T[r('pygmy racer')][c('lengths')] != 18)"}, "4": {"text": "The yellow & blue snake is 12 inches shorter than the ash python.", "conditions": "(T[r('yellow & blue')][c('lengths')] == T[r('ash python')][c('lengths')] - 12)"}, "5": {"text": "The brown & red reptile is from Nicaragua.", "conditions": "(T[r('brown & red')][c('countries')] == 'Nicaragua')"}, "6": {"text": "The black & red serpent is 6 inches longer than the snake from Nicaragua.", "conditions": "(T[r('black & red')][c('lengths')] == T[r('Nicaragua')][c('lengths')] + 6)"}, "7": {"text": "The two-nosed asp is longer than the animal from Spain.", "conditions": "(T[r('two-nosed asp')][c('lengths')] > T[r('Spain')][c('lengths')])"}}, "initial": [["lengths", "snakes", "countries", "colors"], [12, "", "", ""], [18, "", "", ""], [24, "", "", ""], [30, "", "", ""]], "current": [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "Nicaragua", "yellow & blue"], [18, "", "Uganda", "black & red"], [24, "ash python", "", ""], [30, "", "", ""]], "applied_clues": ["1", "4", "2", "6"], "initial_to_current": [[["lengths", "snakes", "countries", "colors"], [12, "", "", ""], [18, "", "", ""], [24, "", "", ""], [30, "", "", ""]], [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "", ""], [18, "", "", ""], [24, "", "", ""], [30, "", "", ""]], [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "", "yellow & blue"], [18, "", "", ""], [24, "ash python", "", ""], [30, "", "", ""]], [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "", "yellow & blue"], [18, "", "Uganda", ""], [24, "ash python", "", ""], [30, "", "", ""]], [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "Nicaragua", "yellow & blue"], [18, "", "Uganda", "black & red"], [24, "ash python", "", ""], [30, "", "", ""]]], "unsolvable_child": [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "Nicaragua", "yellow & blue"], [18, "two-nosed asp", "Uganda", "black & red"], [24, "ash python", "", ""], [30, "pygmy racer", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["lengths", "snakes", "countries", "colors"], [12, "horned viper", "Spain", "yellow & blue"], [18, "two-nosed asp", "Uganda", "green & white"], [24, "ash python", "Nicaragua", "brown & red"], [30, "pygmy racer", "Cambodia", "black & red"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "", "black", ""], [48, "Felix", "gray", "Toledo"], [55, "", "", ""], [62, "", "", ""], [69, "", "", "Oakland Acres"]], "applied_clues": ["1", "3"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "Felix", "gray", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", "Oakland Acres"]], [["scores", "players", "colors", "hometowns"], [41, "", "black", ""], [48, "Felix", "gray", "Toledo"], [55, "", "", ""], [62, "", "", ""], [69, "", "", "Oakland Acres"]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "Tom", "black", ""], [48, "Felix", "gray", "Toledo"], [55, "", "", ""], [62, "", "", ""], [69, "", "", "Oakland Acres"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "Paradise", ""], ["June 7th", "", "", "alfalfa"]], "applied_clues": ["5", "4"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "", "Paradise", ""], ["June 7th", "", "", "alfalfa"]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Lucky Star", "", "soy"], ["June 6th", "Meadowgrove", "Paradise", ""], ["June 7th", "", "", "alfalfa"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "Felix", "gray", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", "Oakland Acres"]], "applied_clues": ["1"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "Felix", "gray", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", "Oakland Acres"]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "", "black", ""], [48, "Felix", "gray", "Toledo"], [55, "", "", ""], [62, "", "", ""], [69, "", "", "Oakland Acres"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "\"Parties Unlimited\" caters to a wide variety of special requests (such as clowns or magicians) for its clients. Using only the clues below, match the days to the options from requests and families. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 3, 4, 5, 6, 7.\nrequests : clown, petting zoo, photo booth, rock band, superhero.\nfamilies : Benton, Hayden, Ingram, Stanley, Zimmerman.", "clues": {"1": {"text": "The party on October 5 is for the Ingrams.", "conditions": "(T[r(5)][c('families')] == 'Ingram')"}, "2": {"text": "The booking that requested the clown is sometime after the Ingram family booking.", "conditions": "(T[r('clown')][c('days')] > T[r('Ingram')][c('days')])"}, "3": {"text": "The booking on October 4 is either the party that requested the petting zoo or the Hayden family booking.", "conditions": "(T[r(4)][c('requests')] == 'petting zoo' or T[r(4)][c('families')] == 'Hayden') and (T[r('Hayden')][c('requests')] != 'petting zoo')"}, "4": {"text": "The five events are the booking on October 7, the party that requested the rock band, the event that requested the superhero, the Ingram family party and the Benton family party.", "conditions": "(T[r('rock band')][c('days')] != 7) and (T[r('superhero')][c('days')] != 7) and (T[r('Ingram')][c('days')] != 7) and (T[r('Benton')][c('days')] != 7) and (T[r('rock band')][c('families')] != 'Ingram') and (T[r('rock band')][c('families')] != 'Benton') and (T[r('superhero')][c('families')] != 'Ingram') and (T[r('superhero')][c('families')] != 'Benton')"}, "5": {"text": "The booking that requested the photo booth is either the event on October 6 or the event on October 3.", "conditions": "(T[r('photo booth')][c('days')] == 6 or T[r('photo booth')][c('days')] == 3)"}, "6": {"text": "The Ingram family booking is 1 day before the booking that requested the superhero.", "conditions": "(T[r('Ingram')][c('days')] == T[r('superhero')][c('days')] - 1)"}, "7": {"text": "The party that requested the superhero is for the Zimmermans.", "conditions": "(T[r('superhero')][c('families')] == 'Zimmerman')"}}, "initial": [["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "requests", "families"], [3, "photo booth", "Hayden"], [4, "petting zoo", ""], [5, "", "Ingram"], [6, "", ""], [7, "", ""]], "applied_clues": ["5", "3", "1"], "initial_to_current": [[["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", "Hayden"], [4, "petting zoo", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", "Hayden"], [4, "petting zoo", ""], [5, "", "Ingram"], [6, "", ""], [7, "", ""]]], "unsolvable_child": [["days", "requests", "families"], [3, "photo booth", "Hayden"], [4, "petting zoo", "Benton"], [5, "", "Ingram"], [6, "rock band", ""], [7, "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["days", "requests", "families"], [3, "photo booth", "Benton"], [4, "rock band", "Hayden"], [5, "petting zoo", "Ingram"], [6, "superhero", "Zimmerman"], [7, "clown", "Stanley"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], "applied_clues": ["4", "5", "8", "2", "11", "7"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "Winifred", 7, ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "Daryl", "indigo", ""], [26, "", "", "Corinth"]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "Daryl", "indigo", ""], [26, "", "", "Corinth"]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "Daryl", "indigo", ""], [26, "", "", "Corinth"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 25, 26, 27, 28, 29.\nstock symbols : ABTR, HBW, JMO, KMPP, PSTO.\nclients : Abigail, Charlie, Edith, Francine, Heathcliff.\nsectors : energy, financial, technology, telecom, utilities.", "clues": {"1": {"text": "Of the stock that sold for $28 per share and PSTO, one was in the technology sector and the other was bought by Abigail.", "conditions": "((T[r(28)][c('sectors')] == 'technology' and T[r('PSTO')][c('clients')] == 'Abigail') or (T[r('PSTO')][c('sectors')] == 'technology' and T[r(28)][c('clients')] == 'Abigail')) and (T[r(28)][c('stock symbols')] != 'PSTO') and (T[r('technology')][c('clients')] != 'Abigail')"}, "2": {"text": "Of the telecom stock and the stock that sold for $27 per share, one was KMPP and the other was bought by Charlie.", "conditions": "((T[r('telecom')][c('stock symbols')] == 'KMPP' and T[r(27)][c('clients')] == 'Charlie') or (T[r(27)][c('stock symbols')] == 'KMPP' and T[r('telecom')][c('clients')] == 'Charlie')) and (T[r('telecom')][c('prices')] != 27) and (T[r('KMPP')][c('clients')] != 'Charlie')"}, "3": {"text": "The stock Edith bought was per share more expensive than the technology stock.", "conditions": "(T[r('Edith')][c('prices')] > T[r('technology')][c('prices')])"}, "4": {"text": "The five stocks were JMO, the stock that sold for $25 per share, the energy stock, the utilities stock and the financial stock.", "conditions": "(T[r(25)][c('stock symbols')] != 'JMO') and (T[r('energy')][c('stock symbols')] != 'JMO') and (T[r('utilities')][c('stock symbols')] != 'JMO') and (T[r('financial')][c('stock symbols')] != 'JMO') and (T[r('energy')][c('prices')] != 25) and (T[r('utilities')][c('prices')] != 25) and (T[r('financial')][c('prices')] != 25)"}, "5": {"text": "Of the financial stock and the stock Charlie bought, one was PSTO and the other sold for $25 per share.", "conditions": "((T[r('financial')][c('stock symbols')] == 'PSTO' and T[r('Charlie')][c('prices')] == 25) or (T[r('Charlie')][c('stock symbols')] == 'PSTO' and T[r('financial')][c('prices')] == 25)) and (T[r('financial')][c('clients')] != 'Charlie') and (T[r('PSTO')][c('prices')] != 25)"}, "6": {"text": "JMO was either the stock Edith bought or the stock Francine bought.", "conditions": "(T[r('JMO')][c('clients')] == 'Edith' or T[r('JMO')][c('clients')] == 'Francine')"}, "7": {"text": "The utilities stock was 2 dollars per share more expensive than HBW.", "conditions": "(T[r('utilities')][c('prices')] == T[r('HBW')][c('prices')] + 2)"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "JMO", "", "technology"], [29, "", "", ""]], "applied_clues": ["2", "5", "1", "4"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "", "", ""], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "", "financial"], [27, "KMPP", "", ""], [28, "", "", ""], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", ""], [28, "", "", "technology"], [29, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "", "energy"], [28, "JMO", "", "technology"], [29, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Edith", "energy"], [28, "JMO", "Francine", "technology"], [29, "", "Heathcliff", "utilities"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "HBW", "Charlie", "telecom"], [26, "PSTO", "Abigail", "financial"], [27, "KMPP", "Heathcliff", "utilities"], [28, "JMO", "Francine", "technology"], [29, "ABTR", "Edith", "energy"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "GXTV", "Heathcliff", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "GXTV", "Heathcliff", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "Edith", "financial"], [27, "GXTV", "Heathcliff", "telecom"], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Springfield County Bird Club met today, and several of its members brought their newest acquisitions. Using only the clues below, match the months to the options from names and birds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nnames : Bonita, Joan, Laura, Roberta, Velma.\nbirds : finch, lorikeet, lovebird, macaw, parakeet.", "clues": {"1": {"text": "Velma's pet isn't the lovebird.", "conditions": "(T[r('Velma')][c('birds')] != 'lovebird')"}, "2": {"text": "Of the finch and the macaw, one was bought in January and the other is Laura's.", "conditions": "((T[r('finch')][c('months')] == 1 and T[r('macaw')][c('names')] == 'Laura') or (T[r('macaw')][c('months')] == 1 and T[r('finch')][c('names')] == 'Laura')) and (T[r(1)][c('names')] != 'Laura')"}, "3": {"text": "The bird bought in March is either Bonita's pet or the finch.", "conditions": "(T[r(3)][c('names')] == 'Bonita' or T[r(3)][c('birds')] == 'finch') and (T[r('Bonita')][c('birds')] != 'finch')"}, "4": {"text": "Joan's pet was bought 3 months before the lorikeet.", "conditions": "(T[r('Joan')][c('months')] + 3 == T[r('lorikeet')][c('months')])"}, "5": {"text": "The finch was bought sometime after Roberta's pet.", "conditions": "(T[r('finch')][c('months')] > T[r('Roberta')][c('months')])"}, "6": {"text": "Bonita's pet was bought in May.", "conditions": "(T[r('Bonita')][c('months')] == 5)"}, "7": {"text": "The macaw was bought 1 month before the parakeet.", "conditions": "(T[r('macaw')][c('months')] + 1 == T[r('parakeet')][c('months')])"}}, "initial": [["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], "current": [["months", "names", "birds"], [1, "", "finch"], [2, "Laura", "macaw"], [3, "Bonita", "parakeet"], [4, "", ""], [5, "", ""]], "applied_clues": ["2", "7", "3"], "initial_to_current": [[["months", "names", "birds"], [1, "", ""], [2, "", ""], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "finch"], [2, "Laura", "macaw"], [3, "", ""], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "finch"], [2, "Laura", "macaw"], [3, "", "parakeet"], [4, "", ""], [5, "", ""]], [["months", "names", "birds"], [1, "", "finch"], [2, "Laura", "macaw"], [3, "Bonita", "parakeet"], [4, "", ""], [5, "", ""]]], "unsolvable_child": [["months", "names", "birds"], [1, "Joan", "finch"], [2, "Laura", "macaw"], [3, "Bonita", "parakeet"], [4, "", "lorikeet"], [5, "", "lovebird"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["months", "names", "birds"], [1, "Joan", "macaw"], [2, "Roberta", "parakeet"], [3, "Laura", "finch"], [4, "Velma", "lorikeet"], [5, "Bonita", "lovebird"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "Felix", "black", "Oakland Acres"], [55, "", "", ""], [62, "", "", ""], [69, "", "gray", ""]], "applied_clues": ["1", "3", "8"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "Felix", "", "Oakland Acres"], [55, "", "", ""], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", "Toledo"], [48, "Felix", "black", "Oakland Acres"], [55, "", "", ""], [62, "", "", ""], [69, "", "gray", ""]], [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "Felix", "black", "Oakland Acres"], [55, "", "", ""], [62, "", "", ""], [69, "", "gray", ""]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "Tom", "", "Toledo"], [48, "Felix", "black", "Oakland Acres"], [55, "", "", "Worthington"], [62, "", "", ""], [69, "", "gray", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", 4, ""], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]], "applied_clues": ["3"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", 4, ""], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, ""], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]], "clue_applied_to_unsolvable_child": "10"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]], "applied_clues": ["6", "2", "11"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "90 million", ""], [1500, "", "", "New Zealand"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", "Green Swamp"], [11, "", ""], [12, "Alex", ""]], "applied_clues": ["1", "5", "7", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", "Green Swamp"], [11, "", ""], [12, "Alex", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", "Green Swamp"], [11, "", ""], [12, "Alex", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", "Green Swamp"], [11, "", ""], [12, "Alex", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Piper Hills Academy recently installed a high-speed 3-D printer in its technology lab, and several students were given an opportunity this week to use it in order to print items of their own design. Using only the clues below, match the times to the options from students, items, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 10, 15, 20, 25, 30, 35.\nstudents : Adrienne, Bertha, Eleanor, Felicia, Irma, Willis.\nitems : cup, flower, mask, phone case, skull, whistle.\ncolors : green, orange, purple, red, white, yellow.", "clues": {"1": {"text": "The skull took 5 more minutes to print than Bertha's piece.", "conditions": "(T[r('skull')][c('times')] == 5 + T[r('Bertha')][c('times')])"}, "2": {"text": "Of the red piece and the item that printed in 20 minutes, one was the mask and the other was Felicia's.", "conditions": "(((T[r('red')][c('items')] == 'mask' and T[r(20)][c('students')] == 'Felicia') or (T[r('red')][c('students')] == 'Felicia' and T[r(20)][c('items')] == 'mask'))) and (T[r(20)][c('colors')] != 'red') and (T[r('Felicia')][c('items')] != 'mask')"}, "3": {"text": "Willis's item wasn't the skull.", "conditions": "(T[r('Willis')][c('items')] != 'skull')"}, "4": {"text": "The item that printed in 25 minutes wasn't the phone case.", "conditions": "(T[r(25)][c('items')] != 'phone case')"}, "5": {"text": "Adrienne's piece was either the piece that printed in 10 minutes or the red item.", "conditions": "(T[r('Adrienne')][c('times')] == 10 or T[r('Adrienne')][c('colors')] == 'red') and (T[r(10)][c('colors')] != 'red')"}, "6": {"text": "Of the item that printed in 30 minutes and the item that printed in 20 minutes, one was Irma's and the other was the skull.", "conditions": "(((T[r(30)][c('students')] == 'Irma' and T[r(20)][c('items')] == 'skull') or (T[r(30)][c('items')] == 'skull' and T[r(20)][c('students')] == 'Irma'))) and (T[r('Irma')][c('items')] != 'skull')"}, "7": {"text": "Bertha's piece took 10 more minutes to print than the flower.", "conditions": "(T[r('Bertha')][c('times')] == 10 + T[r('flower')][c('times')])"}, "8": {"text": "The yellow design wasn't the phone case.", "conditions": "(T[r('yellow')][c('items')] != 'phone case')"}, "9": {"text": "Of the flower and the white design, one took 15 minutes to print and the other took 10 minutes to print.", "conditions": "(((T[r('flower')][c('times')] == 15 and T[r('white')][c('times')] == 10) or (T[r('flower')][c('times')] == 10 and T[r('white')][c('times')] == 15))) and (T[r('flower')][c('colors')] != 'white')"}, "10": {"text": "The cup required somewhat fewer minutes to print than Felicia's design.", "conditions": "(T[r('cup')][c('times')] < T[r('Felicia')][c('times')])"}, "11": {"text": "Felicia's design required 15 fewer minutes to print than the green item.", "conditions": "(T[r('Felicia')][c('times')] == T[r('green')][c('times')] - 15)"}, "12": {"text": "The orange design, the flower, Irma's item and the item that printed in 35 minutes were all different items.", "conditions": "(T[r('orange')][c('items')] != 'flower') and (T[r('orange')][c('students')] != 'Irma') and (T[r('orange')][c('times')] != 35) and (T[r('flower')][c('students')] != 'Irma') and (T[r('flower')][c('times')] != 35) and (T[r('Irma')][c('times')] != 35)"}}, "initial": [["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "current": [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "mask", ""], [25, "Felicia", "", "red"], [30, "", "skull", ""], [35, "", "", ""]], "applied_clues": ["9", "6", "2"], "initial_to_current": [[["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "", ""], [25, "", "", ""], [30, "", "skull", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Irma", "mask", ""], [25, "Felicia", "", "red"], [30, "", "skull", ""], [35, "", "", ""]]], "unsolvable_child": [["times", "students", "items", "colors"], [10, "Adrienne", "flower", ""], [15, "", "", "white"], [20, "Irma", "mask", ""], [25, "Felicia", "", "red"], [30, "", "skull", ""], [35, "", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["times", "students", "items", "colors"], [10, "Adrienne", "cup", "white"], [15, "Felicia", "flower", "red"], [20, "Irma", "mask", "yellow"], [25, "Bertha", "whistle", "orange"], [30, "Eleanor", "skull", "green"], [35, "Willis", "phone case", "purple"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "Zachary", "", ""], [225, "", "", "banana"]], "applied_clues": ["5", "2", "7", "11"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "Zachary", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "Zachary", "", ""], [225, "", "", "banana"]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "Zachary", "train", ""], [225, "", "", "banana"]], "clue_applied_to_unsolvable_child": "9"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", "Green Swamp"], [12, "Alex", ""]], "applied_clues": ["1", "5", "7"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "Alex", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", "Green Swamp"], [12, "Alex", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "", ""], [11, "", "Green Swamp"], [12, "Alex", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, ""], [620, "", "", ""], [700, "", "", ""]], "applied_clues": ["3", "10"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "Deanna", "", "Elk Grove"], [540, "", 4, ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, ""], [620, "", "", ""], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "Deanna", "", "Elk Grove"], [540, "Gretchen", 4, "Pacific Grove"], [620, "", "", ""], [700, "", "", ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The international desk at the Herald News-Times sent out a number of its top reporters to cover breaking stories in various parts of the world this week. Using only the clues below, match the days to the options from reporters and stories. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days :4, 5, 6, 7.\nreporters : Linda Lott, Randy Reid, Sid Snyder, Tam Terry.\nstories : earthquake, flooding, royal wedding, solar eclipse.", "clues": {"1": {"text": "The four people were the reporter sent out on April 7th, the reporter who covered the solar eclipse, the journalist who covered the earthquake and Randy Reid.", "conditions": "(T[r(7)][c('stories')] != 'solar eclipse') and (T[r(7)][c('stories')] != 'earthquake') and (T[r(7)][c('reporters')]!='Randy Reid') and (T[r('solar eclipse')][c('reporters')]!='Randy Reid') and (T[r('earthquake')][c('reporters')]!='Randy Reid')"}, "2": {"text": "Sid Snyder left 1 day after Tam Terry.", "conditions": "(T[r('Sid Snyder')][c('days')] - T[r('Tam Terry')][c('days')] == 1)"}, "3": {"text": "Randy Reid left 1 day after the journalist who covered the solar eclipse.", "conditions": "(T[r('Randy Reid')][c('days')] - T[r('solar eclipse')][c('days')] == 1)"}, "4": {"text": "Linda Lott left 1 day before the journalist who covered the flooding.", "conditions": "(T[r('flooding')][c('days')] - T[r('Linda Lott')][c('days')] == 1)"}}, "initial": [["days", "reporters", "stories"], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "reporters", "stories"], [4, "", ""], [5, "Tam Terry", ""], [6, "Sid Snyder", ""], [7, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["days", "reporters", "stories"], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "reporters", "stories"], [4, "", ""], [5, "Tam Terry", ""], [6, "Sid Snyder", ""], [7, "", ""]]], "unsolvable_child": [["days", "reporters", "stories"], [4, "", ""], [5, "Tam Terry", ""], [6, "Sid Snyder", "solar eclipse"], [7, "Randy Reid", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["days", "reporters", "stories"], [4, "Linda Lott", "solar eclipse"], [5, "Randy Reid", "flooding"], [6, "Tam Terry", "earthquake"], [7, "Sid Snyder", "royal wedding"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], "applied_clues": ["4"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "", "", "Kansas"], [50, "Etsalle", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "", "Lake Jesup"], [9, "Meredith", ""], [10, "Orlando", ""], [11, "", "Bull Creek"], [12, "", ""]], "applied_clues": ["4", "6"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", "Lake Jesup"], [9, "", ""], [10, "Orlando", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", "Lake Jesup"], [9, "Meredith", ""], [10, "Orlando", ""], [11, "", "Bull Creek"], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "", "Lake Jesup"], [9, "Meredith", ""], [10, "Orlando", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "white", "Forest City"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3", "5"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "white", "Forest City"], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "white", "Forest City"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "white", "Forest City"], [4, "", "", "Cromberg"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The cake artists at Baker's Pride have their work cut out for them this week, as a number of different custom cake orders have just come in. Using only the clues below, match the prices to the options from customers, shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 125, 150, 175, 200, 225.\ncustomers : Erica, Francisco, Heidi, Joey, Zachary.\nshapes : beach chair, football, golf ball, sports car, train.\nflavors : banana, chocolate, peach, raspberry, strawberry.", "clues": {"1": {"text": "Zachary's cake isn't strawberry-flavored.", "conditions": "(T[r('Zachary')][c('flavors')] != 'strawberry')"}, "2": {"text": "The $150 cake is either Erica's piece or the raspberry-flavored cake.", "conditions": "(T[r(150)][c('customers')] == 'Erica' or T[r(150)][c('flavors')] == 'raspberry') and (T[r('Erica')][c('flavors')] != 'raspberry')"}, "3": {"text": "Francisco's piece isn't banana-flavored.", "conditions": "(T[r('Francisco')][c('flavors')] != 'banana')"}, "4": {"text": "The chocolate-flavored cake costs 25 dollars less than the cake shaped like a sports car.", "conditions": "(T[r('sports car')][c('prices')] - T[r('chocolate')][c('prices')] == 25)"}, "5": {"text": "Of the peach-flavored cake and the cake shaped like a golf ball, one is Erica's and the other is Joey's.", "conditions": "((T[r('peach')][c('customers')] == 'Erica' and T[r('golf ball')][c('customers')] == 'Joey') or (T[r('peach')][c('customers')] == 'Joey' and T[r('golf ball')][c('customers')] == 'Erica')) and (T[r('peach')][c('shapes')] != 'golf ball')"}, "6": {"text": "The $125 piece is strawberry-flavored.", "conditions": "(T[r(125)][c('flavors')] == 'strawberry')"}, "7": {"text": "The piece shaped like a beach chair is either Zachary's piece or the $175 piece.", "conditions": "(T[r('beach chair')][c('customers')] == 'Zachary' or T[r('beach chair')][c('prices')] == 175) and (T[r('Zachary')][c('prices')] != 175)"}, "8": {"text": "The $225 piece is shaped like a sports car.", "conditions": "(T[r(225)][c('shapes')] == 'sports car')"}, "9": {"text": "Erica's piece isn't shaped like a train.", "conditions": "(T[r('Erica')][c('shapes')] != 'train')"}, "10": {"text": "The chocolate-flavored piece, Joey's cake, and the $125 cake are three different cakes.", "conditions": "(T[r('chocolate')][c('prices')] != 125) and (T[r('Joey')][c('prices')] != 125) and (T[r('chocolate')][c('customers')] != 'Joey')"}, "11": {"text": "The banana-flavored cake costs 75 dollars more than Erica's piece.", "conditions": "(T[r('banana')][c('prices')] - T[r('Erica')][c('prices')] == 75)"}}, "initial": [["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], "current": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "", "", ""], [225, "", "", ""]], "applied_clues": ["5", "2"], "initial_to_current": [[["prices", "customers", "shapes", "flavors"], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", ""], [200, "", "", ""], [225, "", "", ""]], [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "", "raspberry"], [200, "", "", ""], [225, "", "", ""]]], "unsolvable_child": [["prices", "customers", "shapes", "flavors"], [125, "Joey", "golf ball", ""], [150, "Erica", "", "peach"], [175, "", "beach chair", "raspberry"], [200, "Zachary", "", ""], [225, "", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["prices", "customers", "shapes", "flavors"], [125, "Francisco", "train", "strawberry"], [150, "Erica", "football", "peach"], [175, "Joey", "golf ball", "raspberry"], [200, "Zachary", "beach chair", "chocolate"], [225, "Heidi", "sports car", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The U. S. Air Force is currently testing a number of new experimental, supersonic aircraft, each built by a different aerospace company. Using only the clues below, match the prices to the options from aircraft, companies, and top speeds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 100, 125, 150, 175.\naircraft : Darkwing 6, Falcon X-2, Kesseling, Raven 12.\ncompanies : Ale and Moore, Forsyth, Pittakan, Tenerife.\ntop speeds : Mach 2.3, Mach 2.9, Mach 3.2, Mach 3.4.", "clues": {"1": {"text": "The Darkwing 6 costs 50 million dollars more than the jet built by Tenerife.", "conditions": "(T[r('Darkwing 6')][c('prices')] == T[r('Tenerife')][c('prices')] + 50)"}, "2": {"text": "The Raven 12 doesn't cost $125 million.", "conditions": "(T[r('Raven 12')][c('prices')] != 125)"}, "3": {"text": "The plane with a top speed of Mach 3.2 costs more than the jet built by Tenerife.", "conditions": "(T[r('Mach 3.2')][c('prices')] > T[r('Tenerife')][c('prices')])"}, "4": {"text": "The aircraft with a top speed of Mach 2.9, the aircraft built by Forsyth, and the $150 million aircraft are three different jets.", "conditions": "(T[r('Mach 2.9')][c('companies')]!='Forsyth') and (T[r(150)][c('companies')]!='Forsyth') and (T[r(150)][c('top speeds')]!='Mach 3.2')"}, "5": {"text": "The plane with a top speed of Mach 2.9 is either the Raven 12 or the $100 million jet.", "conditions": "(T[r('Mach 2.9')][c('aircraft')] == 'Raven 12' or T[r('Mach 2.9')][c('prices')] == 100) and (T[r('Raven 12')][c('prices')] != 100)"}, "6": {"text": "The $125 million plane, the aircraft with a top speed of Mach 3.4 and the jet built by Forsyth are all different jets.", "conditions": "(T[r(125)][c('top speeds')] != 'Mach 3.4') and (T[r('Forsyth')][c('top speeds')] != 'Mach 3.4') and (T[r(125)][c('companies')]!='Forsyth')"}, "7": {"text": "The plane with a top speed of Mach 3.2 is either the plane built by Tenerife or the plane built by Pittakan.", "conditions": "(T[r('Mach 3.2')][c('companies')] == 'Tenerife' or T[r('Mach 3.2')][c('companies')] == 'Pittakan')"}, "8": {"text": "The Falcon X-2 was built by Tenerife.", "conditions": "(T[r('Falcon X-2')][c('companies')] == 'Tenerife')"}}, "initial": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], "current": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", "Mach 3.2"], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], "applied_clues": ["5", "2", "6", "4"], "initial_to_current": [[["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", "Mach 3.2"], [150, "Raven 12", "", "Mach 3.4"], [175, "", "Forsyth", ""]]], "unsolvable_child": [["prices", "aircraft", "companies", "top speeds"], [100, "", "Pittakan", "Mach 2.9"], [125, "", "Tenerife", "Mach 3.2"], [150, "Raven 12", "Ale and Moore", "Mach 3.4"], [175, "", "Forsyth", "Mach 2.3"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["prices", "aircraft", "companies", "top speeds"], [100, "Falcon X-2", "Tenerife", "Mach 2.9"], [125, "Kesseling", "Pittakan", "Mach 3.2"], [150, "Darkwing 6", "Ale and Moore", "Mach 3.4"], [175, "Raven 12", "Forsyth", "Mach 2.3"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "GXTV", "Heathcliff", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "GXTV", "Heathcliff", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "GXTV", "Heathcliff", "telecom"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A fresh group of astronaut candidates have just completed their training, and NASA has assigned each of them their first official launch mission. Using only the clues below, match the months to the options from astronauts, missions, and subjects. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "months : 1, 2, 3, 4, 5.\nastronauts : Christian, Delia, Latoya, Omar, Seth.\nmissions : AV-435, GX-13, TV-412, WB-664, ZF-15.\nsubjects : ant colonies, gamma rays, larval growth, photosynthesis, solar storms.", "clues": {"1": {"text": "The graduate assigned to mission ZF-15 will launch 2 months after the graduate assigned to mission WB-664.", "conditions": "(T[r('ZF-15')][c('months')] == T[r('WB-664')][c('months')] + 2)"}, "2": {"text": "Latoya will launch sometime before the astronaut assigned to mission TV-412.", "conditions": "(T[r('Latoya')][c('months')] < T[r('TV-412')][c('months')])"}, "3": {"text": "Christian will launch 1 month after the graduate who will be studying photosynthesis.", "conditions": "(T[r('Christian')][c('months')] == T[r('photosynthesis')][c('months')] + 1)"}, "4": {"text": "Of the graduate launching in May and the graduate assigned to mission TV-412, one will focus on larval growth and the other is Christian.", "conditions": "((T[r(5)][c('subjects')] == 'larval growth' and T[r('TV-412')][c('astronauts')] == 'Christian') or (T[r(5)][c('astronauts')] == 'Christian' and T[r('TV-412')][c('subjects')] == 'larval growth')) and (T[r(5)][c('missions')] != 'TV-412') and (T[r('Christian')][c('subjects')] != 'larval growth')"}, "5": {"text": "The person launching in April won't be focusing on ant colonies.", "conditions": "(T[r(4)][c('subjects')] != 'ant colonies')"}, "6": {"text": "The astronaut who will be studying photosynthesis will be on mission WB-664.", "conditions": "(T[r('photosynthesis')][c('missions')] == 'WB-664')"}, "7": {"text": "Delia will launch in April.", "conditions": "(T[r('Delia')][c('months')] == 4)"}, "8": {"text": "Of the astronaut launching in May and the graduate who will be studying gamma rays, one is Seth and the other will be on mission GX-13.", "conditions": "((T[r(5)][c('astronauts')] == 'Seth' and T[r('gamma rays')][c('missions')] == 'GX-13') or (T[r(5)][c('missions')] == 'GX-13' and T[r('gamma rays')][c('astronauts')] == 'Seth')) and (T[r(5)][c('subjects')] != 'gamma rays') and (T[r('GX-13')][c('astronauts')] != 'Seth')"}, "9": {"text": "The person assigned to mission AV-435 is either Delia or Omar.", "conditions": "(T[r('AV-435')][c('astronauts')] == 'Delia' or T[r('AV-435')][c('astronauts')] == 'Omar')"}}, "initial": [["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], "current": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "GX-13", "gamma rays"], [5, "Seth", "", "larval growth"]], "applied_clues": ["4", "8"], "initial_to_current": [[["months", "astronauts", "missions", "subjects"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", "larval growth"]], [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "GX-13", "gamma rays"], [5, "Seth", "", "larval growth"]]], "unsolvable_child": [["months", "astronauts", "missions", "subjects"], [1, "Christian", "TV-412", ""], [2, "", "AV-435", ""], [3, "", "WB-664", ""], [4, "", "GX-13", "gamma rays"], [5, "Seth", "ZF-15", "larval growth"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["months", "astronauts", "missions", "subjects"], [1, "Latoya", "WB-664", "photosynthesis"], [2, "Christian", "TV-412", "ant colonies"], [3, "Seth", "ZF-15", "gamma rays"], [4, "Delia", "AV-435", "solar storms"], [5, "Omar", "GX-13", "larval growth"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "", "black", ""], [48, "", "", ""], [55, "Felix", "gray", "Toledo"], [62, "", "", ""], [69, "", "", "Oakland Acres"]], "applied_clues": ["1", "3"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "Felix", "gray", ""], [62, "", "", ""], [69, "", "", "Oakland Acres"]], [["scores", "players", "colors", "hometowns"], [41, "", "black", ""], [48, "", "", ""], [55, "Felix", "gray", "Toledo"], [62, "", "", ""], [69, "", "", "Oakland Acres"]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "Tom", "black", ""], [48, "", "", ""], [55, "Felix", "gray", "Toledo"], [62, "", "", ""], [69, "", "", "Oakland Acres"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "GXTV", "Heathcliff", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "GXTV", "Heathcliff", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "GXTV", "Heathcliff", "telecom"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lorena's Specialty Cakes has a number of different orders to fulfill this week. Using only the clues below, match the delivery dates to the options from customers, cake shapes, and flavors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "delivery dates : 5, 6, 7, 8, 9.\ncustomers : Danielson, Harper, Keller, Lowe, Nolan.\ncake shapes : biplane, rocket ship, sailboat, sports car, turtle.\nflavors : banana, coconut, lemon, raspberry, strawberry.", "clues": {"1": {"text": "The lemon cake will be delivered 3 days after the raspberry cake.", "conditions": "(T[r('lemon')][c('delivery dates')] - T[r('raspberry')][c('delivery dates')] == 3)"}, "2": {"text": "Mrs. Nolan's cake will be delivered 1 day before the cake shaped like a sports car.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 1 == T[r('sports car')][c('delivery dates')])"}, "3": {"text": "Mrs. Danielson's order won't be delivered on October 6.", "conditions": "(T[r('Danielson')][c('delivery dates')] != 6)"}, "4": {"text": "The October 8 delivery will be in the shape of a biplane.", "conditions": "(T[r(8)][c('cake shapes')] == 'biplane')"}, "5": {"text": "Neither Mrs. Harper's order nor the strawberry cake is the October 6 delivery.", "conditions": "(T[r('Harper')][c('delivery dates')] != 6 and T[r('strawberry')][c('delivery dates')] != 6) and (T[r('Harper')][c('flavors')] != 'strawberry')"}, "6": {"text": "Mrs. Nolan's cake will be delivered 2 days before the strawberry cake.", "conditions": "(T[r('Nolan')][c('delivery dates')] + 2 == T[r('strawberry')][c('delivery dates')])"}, "7": {"text": "The cake shaped like a rocket ship will be delivered 1 day before the coconut cake.", "conditions": "(T[r('rocket ship')][c('delivery dates')] + 1 == T[r('coconut')][c('delivery dates')])"}, "8": {"text": "Mrs. Harper's order won't be shaped like a biplane.", "conditions": "(T[r('Harper')][c('cake shapes')] != 'biplane')"}, "9": {"text": "Mrs. Keller's order won't be shaped like a sports car.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sports car')"}, "10": {"text": "The order shaped like a sailboat will be delivered 2 days after the raspberry cake.", "conditions": "(T[r('sailboat')][c('delivery dates')] == T[r('raspberry')][c('delivery dates')] + 2)"}, "11": {"text": "Mrs. Keller's cake won't be shaped like a sailboat.", "conditions": "(T[r('Keller')][c('cake shapes')] != 'sailboat')"}}, "initial": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], "current": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]], "applied_clues": ["1", "10", "6", "2", "5"], "initial_to_current": [[["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", ""], [6, "", "", ""], [7, "", "", ""], [8, "", "", ""], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", ""], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "", "", "lemon"], [9, "", "", ""]], [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]]], "unsolvable_child": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "", "raspberry"], [6, "", "sports car", ""], [7, "Danielson", "sailboat", "strawberry"], [8, "Harper", "", "lemon"], [9, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["delivery dates", "customers", "cake shapes", "flavors"], [5, "Nolan", "rocket ship", "raspberry"], [6, "Lowe", "sports car", "coconut"], [7, "Danielson", "sailboat", "strawberry"], [8, "Keller", "biplane", "lemon"], [9, "Harper", "turtle", "banana"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Sal, a newly-hired police officer, has written a number of parking violations this week. Using only the clues below, match the fines to the options from cars, license plates, and states. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "fines : 25, 50, 75, 100.\ncars : Cavalo, Dartson, Etsalle, Injitsu.\nlicense plates : BMG-831, MRT-628, SVZ-880, YGA-441.\nstates : Kansas, Mississippi, Rhode Island, Tennessee.", "clues": {"1": {"text": "The vehicle with the YGA-441 plates, the vehicle from Mississippi, and the Etsalle are three different cars.", "conditions": "(T[r('YGA-441')][c('states')] != 'Mississippi') and (T[r('Etsalle')][c('license plates')] != 'YGA-441') and (T[r('Etsalle')][c('states')] != 'Mississippi')"}, "2": {"text": "The Cavalo is either the vehicle with the YGA-441 plates or the vehicle from Rhode Island.", "conditions": "(T[r('Cavalo')][c('license plates')] == 'YGA-441' or T[r('Cavalo')][c('states')] == 'Rhode Island') and (T[r('YGA-441')][c('states')] != 'Rhode Island')"}, "3": {"text": "The automobile from Kansas was fined 25 dollars less than the Etsalle.", "conditions": "(T[r('Etsalle')][c('fines')] - T[r('Kansas')][c('fines')] == 25)"}, "4": {"text": "The car with the MRT-628 plates is either the vehicle that received the $75 fine or the car that received the $100 fine.", "conditions": "(T[r('MRT-628')][c('fines')] == 75 or T[r('MRT-628')][c('fines')] == 100)"}, "5": {"text": "The automobile from Kansas was fined somewhat more than the Cavalo.", "conditions": "(T[r('Kansas')][c('fines')] > T[r('Cavalo')][c('fines')])"}, "6": {"text": "The car from Rhode Island was fined 50 dollars less than the car with the SVZ-880 plates.", "conditions": "(T[r('SVZ-880')][c('fines')] - T[r('Rhode Island')][c('fines')] == 50)"}, "7": {"text": "The Injitsu was fined 25 dollars more than the car with the BMG-831 plates.", "conditions": "(T[r('Injitsu')][c('fines')] - T[r('BMG-831')][c('fines')] == 25)"}}, "initial": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], "current": [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", "Kansas"], [100, "Etsalle", "SVZ-880", ""]], "applied_clues": ["4", "3", "7", "6"], "initial_to_current": [[["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", ""], [100, "", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "", ""], [75, "", "MRT-628", "Kansas"], [100, "Etsalle", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "BMG-831", ""], [75, "Injitsu", "MRT-628", "Kansas"], [100, "Etsalle", "", ""]], [["fines", "cars", "license plates", "states"], [25, "", "", ""], [50, "", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", "Kansas"], [100, "Etsalle", "SVZ-880", ""]]], "unsolvable_child": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "YGA-441", ""], [50, "Dartson", "BMG-831", "Rhode Island"], [75, "Injitsu", "MRT-628", "Kansas"], [100, "Etsalle", "SVZ-880", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["fines", "cars", "license plates", "states"], [25, "Cavalo", "BMG-831", "Rhode Island"], [50, "Injitsu", "YGA-441", "Kansas"], [75, "Etsalle", "SVZ-880", "Tennessee"], [100, "Dartson", "MRT-628", "Mississippi"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Piper Hills Academy recently installed a high-speed 3-D printer in its technology lab, and several students were given an opportunity this week to use it in order to print items of their own design. Using only the clues below, match the times to the options from students, items, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 10, 15, 20, 25, 30, 35.\nstudents : Adrienne, Bertha, Eleanor, Felicia, Irma, Willis.\nitems : cup, flower, mask, phone case, skull, whistle.\ncolors : green, orange, purple, red, white, yellow.", "clues": {"1": {"text": "The skull took 5 more minutes to print than Bertha's piece.", "conditions": "(T[r('skull')][c('times')] == 5 + T[r('Bertha')][c('times')])"}, "2": {"text": "Of the red piece and the item that printed in 20 minutes, one was the mask and the other was Felicia's.", "conditions": "(((T[r('red')][c('items')] == 'mask' and T[r(20)][c('students')] == 'Felicia') or (T[r('red')][c('students')] == 'Felicia' and T[r(20)][c('items')] == 'mask'))) and (T[r(20)][c('colors')] != 'red') and (T[r('Felicia')][c('items')] != 'mask')"}, "3": {"text": "Willis's item wasn't the skull.", "conditions": "(T[r('Willis')][c('items')] != 'skull')"}, "4": {"text": "The item that printed in 25 minutes wasn't the phone case.", "conditions": "(T[r(25)][c('items')] != 'phone case')"}, "5": {"text": "Adrienne's piece was either the piece that printed in 10 minutes or the red item.", "conditions": "(T[r('Adrienne')][c('times')] == 10 or T[r('Adrienne')][c('colors')] == 'red') and (T[r(10)][c('colors')] != 'red')"}, "6": {"text": "Of the item that printed in 30 minutes and the item that printed in 20 minutes, one was Irma's and the other was the skull.", "conditions": "(((T[r(30)][c('students')] == 'Irma' and T[r(20)][c('items')] == 'skull') or (T[r(30)][c('items')] == 'skull' and T[r(20)][c('students')] == 'Irma'))) and (T[r('Irma')][c('items')] != 'skull')"}, "7": {"text": "Bertha's piece took 10 more minutes to print than the flower.", "conditions": "(T[r('Bertha')][c('times')] == 10 + T[r('flower')][c('times')])"}, "8": {"text": "The yellow design wasn't the phone case.", "conditions": "(T[r('yellow')][c('items')] != 'phone case')"}, "9": {"text": "Of the flower and the white design, one took 15 minutes to print and the other took 10 minutes to print.", "conditions": "(((T[r('flower')][c('times')] == 15 and T[r('white')][c('times')] == 10) or (T[r('flower')][c('times')] == 10 and T[r('white')][c('times')] == 15))) and (T[r('flower')][c('colors')] != 'white')"}, "10": {"text": "The cup required somewhat fewer minutes to print than Felicia's design.", "conditions": "(T[r('cup')][c('times')] < T[r('Felicia')][c('times')])"}, "11": {"text": "Felicia's design required 15 fewer minutes to print than the green item.", "conditions": "(T[r('Felicia')][c('times')] == T[r('green')][c('times')] - 15)"}, "12": {"text": "The orange design, the flower, Irma's item and the item that printed in 35 minutes were all different items.", "conditions": "(T[r('orange')][c('items')] != 'flower') and (T[r('orange')][c('students')] != 'Irma') and (T[r('orange')][c('times')] != 35) and (T[r('flower')][c('students')] != 'Irma') and (T[r('flower')][c('times')] != 35) and (T[r('Irma')][c('times')] != 35)"}}, "initial": [["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "current": [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Felicia", "skull", ""], [25, "", "mask", "red"], [30, "Irma", "", ""], [35, "", "", ""]], "applied_clues": ["9", "6", "2"], "initial_to_current": [[["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "skull", ""], [25, "", "", ""], [30, "Irma", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Felicia", "skull", ""], [25, "", "mask", "red"], [30, "Irma", "", ""], [35, "", "", ""]]], "unsolvable_child": [["times", "students", "items", "colors"], [10, "Adrienne", "flower", ""], [15, "", "", "white"], [20, "Felicia", "skull", ""], [25, "", "mask", "red"], [30, "Irma", "", ""], [35, "", "", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["times", "students", "items", "colors"], [10, "Adrienne", "cup", "white"], [15, "Felicia", "flower", "red"], [20, "Irma", "mask", "yellow"], [25, "Bertha", "whistle", "orange"], [30, "Eleanor", "skull", "green"], [35, "Willis", "phone case", "purple"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "", "", ""], [350, "", "Kimberly", "Mack truck"], [400, "Dream Machine", "Sheryl", ""]], "applied_clues": ["2", "1"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "", "", ""], [350, "", "", ""], [400, "", "Sheryl", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "", "", ""], [350, "", "Kimberly", "Mack truck"], [400, "Dream Machine", "Sheryl", ""]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "Books-4-U", "", ""], [350, "Ready Reader", "Kimberly", "Mack truck"], [400, "Dream Machine", "Sheryl", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", "alfalfa"], ["June 6th", "", "Paradise", ""], ["June 7th", "Meadowgrove", "", ""]], "applied_clues": ["5", "4", "6"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", "alfalfa"], ["June 6th", "", "Paradise", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", "alfalfa"], ["June 6th", "", "Paradise", ""], ["June 7th", "Meadowgrove", "", ""]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "", "soy"], ["June 5th", "Lucky Star", "Red Oak", "alfalfa"], ["June 6th", "", "Paradise", "beets"], ["June 7th", "Meadowgrove", "", "potatoes"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "Paradise", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "Lucky Star", "", "soy"]], "applied_clues": ["5", "4"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "Lucky Star", "", "soy"]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "Paradise", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "Lucky Star", "", "soy"]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "Meadowgrove", "Paradise", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "Lucky Star", "", "soy"]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "red", ""], [4, "Splat Squad", "white", "Forest City"], [5, "", "orange", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3", "5", "2", "10", "1"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "white", "Forest City"], [5, "", "", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "red", ""], [4, "", "white", "Forest City"], [5, "", "", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "red", ""], [4, "Splat Squad", "white", "Forest City"], [5, "", "orange", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "green", "Yucca Valley"], [3, "", "red", ""], [4, "Splat Squad", "white", "Forest City"], [5, "", "orange", "Cromberg"], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers and trainers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 8, 9, 10, 11, 12.\ncustomers : Arnold, Blake, Danny, Emma, Garrett.\ntrainers : Howard, Irene, Jimmy, Kristin, Nicholas.", "clues": {"1": {"text": "Danny's appointment is 1 hour before the appointment with Irene.", "conditions": "(T[r('Danny')][c('times')] == T[r('Irene')][c('times')] - 1)"}, "2": {"text": "Of the lesson with Irene and the session at 11am, one is Emma's and the other is Blake's.", "conditions": "(T[r('Emma')][c('trainers')] == 'Irene' and T[r('Blake')][c('times')] == 11 or T[r('Blake')][c('trainers')] == 'Irene' and T[r('Emma')][c('times')] == 11) and (T[r('Irene')][c('times')] != 11)"}, "3": {"text": "The lesson at 8 am is either Emma's lesson or the appointment with Jimmy.", "conditions": "(T[r('Emma')][c('times')] == 8 or T[r('Jimmy')][c('times')] == 8) and (T[r('Emma')][c('trainers')] != 'Jimmy')"}, "4": {"text": "The session at 12 am is with Howard.", "conditions": "(T[r(12)][c('trainers')] == 'Howard')"}, "5": {"text": "The appointment at 11 am isn't with Nicholas.", "conditions": "(T[r(11)][c('trainers')] != 'Nicholas')"}, "6": {"text": "Emma's session is 2 hours after Arnold's lesson.", "conditions": "(T[r('Emma')][c('times')] == T[r('Arnold')][c('times')] + 2)"}}, "initial": [["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "Blake", "Irene"], [11, "Emma", ""], [12, "", ""]], "applied_clues": ["2"], "initial_to_current": [[["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["times", "customers", "trainers"], [8, "", ""], [9, "", ""], [10, "Blake", "Irene"], [11, "Emma", ""], [12, "", ""]]], "unsolvable_child": [["times", "customers", "trainers"], [8, "", "Jimmy"], [9, "", ""], [10, "Blake", "Irene"], [11, "Emma", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["times", "customers", "trainers"], [8, "Arnold", "Jimmy"], [9, "Danny", "Nicholas"], [10, "Emma", "Irene"], [11, "Blake", "Kristin"], [12, "Garrett", "Howard"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Help Donna make sense of Dr. Finklestein's appointment list for today. Using only the clues below, match the times to the options from names, ailments, and insurers. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 9, 10, 11, 12.\nnames : Billy, Guy, Paul, Terry.\nailments : back pain, hip pain, shingles, vertigo.\ninsurers : Ambercare, HealthCo, Lifealign, Triflex.", "clues": {"1": {"text": "The person with Lifealign insurance has an appointment sometime before the patient suffering from shingles.", "conditions": "(T[r('Lifealign')][c('times')] < T[r('shingles')][c('times')])"}, "2": {"text": "The patient with the 12 noon appointment is either Terry or the patient with Ambercare insurance.", "conditions": "(T[r(12)][c('names')] == 'Terry' or T[r(12)][c('insurers')] == 'Ambercare') and (T[r('Terry')][c('insurers')] != 'Ambercare')"}, "3": {"text": "The patient suffering from back pain has an appointment 2 hours before Guy.", "conditions": "(T[r('back pain')][c('times')] == T[r('Guy')][c('times')] - 2)"}, "4": {"text": "The person with Ambercare insurance has an appointment sometime after the person suffering from vertigo.", "conditions": "(T[r('Ambercare')][c('times')] > T[r('vertigo')][c('times')])"}, "5": {"text": "Neither Billy nor the person suffering from shingles is the person with Lifealign insurance.", "conditions": "(T[r('Billy')][c('insurers')] != 'Lifealign' and T[r('shingles')][c('insurers')] != 'Lifealign') and (T[r('Billy')][c('ailments')] != 'shingles')"}, "6": {"text": "The person with the 9:00am appointment is either Paul or the patient suffering from back pain.", "conditions": "(T[r(9)][c('names')] == 'Paul' or T[r(9)][c('ailments')] == 'back pain') and (T[r('Paul')][c('ailments')] != 'back pain')"}, "7": {"text": "The patient with the 10:00am appointment has Triflex insurance.", "conditions": "(T[r(10)][c('insurers')] == 'Triflex')"}, "8": {"text": "Of the patient suffering from vertigo and the person with Ambercare insurance, one has the 11:00am appointment and the other is Billy.", "conditions": "((T[r('vertigo')][c('times')] == 11 and T[r('Ambercare')][c('names')] == 'Billy') or (T[r('Ambercare')][c('times')] == 11 and T[r('vertigo')][c('names')] == 'Billy')) and (T[r('vertigo')][c('insurers')] != 'Ambercare') and (T[r(11)][c('names')] != 'Billy')"}}, "initial": [["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], "current": [["times", "names", "ailments", "insurers"], [9, "Billy", "", "Ambercare"], [10, "", "", ""], [11, "", "vertigo", ""], [12, "", "", ""]], "applied_clues": ["8"], "initial_to_current": [[["times", "names", "ailments", "insurers"], [9, "", "", ""], [10, "", "", ""], [11, "", "", ""], [12, "", "", ""]], [["times", "names", "ailments", "insurers"], [9, "Billy", "", "Ambercare"], [10, "", "", ""], [11, "", "vertigo", ""], [12, "", "", ""]]], "unsolvable_child": [["times", "names", "ailments", "insurers"], [9, "Billy", "", "Ambercare"], [10, "", "", ""], [11, "", "vertigo", ""], [12, "Terry", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["times", "names", "ailments", "insurers"], [9, "Terry", "back pain", "Lifealign"], [10, "Paul", "shingles", "Triflex"], [11, "Guy", "vertigo", "HealthCo"], [12, "Billy", "hip pain", "Ambercare"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "GXTV", "", "real estate"], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "GXTV", "", "real estate"], [29, "JMO", "Heathcliff", ""], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "", ""], [26, "", "Edith", "financial"], [27, "", "", ""], [28, "GXTV", "", "real estate"], [29, "JMO", "Heathcliff", "telecom"], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Valero's 5k Fun Run was held yesterday in the downtown district. Using only the clues below, match the times to the options from runners, shirt colors, and town. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 21, 22, 23, 24, 25, 26.\nrunners : Anthony, Cesar, Daryl, Greg, Orlando, Wendell.\nshirt colors : gray, indigo, orange, silver, violet, white.\ntown : Corinth, Green Leaf, Kamrar, Libertyville, Vanceboro, Waldoboro.", "clues": {"1": {"text": "The contestant in the white shirt finished 2 minutes before the contestant from Kamrar.", "conditions": "(T[r('white')][c('times')] + 2 == T[r('Kamrar')][c('times')])"}, "2": {"text": "Anthony was either the contestant from Kamrar or the competitor who finished in 25 minutes.", "conditions": "(T[r('Anthony')][c('town')] == 'Kamrar' or T[r('Anthony')][c('times')] == 25) and (T[r('Kamrar')][c('times')] != 25)"}, "3": {"text": "The contestant who finished in 25 minutes wore the indigo shirt.", "conditions": "(T[r(25)][c('shirt colors')] == 'indigo')"}, "4": {"text": "Of Cesar and the contestant in the violet shirt, one finished in 21 minutes and the other was from Waldoboro.", "conditions": "((T[r('Cesar')][c('times')] == 21 and T[r('violet')][c('town')] == 'Waldoboro') or (T[r('Cesar')][c('town')] == 'Waldoboro' and T[r('violet')][c('times')] == 21)) and (T[r('Cesar')][c('shirt colors')] != 'violet') and (T[r('Waldoboro')][c('times')] != 21)"}, "5": {"text": "Anthony didn't wear the orange shirt.", "conditions": "(T[r('Anthony')][c('shirt colors')] != 'orange')"}, "6": {"text": "The contestant from Vanceboro finished sometime before Orlando.", "conditions": "(T[r('Vanceboro')][c('times')] < T[r('Orlando')][c('times')])"}, "7": {"text": "Neither the competitor in the indigo shirt nor the contestant in the gray shirt was Orlando.", "conditions": "(T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray') and (T[r('Orlando')][c('shirt colors')] != 'indigo' and T[r('Orlando')][c('shirt colors')] != 'gray')"}, "8": {"text": "The six runners were the contestant in the gray shirt, the runner from Kamrar, the contestant from Corinth, Daryl, Orlando and the runner from Waldoboro.", "conditions": "(T[r('gray')][c('town')] != 'Kamrar') and (T[r('gray')][c('town')] != 'Corinth') and (T[r('gray')][c('runners')]!='Daryl') and (T[r('gray')][c('runners')]!='Orlando' ) and (T[r('gray')][c('town')] != 'Waldoboro') and (T[r('Kamrar')][c('runners')]!='Daryl') and (T[r('Kamrar')][c('runners')]!='Orlando') and (T[r('Corinth')][c('runners')]!='Daryl') and (T[r('Corinth')][c('runners')]!='Orlando') and (T[r('Daryl')][c('town')] != 'Waldoboro') and (T[r('Orlando')][c('town')] != 'Waldoboro')"}, "9": {"text": "Orlando wasn't from Green Leaf.", "conditions": "(T[r('Orlando')][c('town')] != 'Green Leaf')"}, "10": {"text": "Greg finished 1 minute after the runner from Corinth.", "conditions": "(T[r('Greg')][c('times')] == T[r('Corinth')][c('times')] + 1)"}, "11": {"text": "The runner from Vanceboro finished 1 minute before the competitor in the indigo shirt.", "conditions": "(T[r('Vanceboro')][c('times')] == T[r('indigo')][c('times')] - 1)"}}, "initial": [["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], "current": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "", ""]], "applied_clues": ["4", "2", "1", "3", "8"], "initial_to_current": [[["times", "runners", "shirt colors", "town"], [21, "", "", ""], [22, "", "", ""], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "", "", ""], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", ""], [26, "", "", ""]], [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "", ""]]], "unsolvable_child": [["times", "runners", "shirt colors", "town"], [21, "Orlando", "violet", ""], [22, "Cesar", "white", "Waldoboro"], [23, "", "gray", ""], [24, "Anthony", "", "Kamrar"], [25, "", "indigo", "Corinth"], [26, "", "", ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "runners", "shirt colors", "town"], [21, "Cesar", "white", "Corinth"], [22, "Greg", "violet", "Waldoboro"], [23, "Anthony", "silver", "Kamrar"], [24, "Wendell", "gray", "Vanceboro"], [25, "Daryl", "indigo", "Green Leaf"], [26, "Orlando", "orange", "Libertyville"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], "applied_clues": ["4", "5", "8", "2"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], "clue_applied_to_unsolvable_child": "11"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "A 20-year reuinion took place at Applebury High School this evening, and votes were taken on who would be crowned \"King of the Reunion. Using only the clues below, match the votes to the options from contestants, sports, and occupations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "votes : 4, 11, 18, 25, 32, 39.\ncontestants : Harvey, Isaac, Lowell, Nathaniel, Sergio, Vernon.\nsports : baseball, basketball, golf, hockey, lacrosse, soccer.\noccupations : dentist, doctor, garbage man, lawyer, musician, waiter.", "clues": {"1": {"text": "Isaac received more votes than the musician.", "conditions": "(T[r('Isaac')][c('votes')] > T[r('musician')][c('votes')])"}, "2": {"text": "Sergio is the doctor.", "conditions": "(T[r('Sergio')][c('occupations')] == 'doctor')"}, "3": {"text": "Of the basketball player and the lawyer, one received 25 votes and the other is Isaac.", "conditions": "((T[r('basketball')][c('votes')] == 25 and T[r('lawyer')][c('contestants')] == 'Isaac') or (T[r('basketball')][c('contestants')] == 'Isaac' and T[r('lawyer')][c('votes')] == 25)) and (T[r('basketball')][c('occupations')] != 'lawyer') and (T[r('Isaac')][c('votes')] != 25)"}, "4": {"text": "Sergio played baseball.", "conditions": "(T[r('Sergio')][c('sports')] == 'baseball')"}, "5": {"text": "Nathaniel received 7 votes more votes than the dentist.", "conditions": "(T[r('Nathaniel')][c('votes')] - T[r('dentist')][c('votes')] == 7)"}, "6": {"text": "The contestant who got 32 votes is either the garbage man or the baseball player.", "conditions": "(T[r(32)][c('occupations')] == 'garbage man' or T[r(32)][c('sports')] == 'baseball') and (T[r('garbage man')][c('sports')] != 'baseball')"}, "7": {"text": "The person who got 39 votes, Lowell, and the baseball player are three different people.", "conditions": "(T[r(39)][c('contestants')] != 'Lowell') and (T[r('baseball')][c('contestants')]!='Lowell') and (T[r(39)][c('sports')] != 'baseball')"}, "8": {"text": "The six people are Vernon, the garbage man, the basketball player, the contestant who got 18 votes, the baseball player and the soccer player.", "conditions": "(T[r('garbage man')][c('contestants')] != 'Vernon') and (T[r('basketball')][c('contestants')] != 'Vernon') and (T[r(18)][c('contestants')] != 'Vernon') and (T[r('baseball')][c('contestants')] != 'Vernon') and (T[r('soccer')][c('contestants')] != 'Vernon') and (T[r('garbage man')][c('sports')] != 'basketball') and (T[r('garbage man')][c('votes')] != 18) and (T[r('garbage man')][c('sports')] != 'baseball') and (T[r('garbage man')][c('sports')] != 'soccer') and (T[r('basketball')][c('votes')] != 18) and (T[r(18)][c('sports')] != 'baseball') and (T[r(18)][c('sports')] != 'soccer')"}, "9": {"text": "The waiter received 7 votes fewer votes than the golf player.", "conditions": "(T[r('waiter')][c('votes')] == T[r('golf')][c('votes')] - 7)"}, "10": {"text": "Harvey received more votes than the garbage man.", "conditions": "(T[r('Harvey')][c('votes')] > T[r('garbage man')][c('votes')])"}, "11": {"text": "The hockey player received more votes than Vernon.", "conditions": "(T[r('hockey')][c('votes')] > T[r('Vernon')][c('votes')])"}, "12": {"text": "Of the dentist and the lacrosse player, one is Vernon and the other received 18 votes.", "conditions": "((T[r('lacrosse')][c('votes')] == 18 and T[r('dentist')][c('contestants')] == 'Vernon') or (T[r('dentist')][c('votes')] == 18 and T[r('lacrosse')][c('contestants')] == 'Vernon')) and (T[r('dentist')][c('sports')] != 'lacrosse') and (T[r('Vernon')][c('votes')] != 18)"}}, "initial": [["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], "current": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "", "garbage man"], [39, "", "baseball", ""]], "applied_clues": ["3", "12", "8", "6"], "initial_to_current": [[["votes", "contestants", "sports", "occupations"], [4, "", "", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", ""], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "", "", ""], [18, "", "", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "", "lawyer"], [32, "", "", ""], [39, "", "", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "", "garbage man"], [39, "", "baseball", ""]], [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "", "garbage man"], [39, "", "baseball", ""]]], "unsolvable_child": [["votes", "contestants", "sports", "occupations"], [4, "Isaac", "basketball", ""], [11, "Vernon", "", "dentist"], [18, "", "lacrosse", ""], [25, "", "soccer", "lawyer"], [32, "", "", "garbage man"], [39, "Sergio", "baseball", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["votes", "contestants", "sports", "occupations"], [4, "Vernon", "lacrosse", "waiter"], [11, "Lowell", "golf", "garbage man"], [18, "Harvey", "hockey", "dentist"], [25, "Nathaniel", "basketball", "musician"], [32, "Sergio", "baseball", "doctor"], [39, "Isaac", "soccer", "lawyer"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "Explore More", "Sheryl", "Mack truck"], [350, "", "", ""], [400, "", "", "Airstream"]], "applied_clues": ["2", "1"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "Explore More", "Sheryl", ""], [350, "", "", ""], [400, "", "", "Airstream"]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "Explore More", "Sheryl", "Mack truck"], [350, "", "", ""], [400, "", "", "Airstream"]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "Explore More", "Sheryl", "Mack truck"], [350, "Ready Reader", "", ""], [400, "Books-4-U", "", "Airstream"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Michael Matry owns a small crop dusting business. Local farmers from all over Karab County regularly call him over to spray fertilizers or pesticides over their crops. Using only the clues below, match the days to the options from farms, towns, and crops. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : June 4th, June 5th, June 6th, June 7th.\nfarms : Blackwater, Hazelwood, Meadowgrove, Lucky Star.\ntowns : Castaic, Paradise, Red Oak, Santa Clara.\ncrops : alfalfa, beets, potatoes, soy.", "clues": {"1": {"text": "The farm Michael will dust on June 6th grows beets.", "conditions": "(T[r('June 6th')][c('crops')] == 'beets')"}, "2": {"text": "Blackwater doesn't grow soy.", "conditions": "(T[r('Blackwater')][c('crops')] != 'soy')"}, "3": {"text": "Meadowgrove will be dusted on June 5th.", "conditions": "(T[r('June 5th')][c('farms')] == 'Meadowgrove')"}, "4": {"text": "The farm Michael will dust on June 6th is either the business that grows alfalfa or the one in Paradise.", "conditions": "(T[r('June 6th')][c('crops')] == 'alfalfa' or T[r('June 6th')][c('towns')] == 'Paradise') and (T[r('alfalfa')][c('towns')] != 'Paradise')"}, "5": {"text": "Of the one that grows soy and the one in Red Oak, one will be dusted on June 4th and the other is Lucky Star.", "conditions": "((T[r('soy')][c('days')] == 'June 4th' and T[r('Red Oak')][c('farms')] == 'Lucky Star') or (T[r('Red Oak')][c('days')] == 'June 4th' and T[r('soy')][c('farms')] == 'Lucky Star')) and (T[r('soy')][c('towns')] != 'Red Oak') and (T[r('Lucky Star')][c('days')] != 'June 4th')"}, "6": {"text": "The farm that grows alfalfa, the farm Michael will dust on June 4th, and Meadowgrove are three different farms.", "conditions": "(T[r('alfalfa')][c('days')] != 'June 4th') and (T[r('alfalfa')][c('farms')] != 'Meadowgrove') and (T[r('June 4th')][c('farms')] != 'Meadowgrove')"}, "7": {"text": "The business in Santa Clara, the business that grows potatoes, and the one that grows alfalfa are three different farms.", "conditions": "(T[r('Santa Clara')][c('crops')] != 'potatoes' and T[r('Santa Clara')][c('crops')] != 'alfalfa')"}}, "initial": [["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], "current": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "Lucky Star", "", "soy"]], "applied_clues": ["5"], "initial_to_current": [[["days", "farms", "towns", "crops"], ["June 4th", "", "", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "", "", ""]], [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "", ""], ["June 6th", "", "", ""], ["June 7th", "Lucky Star", "", "soy"]]], "unsolvable_child": [["days", "farms", "towns", "crops"], ["June 4th", "", "Red Oak", ""], ["June 5th", "", "Paradise", ""], ["June 6th", "", "", "alfalfa"], ["June 7th", "Lucky Star", "", "soy"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["days", "farms", "towns", "crops"], ["June 4th", "Hazelwood", "Santa Clara", "soy"], ["June 5th", "Meadowgrove", "Castaic", "potatoes"], ["June 6th", "Blackwater", "Paradise", "beets"], ["June 7th", "Lucky Star", "Red Oak", "alfalfa"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "90 million", "New Zealand"]], "applied_clues": ["6", "2", "11", "3"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "90 million", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "75 million", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", "Kyrgyzstan"], [1250, "", "", ""], [1500, "pilodontus", "90 million", "New Zealand"]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Bushnell County is putting together a historical brochure about some of the ancient cultures that used to live there. Using only the clues below, match the years to the options from cultures and populations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "years : 100, 350, 600, 850.\ncultures : Budel, Hatgare, Oiracha, Sameos.\npopulations : 4500, 5000, 7500, 9500.", "clues": {"1": {"text": "The Oiracha culture, the culture founded in 850 AD and the culture with 4500 people were all different cultures.", "conditions": "(T[r(850)][c('cultures')] != 'Oiracha') and (T[r(4500)][c('cultures')] != 'Oiracha') and (T[r(4500)][c('years')] != 850)"}, "2": {"text": "The culture with 9500 people was founded sometime before the culture with 4500 people.", "conditions": "(T[r(9500)][c('years')]<T[r(4500)][c('years')])"}, "3": {"text": "Of the culture with 4500 people and the culture with 9500 people, one was the Budel culture and the other was founded in 600 AD.", "conditions": "((T[r(4500)][c('cultures')]== 'Budel' and T[r(9500)][c('years')]== 600) or (T[r(4500)][c('years')]== 600 and T[r(9500)][c('cultures')]== 'Budel')) and (T[r(600)][c('cultures')]!= 'Budel')"}, "4": {"text": "The culture with 5000 people was founded 250 years before the culture with 9500 people.", "conditions": "(T[r(5000)][c('years')] + 250 == T[r(9500)][c('years')])"}, "5": {"text": "The Sameos culture was founded 250 years before the culture with 7500 people.", "conditions": "(T[r('Sameos')][c('years')] + 250 == T[r(7500)][c('years')])"}}, "initial": [["years", "cultures", "populations"], [100, "", ""], [350, "", ""], [600, "", ""], [850, "", ""]], "current": [["years", "cultures", "populations"], [100, "Budel", 9500], [350, "", ""], [600, "", 4500], [850, "", ""]], "applied_clues": ["3"], "initial_to_current": [[["years", "cultures", "populations"], [100, "", ""], [350, "", ""], [600, "", ""], [850, "", ""]], [["years", "cultures", "populations"], [100, "Budel", 9500], [350, "", ""], [600, "", 4500], [850, "", ""]]], "unsolvable_child": [["years", "cultures", "populations"], [100, "Budel", 9500], [350, "Oiracha", ""], [600, "", 4500], [850, "", ""]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["years", "cultures", "populations"], [100, "Oiracha", 5000], [350, "Budel", 9500], [600, "Sameos", 4500], [850, "Hatgare", 7500]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], "applied_clues": ["4", "5", "8", "2", "11"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", "Philadelphia"], [30, "Diane DeNiro", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1", "3"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "Irene", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "", "", ""], [350, "", "", ""], [400, "", "Sheryl", ""]], "applied_clues": ["2"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "", "", ""], [350, "", "", ""], [400, "", "Sheryl", ""]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "Dream Machine", "Kimberly", ""], [350, "", "", ""], [400, "", "Sheryl", "Mack truck"]], "clue_applied_to_unsolvable_child": "1"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Mitch has a huge collection of dinosaur fossils, and has decided to list some for sale online. Using only the clues below, match the prices to the options from dinosaurs, ages, and countries. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 500, 750, 1000, 1250, 1500.\ndinosaurs : gigasaurus, mirasaurus, pilodontus, rotosaurus, verasaurus.\nages : 72 million, 75 million, 85 million, 87 million, 90 million.\ncountries : Iceland, Kyrgyzstan, New Zealand, Oman, Serbia.", "clues": {"1": {"text": "Neither the 85 million year old fossil nor the rotosaurus is the fossil discovered in Iceland.", "conditions": "(T[r('85 million')][c('countries')] != 'Iceland' and T[r('rotosaurus')][c('countries')] != 'Iceland') and (T[r('85 million')][c('dinosaurs')] != 'rotosaurus')"}, "2": {"text": "The 87 million year old fossil costs 500 dollars more than the mirasaurus.", "conditions": "(T[r('87 million')][c('prices')] == T[r('mirasaurus')][c('prices')] + 500)"}, "3": {"text": "The pilodontus is either the 90 million year old fossil or the 75 million year old fossil.", "conditions": "(T[r('pilodontus')][c('ages')] == '90 million' or T[r('pilodontus')][c('ages')] == '75 million')"}, "4": {"text": "The fossil discovered in Kyrgyzstan isn't 90 million years old.", "conditions": "(T[r('Kyrgyzstan')][c('ages')] != '90 million')"}, "5": {"text": "The mirasaurus was found in Serbia.", "conditions": "(T[r('mirasaurus')][c('countries')] == 'Serbia')"}, "6": {"text": "Of the $1500 fossil and the 87 million year old fossil, one is the gigasaurus and the other was found in New Zealand.", "conditions": "((T[r(1500)][c('dinosaurs')] == 'gigasaurus' and T[r('87 million')][c('countries')] == 'New Zealand') or (T[r(1500)][c('countries')] == 'New Zealand' and T[r('87 million')][c('dinosaurs')] == 'gigasaurus')) and (T[r('87 million')][c('prices')] != 1500) and (T[r('New Zealand')][c('dinosaurs')] != 'gigasaurus')"}, "7": {"text": "The fossil discovered in Kyrgyzstan costs less than the mirasaurus.", "conditions": "(T[r('Kyrgyzstan')][c('prices')] < T[r('mirasaurus')][c('prices')])"}, "8": {"text": "The $1000 fossil isn't 90 million years old.", "conditions": "(T[r(1000)][c('ages')] != '90 million')"}, "9": {"text": "The $1250 fossil is either the verasaurus or the fossil discovered in Serbia.", "conditions": "(T[r(1250)][c('dinosaurs')] == 'verasaurus' or T[r(1250)][c('countries')] == 'Serbia') and (T[r('verasaurus')][c('countries')] != 'Serbia')"}, "10": {"text": "The $1000 fossil was found in Oman.", "conditions": "(T[r(1000)][c('countries')] == 'Oman')"}, "11": {"text": "The pilodontus costs 500 dollars more than the fossil discovered in Kyrgyzstan.", "conditions": "(T[r('pilodontus')][c('prices')] == T[r('Kyrgyzstan')][c('prices')] + 500)"}}, "initial": [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], "current": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "75 million", ""], [1500, "", "90 million", "New Zealand"]], "applied_clues": ["6", "2", "11", "3", "4"], "initial_to_current": [[["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "", "", ""], [1250, "", "", ""], [1500, "", "", ""]], [["prices", "dinosaurs", "ages", "countries"], [500, "", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", ""], [1000, "gigasaurus", "87 million", ""], [1250, "", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "", ""], [1500, "", "", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "75 million", ""], [1500, "", "90 million", "New Zealand"]], [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "75 million", ""], [1500, "", "90 million", "New Zealand"]]], "unsolvable_child": [["prices", "dinosaurs", "ages", "countries"], [500, "mirasaurus", "", ""], [750, "", "", "Kyrgyzstan"], [1000, "gigasaurus", "87 million", ""], [1250, "pilodontus", "75 million", ""], [1500, "", "90 million", "New Zealand"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["prices", "dinosaurs", "ages", "countries"], [500, "rotosaurus", "72 million", "Kyrgyzstan"], [750, "mirasaurus", "85 million", "Serbia"], [1000, "pilodontus", "75 million", "Oman"], [1250, "verasaurus", "87 million", "New Zealand"], [1500, "gigasaurus", "90 million", "Iceland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Brisco County Fair featured a number of local jugglers during last night's grand finale performance. Using only the clues below, match the orders to the options from names, items, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "orders : 1, 2, 3, 4, 5, 6.\nnames : Howard, Katrina, Melissa, Nick, Peter, Shari.\nitems : balls, batons, bowling pins, chainsaws, flashlights, mobile phones.\ntowns : Carbon, Dubuque, Menlo, Nice, Quasqueton, Selma.", "clues": {"1": {"text": "The performer from Quasqueton didn't use balls.", "conditions": "(T[r('Quasqueton')][c('items')] != 'balls')"}, "2": {"text": "The person who went sixth wasn't from Carbon.", "conditions": "(T[r(6)][c('towns')] != 'Carbon')"}, "3": {"text": "The person from Nice didn't use mobile phones.", "conditions": "(T[r('Nice')][c('items')] != 'mobile phones')"}, "4": {"text": "Howard went fourth.", "conditions": "(T[r('Howard')][c('orders')] == 4)"}, "5": {"text": "The person who went first didn't use mobile phones.", "conditions": "(T[r(1)][c('items')] != 'mobile phones')"}, "6": {"text": "The juggler from Menlo was either the juggler who used chainsaws or Nick.", "conditions": "(T[r('Menlo')][c('items')] == 'chainsaws' or T[r('Menlo')][c('names')] == 'Nick') and (T[r('chainsaws')][c('names')] != 'Nick')"}, "7": {"text": "Of the performer who went sixth and the juggler who went fifth, one used flashlights and the other was from Menlo.", "conditions": "((T[r(6)][c('items')] == 'flashlights' and T[r(5)][c('towns')] == 'Menlo') or (T[r(6)][c('towns')] == 'Menlo' and T[r(5)][c('items')] == 'flashlights')) and (T[r('Menlo')][c('items')] != 'flashlights')"}, "8": {"text": "Melissa was either the juggler who used chainsaws or the performer from Selma.", "conditions": "(T[r('Melissa')][c('items')] == 'chainsaws' or T[r('Melissa')][c('towns')] == 'Selma') and (T[r('chainsaws')][c('towns')] != 'Selma')"}, "9": {"text": "Nick performed 3 spots before the juggler from Nice.", "conditions": "(T[r('Nick')][c('orders')] - T[r('Nice')][c('orders')] == -3)"}, "10": {"text": "The juggler from Menlo performed 2 spots after Melissa.", "conditions": "(T[r('Menlo')][c('orders')] == T[r('Melissa')][c('orders')] + 2)"}, "11": {"text": "Shari didn't go fifth.", "conditions": "(T[r('Shari')][c('orders')] != 5)"}, "12": {"text": "The performer from Carbon didn't use balls.", "conditions": "(T[r('Carbon')][c('items')] != 'balls')"}, "13": {"text": "Peter used balls.", "conditions": "(T[r('Peter')][c('items')] == 'balls')"}, "14": {"text": "The juggler who went first didn't use batons.", "conditions": "(T[r(1)][c('items')] != 'batons')"}}, "initial": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "Nick", "flashlights", ""], [6, "", "chainsaws", "Menlo"]], "applied_clues": ["7", "10", "6"], "initial_to_current": [[["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "", "flashlights", ""], [6, "", "", "Menlo"]], [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", ""], [5, "Nick", "flashlights", ""], [6, "", "chainsaws", "Menlo"]]], "unsolvable_child": [["orders", "names", "items", "towns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "Melissa", "", "Selma"], [5, "Nick", "flashlights", ""], [6, "", "chainsaws", "Menlo"]], "clue_applied_to_unsolvable_child": "8"}, "outputs": {"solution": [["orders", "names", "items", "towns"], [1, "Nick", "bowling pins", "Carbon"], [2, "Peter", "balls", "Dubuque"], [3, "Melissa", "mobile phones", "Selma"], [4, "Howard", "batons", "Nice"], [5, "Katrina", "chainsaws", "Menlo"], [6, "Shari", "flashlights", "Quasqueton"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", "free weights"], ["10:30am", "", "", ""], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "MVP Events prides itself on planning large-scale parties for 50 or more people, anywhere in the United States. This month the company has several different events to plan. Using only the clues below, match the people to the options from planners, events, and locations. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "people : 50, 75, 100, 125.\nplanners : Bridget, Clarence, Herbert, Oliver.\nevents : anniversary, graduation, retreat, symposium.\nlocations : Connecticut, Delaware, Georgia, Wyoming.", "clues": {"1": {"text": "The event in Connecticut will involve 25 more people than the symposium job.", "conditions": "(T[r('Connecticut')][c('people')] == T[r('symposium')][c('people')] + 25)"}, "2": {"text": "The assignment in Delaware will involve 25 more people than Oliver's job.", "conditions": "(T[r('Delaware')][c('people')] == T[r('Oliver')][c('people')] + 25)"}, "3": {"text": "Bridget's job won't be in Wyoming.", "conditions": "(T[r('Bridget')][c('locations')] != 'Wyoming')"}, "4": {"text": "Of the event in Wyoming and Clarence's event, one will have 125 attendees and the other is the graduation.", "conditions": "((T[r('Wyoming')][c('people')] == 125 and T[r('Clarence')][c('events')] == 'graduation') or (T[r('Wyoming')][c('events')] == 'graduation' and T[r('Clarence')][c('people')] == 125)) and (T[r('graduation')][c('people')] != 125) and (T[r('Clarence')][c('locations')] != 'Wyoming')"}, "5": {"text": "The retreat assignment will involve somewhat more people than the event in Connecticut.", "conditions": "(T[r('retreat')][c('people')] > T[r('Connecticut')][c('people')])"}, "6": {"text": "Oliver's job is either the event in Georgia or the symposium assignment.", "conditions": "(T[r('Oliver')][c('locations')] == 'Georgia' or T[r('Oliver')][c('events')] == 'symposium') and (T[r('Georgia')][c('events')] != 'symposium')"}}, "initial": [["people", "planners", "events", "locations"], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""], [125, "", "", ""]], "current": [["people", "planners", "events", "locations"], [50, "", "symposium", ""], [75, "", "", "Connecticut"], [100, "Clarence", "graduation", ""], [125, "", "", "Wyoming"]], "applied_clues": ["4", "1"], "initial_to_current": [[["people", "planners", "events", "locations"], [50, "", "", ""], [75, "", "", ""], [100, "", "", ""], [125, "", "", ""]], [["people", "planners", "events", "locations"], [50, "", "", ""], [75, "", "", ""], [100, "Clarence", "graduation", ""], [125, "", "", "Wyoming"]], [["people", "planners", "events", "locations"], [50, "", "symposium", ""], [75, "", "", "Connecticut"], [100, "Clarence", "graduation", ""], [125, "", "", "Wyoming"]]], "unsolvable_child": [["people", "planners", "events", "locations"], [50, "", "symposium", "Georgia"], [75, "Oliver", "", "Connecticut"], [100, "Clarence", "graduation", "Delaware"], [125, "", "", "Wyoming"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["people", "planners", "events", "locations"], [50, "Oliver", "anniversary", "Georgia"], [75, "Bridget", "symposium", "Delaware"], [100, "Clarence", "graduation", "Connecticut"], [125, "Herbert", "retreat", "Wyoming"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Gerber County Paintball League has just completed its 10th season. Using only the clues below, match the rankings to the options from teams, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "rankings : 1, 2, 3, 4, 5, 6.\nteams : Color Blinds, Night Ninjas, Pea Shooters, Splat Squad, Spray Paints, Target Bombs.\ncolors : blue, green, orange, purple, red, white.\nhometowns : Armona, Cromberg, Forest City, Libertyville, Prairie City, Yucca Valley.", "clues": {"1": {"text": "The \"Splat Squad\" was ranked 1 place ahead of the orange team.", "conditions": "(T[r('Splat Squad')][c('rankings')] == T[r('orange')][c('rankings')] - 1)"}, "2": {"text": "The white team was ranked 1 place ahead of the squad from Cromberg.", "conditions": "(T[r('white')][c('rankings')] == T[r('Cromberg')][c('rankings')] - 1)"}, "3": {"text": "The group from Forest City is either the white team or the squad that finished sixth.", "conditions": "(T[r('Forest City')][c('colors')] == 'white' or T[r('Forest City')][c('rankings')] == 6) and (T[r('white')][c('rankings')] != 6)"}, "4": {"text": "Of the squad that finished second and the blue team, one is from Prairie City and the other is the \"Color Blinds\".", "conditions": "((T[r(2)][c('hometowns')] == 'Prairie City' and T[r('blue')][c('teams')] == 'Color Blinds') or (T[r('blue')][c('hometowns')] == 'Prairie City' and T[r(2)][c('teams')] == 'Color Blinds')) and (T[r(2)][c('colors')] != 'blue') and (T[r('Prairie City')][c('teams')] != 'Color Blinds')"}, "5": {"text": "The \"Target Bombs\" is either the blue team or the group that finished first.", "conditions": "(T[r('Target Bombs')][c('colors')] == 'blue' or T[r('Target Bombs')][c('rankings')] == 1) and (T[r('blue')][c('rankings')] != 1)"}, "6": {"text": "The \"Spray Paints\" isn't from Yucca Valley.", "conditions": "(T[r('Spray Paints')][c('hometowns')] != 'Yucca Valley')"}, "7": {"text": "The \"Splat Squad\", the team that finished fifth, and the orange team are three different teams.", "conditions": "(T[r('Splat Squad')][c('rankings')]!=5) and (T[r('Splat Squad')][c('colors')]!='orange') and (T[r(5)][c('colors')]!='orange')"}, "8": {"text": "The squad that finished fifth, the purple team, the squad from Yucca Valley, the \"Splat Squad\" and the blue team are all different teams.", "conditions": "(T[r(5)][c('colors')]!='purple') and (T[r(5)][c('hometowns')]!='Yucca Valley') and (T[r(5)][c('teams')]!='Splat Squad') and (T[r(5)][c('colors')]!='blue') and (T[r('purple')][c('hometowns')]!='Yucca Valley') and (T[r('purple')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('teams')]!='Splat Squad') and (T[r('Yucca Valley')][c('colors')]!='blue') and (T[r('Splat Squad')][c('colors')]!='blue')"}, "9": {"text": "The squad from Cromberg uses orange paintballs.", "conditions": "(T[r('Cromberg')][c('colors')] == 'orange')"}, "10": {"text": "The \"Color Blinds\" was ranked 1 place ahead of the red team.", "conditions": "(T[r('Color Blinds')][c('rankings')] == T[r('red')][c('rankings')] - 1)"}, "11": {"text": "Of the group that finished sixth and the purple team, one is the \"Night Ninjas\" and the other is from Prairie City.", "conditions": "((T[r(6)][c('teams')] == 'Night Ninjas' and T[r('purple')][c('hometowns')] == 'Prairie City') or (T[r('purple')][c('teams')] == 'Night Ninjas' and T[r(6)][c('hometowns')] == 'Prairie City')) and (T[r(6)][c('colors')] != 'purple') and (T[r('Night Ninjas')][c('hometowns')] != 'Prairie City')"}, "12": {"text": "The team from Armona was ranked 2 places behind the red team.", "conditions": "(T[r('Armona')][c('rankings')] == T[r('red')][c('rankings')] + 2)"}}, "initial": [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], "current": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", "Yucca Valley"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], "applied_clues": ["4", "11", "3", "5", "2", "10", "1", "8", "7"], "initial_to_current": [[["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "", ""]], [["rankings", "teams", "colors", "hometowns"], [1, "", "", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "", ""], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", ""], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "", "red", "Cromberg"], [4, "", "", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", ""], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", "Yucca Valley"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]], [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", ""], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", "Yucca Valley"], [5, "", "", ""], [6, "Target Bombs", "blue", "Prairie City"]]], "unsolvable_child": [["rankings", "teams", "colors", "hometowns"], [1, "Night Ninjas", "purple", "Libertyville"], [2, "Color Blinds", "white", "Forest City"], [3, "Splat Squad", "red", "Cromberg"], [4, "", "orange", "Yucca Valley"], [5, "", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "clue_applied_to_unsolvable_child": "12"}, "outputs": {"solution": [["rankings", "teams", "colors", "hometowns"], [1, "Splat Squad", "white", "Forest City"], [2, "Color Blinds", "orange", "Cromberg"], [3, "Pea Shooters", "red", "Yucca Valley"], [4, "Night Ninjas", "purple", "Libertyville"], [5, "Spray Paints", "green", "Armona"], [6, "Target Bombs", "blue", "Prairie City"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Piper Hills Academy recently installed a high-speed 3-D printer in its technology lab, and several students were given an opportunity this week to use it in order to print items of their own design. Using only the clues below, match the times to the options from students, items, and colors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times: 10, 15, 20, 25, 30, 35.\nstudents : Adrienne, Bertha, Eleanor, Felicia, Irma, Willis.\nitems : cup, flower, mask, phone case, skull, whistle.\ncolors : green, orange, purple, red, white, yellow.", "clues": {"1": {"text": "The skull took 5 more minutes to print than Bertha's piece.", "conditions": "(T[r('skull')][c('times')] == 5 + T[r('Bertha')][c('times')])"}, "2": {"text": "Of the red piece and the item that printed in 20 minutes, one was the mask and the other was Felicia's.", "conditions": "(((T[r('red')][c('items')] == 'mask' and T[r(20)][c('students')] == 'Felicia') or (T[r('red')][c('students')] == 'Felicia' and T[r(20)][c('items')] == 'mask'))) and (T[r(20)][c('colors')] != 'red') and (T[r('Felicia')][c('items')] != 'mask')"}, "3": {"text": "Willis's item wasn't the skull.", "conditions": "(T[r('Willis')][c('items')] != 'skull')"}, "4": {"text": "The item that printed in 25 minutes wasn't the phone case.", "conditions": "(T[r(25)][c('items')] != 'phone case')"}, "5": {"text": "Adrienne's piece was either the piece that printed in 10 minutes or the red item.", "conditions": "(T[r('Adrienne')][c('times')] == 10 or T[r('Adrienne')][c('colors')] == 'red') and (T[r(10)][c('colors')] != 'red')"}, "6": {"text": "Of the item that printed in 30 minutes and the item that printed in 20 minutes, one was Irma's and the other was the skull.", "conditions": "(((T[r(30)][c('students')] == 'Irma' and T[r(20)][c('items')] == 'skull') or (T[r(30)][c('items')] == 'skull' and T[r(20)][c('students')] == 'Irma'))) and (T[r('Irma')][c('items')] != 'skull')"}, "7": {"text": "Bertha's piece took 10 more minutes to print than the flower.", "conditions": "(T[r('Bertha')][c('times')] == 10 + T[r('flower')][c('times')])"}, "8": {"text": "The yellow design wasn't the phone case.", "conditions": "(T[r('yellow')][c('items')] != 'phone case')"}, "9": {"text": "Of the flower and the white design, one took 15 minutes to print and the other took 10 minutes to print.", "conditions": "(((T[r('flower')][c('times')] == 15 and T[r('white')][c('times')] == 10) or (T[r('flower')][c('times')] == 10 and T[r('white')][c('times')] == 15))) and (T[r('flower')][c('colors')] != 'white')"}, "10": {"text": "The cup required somewhat fewer minutes to print than Felicia's design.", "conditions": "(T[r('cup')][c('times')] < T[r('Felicia')][c('times')])"}, "11": {"text": "Felicia's design required 15 fewer minutes to print than the green item.", "conditions": "(T[r('Felicia')][c('times')] == T[r('green')][c('times')] - 15)"}, "12": {"text": "The orange design, the flower, Irma's item and the item that printed in 35 minutes were all different items.", "conditions": "(T[r('orange')][c('items')] != 'flower') and (T[r('orange')][c('students')] != 'Irma') and (T[r('orange')][c('times')] != 35) and (T[r('flower')][c('students')] != 'Irma') and (T[r('flower')][c('times')] != 35) and (T[r('Irma')][c('times')] != 35)"}}, "initial": [["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], "current": [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Felicia", "skull", ""], [25, "", "", ""], [30, "Irma", "", ""], [35, "", "mask", "red"]], "applied_clues": ["9", "6", "2"], "initial_to_current": [[["times", "students", "items", "colors"], [10, "", "", ""], [15, "", "", ""], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "", ""], [25, "", "", ""], [30, "", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "", "skull", ""], [25, "", "", ""], [30, "Irma", "", ""], [35, "", "", ""]], [["times", "students", "items", "colors"], [10, "", "flower", ""], [15, "", "", "white"], [20, "Felicia", "skull", ""], [25, "", "", ""], [30, "Irma", "", ""], [35, "", "mask", "red"]]], "unsolvable_child": [["times", "students", "items", "colors"], [10, "Adrienne", "flower", ""], [15, "", "", "white"], [20, "Felicia", "skull", ""], [25, "", "", ""], [30, "Irma", "", ""], [35, "", "mask", "red"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["times", "students", "items", "colors"], [10, "Adrienne", "cup", "white"], [15, "Felicia", "flower", "red"], [20, "Irma", "mask", "yellow"], [25, "Bertha", "whistle", "orange"], [30, "Eleanor", "skull", "green"], [35, "Willis", "phone case", "purple"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", "Mack truck"]], "applied_clues": ["2", "1"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", "Mack truck"]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Dream Machine", "Kimberly", ""], [300, "Books-4-U", "", ""], [350, "Explore More", "", "Airstream"], [400, "", "Sheryl", "Mack truck"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "", ""]], "applied_clues": ["1"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "", ""], [9, "", "Lake Jesup"], [10, "Claude", "Cassia"], [11, "", ""], [12, "Alex", ""]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "\"Parties Unlimited\" caters to a wide variety of special requests (such as clowns or magicians) for its clients. Using only the clues below, match the days to the options from requests and families. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "days : 3, 4, 5, 6, 7.\nrequests : clown, petting zoo, photo booth, rock band, superhero.\nfamilies : Benton, Hayden, Ingram, Stanley, Zimmerman.", "clues": {"1": {"text": "The party on October 5 is for the Ingrams.", "conditions": "(T[r(5)][c('families')] == 'Ingram')"}, "2": {"text": "The booking that requested the clown is sometime after the Ingram family booking.", "conditions": "(T[r('clown')][c('days')] > T[r('Ingram')][c('days')])"}, "3": {"text": "The booking on October 4 is either the party that requested the petting zoo or the Hayden family booking.", "conditions": "(T[r(4)][c('requests')] == 'petting zoo' or T[r(4)][c('families')] == 'Hayden') and (T[r('Hayden')][c('requests')] != 'petting zoo')"}, "4": {"text": "The five events are the booking on October 7, the party that requested the rock band, the event that requested the superhero, the Ingram family party and the Benton family party.", "conditions": "(T[r('rock band')][c('days')] != 7) and (T[r('superhero')][c('days')] != 7) and (T[r('Ingram')][c('days')] != 7) and (T[r('Benton')][c('days')] != 7) and (T[r('rock band')][c('families')] != 'Ingram') and (T[r('rock band')][c('families')] != 'Benton') and (T[r('superhero')][c('families')] != 'Ingram') and (T[r('superhero')][c('families')] != 'Benton')"}, "5": {"text": "The booking that requested the photo booth is either the event on October 6 or the event on October 3.", "conditions": "(T[r('photo booth')][c('days')] == 6 or T[r('photo booth')][c('days')] == 3)"}, "6": {"text": "The Ingram family booking is 1 day before the booking that requested the superhero.", "conditions": "(T[r('Ingram')][c('days')] == T[r('superhero')][c('days')] - 1)"}, "7": {"text": "The party that requested the superhero is for the Zimmermans.", "conditions": "(T[r('superhero')][c('families')] == 'Zimmerman')"}}, "initial": [["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], "current": [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", "Ingram"], [6, "", "Hayden"], [7, "", ""]], "applied_clues": ["5", "3", "1"], "initial_to_current": [[["days", "requests", "families"], [3, "", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "", ""], [5, "", ""], [6, "", ""], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", ""], [6, "", "Hayden"], [7, "", ""]], [["days", "requests", "families"], [3, "photo booth", ""], [4, "petting zoo", ""], [5, "", "Ingram"], [6, "", "Hayden"], [7, "", ""]]], "unsolvable_child": [["days", "requests", "families"], [3, "photo booth", "Benton"], [4, "petting zoo", ""], [5, "", "Ingram"], [6, "rock band", "Hayden"], [7, "", ""]], "clue_applied_to_unsolvable_child": "4"}, "outputs": {"solution": [["days", "requests", "families"], [3, "photo booth", "Benton"], [4, "rock band", "Hayden"], [5, "petting zoo", "Ingram"], [6, "superhero", "Zimmerman"], [7, "clown", "Stanley"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Buckner's Boardwalk held a Skee Ball contest this weekend. Using only the clues below, match the scores to the options from players, lanes, and towns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 300, 380, 460, 540, 620, 700.\nplayers : Deanna, Gretchen, Leigh, Nina, Rena, Wanda.\nlanes : 1, 3, 4, 5, 6, 7.\ntowns : Bristol, Elk Grove, Fort Kent, Modesto, Ontario, Pacific Grove.", "clues": {"1": {"text": "The person from Bristol is either the contestant in lane 1 or the person in lane 3.", "conditions": "(T[r('Bristol')][c('lanes')] == 1 or T[r('Bristol')][c('lanes')] == 3)"}, "2": {"text": "The player from Fort Kent scored 240 points more points than Leigh.", "conditions": "(T[r('Fort Kent')][c('scores')] == T[r('Leigh')][c('scores')] + 240)"}, "3": {"text": "Of the person who scored 540 points and Deanna, one was in lane 4 and the other was from Elk Grove.", "conditions": "((T[r(540)][c('lanes')] == 4 and T[r('Deanna')][c('towns')] == 'Elk Grove') or (T[r(540)][c('towns')] == 'Elk Grove' and T[r('Deanna')][c('lanes')] == 4)) and (T[r(540)][c('players')] != 'Deanna') and (T[r(4)][c('towns')] != 'Elk Grove')"}, "4": {"text": "Deanna wasn't in lane 7.", "conditions": "(T[r('Deanna')][c('lanes')] != 7)"}, "5": {"text": "Rena scored 80 points more points than the contestant from Ontario.", "conditions": "(T[r('Rena')][c('scores')] == T[r('Ontario')][c('scores')] + 80)"}, "6": {"text": "Deanna scored more points than the contestant in lane 6.", "conditions": "(T[r('Deanna')][c('scores')] > T[r(6)][c('scores')])"}, "7": {"text": "The contestant from Fort Kent wasn't in lane 6.", "conditions": "(T[r('Fort Kent')][c('lanes')] != 6)"}, "8": {"text": "The player who scored 300 points is either the player in lane 1 or the player from Elk Grove.", "conditions": "(T[r(300)][c('lanes')] == 1 or T[r(300)][c('towns')] == 'Elk Grove') and (T[r(1)][c('towns')] != 'Elk Grove')"}, "9": {"text": "The person in lane 3 scored 80 points more points than Wanda.", "conditions": "(T[r(3)][c('scores')] == T[r('Wanda')][c('scores')] + 80)"}, "10": {"text": "Of the player who scored 380 points and the contestant in lane 4, one was from Ontario and the other is Gretchen.", "conditions": "((T[r(380)][c('towns')] == 'Ontario' and T[r('Gretchen')][c('lanes')] == 4) or (T[r(380)][c('players')] == 'Gretchen' and T[r(4)][c('towns')] == 'Ontario')) and (T[r(380)][c('lanes')] != 4) and (T[r('Ontario')][c('players')] != 'Gretchen')"}, "11": {"text": "Of the person who scored 300 points and the person from Pacific Grove, one is Wanda and the other was in lane 4.", "conditions": "((T[r(300)][c('players')] == 'Wanda' and T[r('Pacific Grove')][c('lanes')] == 4) or (T[r(300)][c('lanes')] == 4 and T[r('Pacific Grove')][c('players')] == 'Wanda')) and (T[r(300)][c('towns')] != 'Pacific Grove') and (T[r('Wanda')][c('lanes')] != 4)"}}, "initial": [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], "current": [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]], "applied_clues": ["3", "10", "11"], "initial_to_current": [[["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", "", ""], [620, "", "", ""], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", ""], [460, "", "", ""], [540, "", 4, ""], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, ""], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]], [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "Deanna", "", "Elk Grove"], [700, "", "", ""]]], "unsolvable_child": [["scores", "players", "lanes", "towns"], [300, "Wanda", "", ""], [380, "", "", "Ontario"], [460, "Leigh", "", ""], [540, "Gretchen", 4, "Pacific Grove"], [620, "Deanna", "", "Elk Grove"], [700, "", "", "Fort Kent"]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["scores", "players", "lanes", "towns"], [300, "Wanda", 1, "Bristol"], [380, "Leigh", 3, "Ontario"], [460, "Rena", 6, "Modesto"], [540, "Gretchen", 4, "Pacific Grove"], [620, "Nina", 7, "Fort Kent"], [700, "Deanna", 5, "Elk Grove"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Lou's Bar and Grill held a friendly darts tournament this week. Using only the clues below, match the scores to the options from players, colors, and hometowns. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "scores : 41, 48, 55, 62, 69.\nplayers : Colin, Felix, Greg, Matthew, Tom.\ncolors : black, gray, red, white, yellow.\nhometowns : Mount Union, Oakland Acres, Toledo, Worthington, Yorktown.", "clues": {"1": {"text": "Of Felix and the player who scored 69 points, one was from Oakland Acres and the other threw the gray darts.", "conditions": "((T[r('Felix')][c('hometowns')] == 'Oakland Acres' and T[r(69)][c('colors')] == 'gray') or (T[r('Felix')][c('colors')] == 'gray' and T[r(69)][c('hometowns')] == 'Oakland Acres')) and (T[r('Felix')][c('scores')] != 69) and (T[r('gray')][c('hometowns')] != 'Oakland Acres')"}, "2": {"text": "Tom finished 7 points lower than the player from Yorktown.", "conditions": "(T[r('Tom')][c('scores')] + 7 == T[r('Yorktown')][c('scores')])"}, "3": {"text": "Of the player who scored 41 points and Felix, one threw the black darts and the other was from Toledo.", "conditions": "((T[r(41)][c('colors')] == 'black' and T[r('Felix')][c('hometowns')] == 'Toledo') or (T[r(41)][c('hometowns')] == 'Toledo' and T[r('Felix')][c('colors')] == 'black')) and (T[r('Felix')][c('scores')] != 41) and (T[r('Toledo')][c('colors')] != 'black')"}, "4": {"text": "Matthew didn't finish with 55 points.", "conditions": "(T[r('Matthew')][c('scores')] != 55)"}, "5": {"text": "The contestant who scored 48 points didn't throw the yellow darts.", "conditions": "(T[r(48)][c('colors')] != 'yellow')"}, "6": {"text": "Colin finished 7 points lower than the contestant who threw the red darts.", "conditions": "(T[r('Colin')][c('scores')] + 7 == T[r('red')][c('scores')])"}, "7": {"text": "The five players were Tom, the player who threw the black darts, the player who scored 69 points, the player from Yorktown and the contestant from Worthington.", "conditions": "(T[r('black')][c('players')] != 'Tom') and (T[r(69)][c('players')] != 'Tom') and (T[r('Yorktown')][c('players')] != 'Tom') and (T[r('Worthington')][c('players')] != 'Tom') and (T[r(69)][c('colors')] != 'black') and (T[r('black')][c('hometowns')] != 'Yorktown') and (T[r('black')][c('hometowns')] != 'Worthington') and (T[r(69)][c('hometowns')] != 'Yorktown') and (T[r(69)][c('hometowns')] != 'Worthington')"}, "8": {"text": "Tom finished with 41 points.", "conditions": "(T[r('Tom')][c('scores')] == 41)"}}, "initial": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], "current": [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "Felix", "gray", ""], [69, "", "", "Oakland Acres"]], "applied_clues": ["1"], "initial_to_current": [[["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "", "", ""], [69, "", "", ""]], [["scores", "players", "colors", "hometowns"], [41, "", "", ""], [48, "", "", ""], [55, "", "", ""], [62, "Felix", "gray", ""], [69, "", "", "Oakland Acres"]]], "unsolvable_child": [["scores", "players", "colors", "hometowns"], [41, "", "black", ""], [48, "", "", ""], [55, "", "", ""], [62, "Felix", "gray", "Toledo"], [69, "", "", "Oakland Acres"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["scores", "players", "colors", "hometowns"], [41, "Tom", "yellow", "Toledo"], [48, "Colin", "white", "Yorktown"], [55, "Greg", "red", "Worthington"], [62, "Felix", "black", "Oakland Acres"], [69, "Matthew", "gray", "Mount Union"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "applied_clues": ["4", "6", "3"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Orlando", "Lake Jesup"], [9, "Meredith", ""], [10, "Esther", ""], [11, "", "Bull Creek"], [12, "", "Reedy Creek"]], "clue_applied_to_unsolvable_child": "7"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The U. S. Air Force is currently testing a number of new experimental, supersonic aircraft, each built by a different aerospace company. Using only the clues below, match the prices to the options from aircraft, companies, and top speeds. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices : 100, 125, 150, 175.\naircraft : Darkwing 6, Falcon X-2, Kesseling, Raven 12.\ncompanies : Ale and Moore, Forsyth, Pittakan, Tenerife.\ntop speeds : Mach 2.3, Mach 2.9, Mach 3.2, Mach 3.4.", "clues": {"1": {"text": "The Darkwing 6 costs 50 million dollars more than the jet built by Tenerife.", "conditions": "(T[r('Darkwing 6')][c('prices')] == T[r('Tenerife')][c('prices')] + 50)"}, "2": {"text": "The Raven 12 doesn't cost $125 million.", "conditions": "(T[r('Raven 12')][c('prices')] != 125)"}, "3": {"text": "The plane with a top speed of Mach 3.2 costs more than the jet built by Tenerife.", "conditions": "(T[r('Mach 3.2')][c('prices')] > T[r('Tenerife')][c('prices')])"}, "4": {"text": "The aircraft with a top speed of Mach 2.9, the aircraft built by Forsyth, and the $150 million aircraft are three different jets.", "conditions": "(T[r('Mach 2.9')][c('companies')]!='Forsyth') and (T[r(150)][c('companies')]!='Forsyth') and (T[r(150)][c('top speeds')]!='Mach 3.2')"}, "5": {"text": "The plane with a top speed of Mach 2.9 is either the Raven 12 or the $100 million jet.", "conditions": "(T[r('Mach 2.9')][c('aircraft')] == 'Raven 12' or T[r('Mach 2.9')][c('prices')] == 100) and (T[r('Raven 12')][c('prices')] != 100)"}, "6": {"text": "The $125 million plane, the aircraft with a top speed of Mach 3.4 and the jet built by Forsyth are all different jets.", "conditions": "(T[r(125)][c('top speeds')] != 'Mach 3.4') and (T[r('Forsyth')][c('top speeds')] != 'Mach 3.4') and (T[r(125)][c('companies')]!='Forsyth')"}, "7": {"text": "The plane with a top speed of Mach 3.2 is either the plane built by Tenerife or the plane built by Pittakan.", "conditions": "(T[r('Mach 3.2')][c('companies')] == 'Tenerife' or T[r('Mach 3.2')][c('companies')] == 'Pittakan')"}, "8": {"text": "The Falcon X-2 was built by Tenerife.", "conditions": "(T[r('Falcon X-2')][c('companies')] == 'Tenerife')"}}, "initial": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], "current": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], "applied_clues": ["5"], "initial_to_current": [[["prices", "aircraft", "companies", "top speeds"], [100, "", "", ""], [125, "", "", ""], [150, "", "", ""], [175, "", "", ""]], [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]]], "unsolvable_child": [["prices", "aircraft", "companies", "top speeds"], [100, "", "", "Mach 2.9"], [125, "", "", ""], [150, "Raven 12", "", ""], [175, "", "", ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["prices", "aircraft", "companies", "top speeds"], [100, "Falcon X-2", "Tenerife", "Mach 2.9"], [125, "Kesseling", "Pittakan", "Mach 3.2"], [150, "Darkwing 6", "Ale and Moore", "Mach 3.4"], [175, "Raven 12", "Forsyth", "Mach 2.3"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Danielle, Esther, Lana, Meredith, Orlando.\nstart points : Bull Creek, Green Swamp, Lake Jesup, Reedy Creek, Three Lakes.", "clues": {"1": {"text": "Lana walked somewhat less than Orlando.", "conditions": "(T[r('Lana')][c('distances')] < T[r('Orlando')][c('distances')])"}, "2": {"text": "Lana didn't start at Three Lakes.", "conditions": "(T[r('Lana')][c('start points')] != 'Three Lakes')"}, "3": {"text": "Meredith walked 3 fewer miles than the person who started at Reedy Creek.", "conditions": "(T[r('Reedy Creek')][c('distances')] - T[r('Meredith')][c('distances')] == 3)"}, "4": {"text": "Orlando is either the hiker who started at Lake Jesup or the person who trekked for 10 miles.", "conditions": "(T[r('Orlando')][c('start points')] == 'Lake Jesup' or T[r('Orlando')][c('distances')] == 10) and (T[r('Lake Jesup')][c('distances')] != 10)"}, "5": {"text": "Danielle walked 1 mile more than Lana.", "conditions": "(T[r('Danielle')][c('distances')] == T[r('Lana')][c('distances')] + 1)"}, "6": {"text": "The five hikers are Meredith, the person who started at Reedy Creek, the person who trekked for 10 miles, the hiker who started at Lake Jesup and the person who started at Bull Creek.", "conditions": "(T[r('Reedy Creek')][c('hikers')] != 'Meredith') and (T[r(10)][c('hikers')] != 'Meredith') and (T[r('Lake Jesup')][c('hikers')] != 'Meredith') and (T[r('Bull Creek')][c('hikers')] != 'Meredith') and (T[r('Reedy Creek')][c('distances')] != 10) and (T[r('Lake Jesup')][c('distances')] != 10) and (T[r('Bull Creek')][c('distances')] != 10)"}, "7": {"text": "Meredith walked 1 mile less than Esther.", "conditions": "(T[r('Meredith')][c('distances')] == T[r('Esther')][c('distances')] - 1)"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "", "Lake Jesup"], [9, "", ""], [10, "Orlando", ""], [11, "", ""], [12, "", ""]], "applied_clues": ["4"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "", "Lake Jesup"], [9, "", ""], [10, "Orlando", ""], [11, "", ""], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "", "Lake Jesup"], [9, "", "Bull Creek"], [10, "Orlando", ""], [11, "Meredith", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Meredith", "Three Lakes"], [9, "Esther", "Bull Creek"], [10, "Lana", "Green Swamp"], [11, "Danielle", "Reedy Creek"], [12, "Orlando", "Lake Jesup"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Several members of the Florida Trail Association have decided to each hike a different trail segment today to check for storm damage. Using only the clues below, match the distances to the options from hikers and start points. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "distances : 8, 9, 10, 11, 12.\nhikers : Alex, Claude, Danielle, Iris, Lana.\nstart points : Bull Creek, Cassia, Green Swamp, Lake Jesup, Reedy Creek.", "clues": {"1": {"text": "Of the person who started at Cassia and the person who started at Lake Jesup, one walked 9 miles and the other is Claude.", "conditions": "((T[r('Cassia')][c('distances')] == 9 and T[r('Lake Jesup')][c('hikers')] == 'Claude' ) or (T[r('Lake Jesup')][c('distances')] == 9 and T[r('Cassia')][c('hikers')] == 'Claude')) and (T[r(9)][c('hikers')] != 'Claude')"}, "2": {"text": "Iris walked 3 fewer miles than the hiker who started at Reedy Creek.", "conditions": "(T[r('Iris')][c('distances')] == T[r('Reedy Creek')][c('distances')] - 3)"}, "3": {"text": "The hiker who trekked for 10 miles didn't start at Cassia.", "conditions": "(T[r(10)][c('start points')] != 'Cassia')"}, "4": {"text": "The hiker who started at Bull Creek walked somewhat less than the person who started at Green Swamp.", "conditions": "(T[r('Bull Creek')][c('distances')] < T[r('Green Swamp')][c('distances')])"}, "5": {"text": "Alex is either the hiker who trekked for 10 miles or the hiker who trekked for 12 miles.", "conditions": "(T[r('Alex')][c('distances')] == 10 or T[r('Alex')][c('distances')] == 12)"}, "6": {"text": "Danielle walked 9 miles.", "conditions": "(T[r('Danielle')][c('distances')] == 9)"}, "7": {"text": "The hiker who trekked for 9 miles is either the hiker who started at Green Swamp or the person who started at Lake Jesup.", "conditions": "(T[r(9)][c('start points')] == 'Lake Jesup' or T[r(9)][c('start points')] == 'Green Swamp')"}}, "initial": [["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], "current": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "", ""], [12, "", ""]], "applied_clues": ["1", "5", "7"], "initial_to_current": [[["distances", "hikers", "start points"], [8, "", ""], [9, "", ""], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", ""], [11, "", ""], [12, "", ""]], [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "", ""], [12, "", ""]]], "unsolvable_child": [["distances", "hikers", "start points"], [8, "Claude", "Cassia"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "", ""], [12, "", ""]], "clue_applied_to_unsolvable_child": "6"}, "outputs": {"solution": [["distances", "hikers", "start points"], [8, "Iris", "Bull Creek"], [9, "Danielle", "Lake Jesup"], [10, "Alex", "Green Swamp"], [11, "Lana", "Reedy Creek"], [12, "Claude", "Cassia"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "The Women's Boxing Federation has just released its list of top-ranked female boxers for the year. Using only the clues below, match the wins to the options from boxers, losses, and cities. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "wins : 24, 27, 30, 33, 36.\nboxers : Cheryl Cates, Diane DeNiro, Irma, Nina, Winifred.\nlosses : 4, 7, 10, 12, 15.\ncities : Boston, Los Angeles, New York, Philadelphia, Portland.", "clues": {"1": {"text": "The boxer with 10 losses has more wins than the woman from Los Angeles.", "conditions": "(T[r(10)][c('wins')] > T[r('Los Angeles')][c('wins')])"}, "2": {"text": "The fighter from Portland, the boxer with 30 wins, and Winifred are three different people.", "conditions": "(T[r('Portland')][c('boxers')]!='Winifred') and (T[r(30)][c('boxers')]!='Winifred') and (T[r('Portland')][c('wins')] != 30)"}, "3": {"text": "Winifred doesn't have exactly 33 wins.", "conditions": "(T[r('Winifred')][c('wins')] != 33)"}, "4": {"text": "Of the woman with 24 wins and the boxer with 36 wins, one is from Boston and the other has 7 losses.", "conditions": "((T[r(24)][c('cities')] == 'Boston' and T[r(36)][c('losses')] == 7) or (T[r(36)][c('cities')] == 'Boston' and T[r(24)][c('losses')] == 7)) and (T[r('Boston')][c('losses')] != 7)"}, "5": {"text": "Irma has 24 wins.", "conditions": "(T[r('Irma')][c('wins')] == 24)"}, "6": {"text": "The boxer from New York doesn't have exactly 12 losses.", "conditions": "(T[r('New York')][c('losses')] != 12)"}, "7": {"text": "The boxer with 4 losses has 6 fewer wins than Diane DeNiro.", "conditions": "(T[r(4)][c('wins')] == T[r('Diane DeNiro')][c('wins')] - 6)"}, "8": {"text": "The boxer with 4 losses is either Irma or the fighter from Portland.", "conditions": "(T[r(4)][c('boxers')] == 'Irma' or T[r(4)][c('cities')] == 'Portland') and (T[r('Irma')][c('cities')] != 'Portland')"}, "9": {"text": "The fighter with 30 wins has 10 losses.", "conditions": "(T[r(30)][c('losses')] == 10)"}, "10": {"text": "Nina doesn't have exactly 7 losses.", "conditions": "(T[r('Nina')][c('losses')] != 7)"}, "11": {"text": "The boxer from Philadelphia has 6 fewer wins than the boxer from Portland.", "conditions": "(T[r('Philadelphia')][c('wins')] == T[r('Portland')][c('wins')] - 6)"}}, "initial": [["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], "current": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], "applied_clues": ["4", "5", "8"], "initial_to_current": [[["wins", "boxers", "losses", "cities"], [24, "", "", ""], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", "", ""]], [["wins", "boxers", "losses", "cities"], [24, "", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", "", "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", ""], [36, "", 7, ""]], [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]]], "unsolvable_child": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", "", ""], [30, "", "", ""], [33, "", "", "Portland"], [36, "", 7, ""]], "clue_applied_to_unsolvable_child": "2"}, "outputs": {"solution": [["wins", "boxers", "losses", "cities"], [24, "Irma", 4, "Boston"], [27, "Winifred", 12, "Los Angeles"], [30, "Diane DeNiro", 10, "Philadelphia"], [33, "Nina", 15, "New York"], [36, "Cheryl Cates", 7, "Portland"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Using only the clues below, match the times to the options from customers, trainers, and programs. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "times : 8:30am, 9:30am, 10:30am, 11:30am, 12:30pm.\ncustomers : Arnold, Blake, Crystal, Fannie, Garrett.\ntrainers : Irene, Jimmy, Lena, Michelle, Nicholas.\nprograms : cardio, cycling, free weights, rowing, swimming.", "clues": {"1": {"text": "The lesson with Irene, the free weights lesson and the lesson at 12:30pm are all different sessions.", "conditions": "(T[r('Irene')][c('programs')] != 'free weights') and (T[r('Irene')][c('times')] != '12:30pm') and (T[r('free weights')][c('times')] != '12:30pm')"}, "2": {"text": "Of the cycling lesson and the appointment with Jimmy, one is Blake's and the other is at 12:30pm.", "conditions": "((T[r('cycling')][c('customers')] == 'Blake' and T[r('Jimmy')][c('times')] == '12:30pm') or (T[r('cycling')][c('times')] == '12:30pm' and T[r('Jimmy')][c('customers')] == 'Blake')) and (T[r('cycling')][c('trainers')] != 'Jimmy') and (T[r('Blake')][c('times')] != '12:30am')"}, "3": {"text": "Blake's lesson isn't at 10:30am.", "conditions": "(T[r('Blake')][c('times')] != '10:30am')"}, "4": {"text": "Arnold's lesson is either the lesson with Michelle or the session at 12:30pm.", "conditions": "(T[r('Arnold')][c('trainers')] == 'Michelle' or T[r('Arnold')][c('times')] == '12:30pm') and (T[r('Michelle')][c('times')] != '12:30am')"}, "5": {"text": "Of the lesson at 12:30pm and the appointment at 8:30am, one is with Nicholas and the other will focus on cardio.", "conditions": "((T[r('12:30pm')][c('trainers')] == 'Nicholas' and T[r('8:30am')][c('programs')] == 'cardio') or (T[r('12:30pm')][c('programs')] == 'cardio' and T[r('8:30am')][c('trainers')] == 'Nicholas')) and (T[r('cardio')][c('trainers')] != 'Nicholas')"}, "6": {"text": "The session with Michelle, the free weights session, and Crystal's session are three different sessions.", "conditions": "(T[r('Michelle')][c('programs')] != 'free weights') and (T[r('Michelle')][c('customers')] != 'Crystal') and (T[r('free weights')][c('customers')] != 'Crystal')"}, "7": {"text": "Blake's appointment isn't at 9:30am.", "conditions": "(T[r('Blake')][c('times')] != '9:30am')"}, "8": {"text": "The lesson at 9:30am isn't with Lena.", "conditions": "(T[r('9:30am')][c('trainers')] != 'Lena')"}, "9": {"text": "Fannie's appointment is with Jimmy.", "conditions": "(T[r('Fannie')][c('trainers')] == 'Jimmy')"}, "10": {"text": "The rowing session is with Lena.", "conditions": "(T[r('rowing')][c('trainers')] == 'Lena')"}}, "initial": [["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], "current": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "applied_clues": ["2", "5", "4", "1"], "initial_to_current": [[["times", "customers", "trainers", "programs"], ["8:30am", "", "", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", ""]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", ""], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "", "", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", ""], ["11:30am", "", "", ""], ["12:30pm", "", "Nicholas", "cycling"]], [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]]], "unsolvable_child": [["times", "customers", "trainers", "programs"], ["8:30am", "Blake", "Jimmy", "cardio"], ["9:30am", "Arnold", "Michelle", ""], ["10:30am", "", "", "free weights"], ["11:30am", "", "Irene", ""], ["12:30pm", "", "Nicholas", "cycling"]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["times", "customers", "trainers", "programs"], ["8:30am", "Garrett", "Nicholas", "free weights"], ["9:30am", "Arnold", "Michelle", "swimming"], ["10:30am", "Crystal", "Lena", "rowing"], ["11:30am", "Blake", "Irene", "cycling"], ["12:30pm", "Fannie", "Jimmy", "cardio"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Howard, a stock broker, has made several buys today for a number of different clients. Using only the clues below, match the prices to the options from stock symbols, clients, and sectors. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "prices ($) : 25, 26, 27, 28, 29, 30.\nstock symbols : ABTR, GXTV, HBW, JMO, KMPP, QMZ.\nclients : Bill, Delilah, Edith, Francine, Geraldo, Heathcliff.\nsectors : energy, financial, health care, real estate, telecom, utilities.", "clues": {"1": {"text": "The stock that sold for $26 per share, GXTV, the stock Edith bought, the telecom stock and the energy stock were all different stocks.", "conditions": "(T[r('GXTV')][c('prices')] != 26) and (T[r(26)][c('clients')]!='Edith') and (T[r(26)][c('sectors')]!='telecom') and (T[r(26)][c('sectors')]!='energy') and (T[r('GXTV')][c('clients')]!='Edith') and (T[r('GXTV')][c('sectors')]!='telecom') and (T[r('GXTV')][c('sectors')]!='energy') and (T[r('Edith')][c('sectors')]!='telecom') and (T[r('Edith')][c('sectors')]!='energy')"}, "2": {"text": "The utilities stock was 1 dollar per share more expensive than the stock Francine bought.", "conditions": "(T[r('utilities')][c('prices')] - T[r('Francine')][c('prices')] == 1)"}, "3": {"text": "Of the stock Heathcliff bought and the stock that sold for $25 per share, one was QMZ and the other was in the telecom sector.", "conditions": "((T[r(25)][c('sectors')] == 'telecom' and T[r('Heathcliff')][c('stock symbols')] == 'QMZ') or (T[r('Heathcliff')][c('sectors')] == 'telecom' and T[r(25)][c('stock symbols')] == 'QMZ')) and (T[r(25)][c('clients')] != 'Heathcliff') and (T[r('QMZ')][c('sectors')] != 'telecom')"}, "4": {"text": "ABTR didn't sell for $28 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 28)"}, "5": {"text": "QMZ wasn't in the energy sector.", "conditions": "(T[r('QMZ')][c('sectors')] != 'energy')"}, "6": {"text": "The stock Edith bought was either the telecom stock or the stock that sold for $30 per share.", "conditions": "(T[r('Edith')][c('sectors')] == 'telecom' or T[r('Edith')][c('prices')] == 30) and (T[r('telecom')][c('prices')] != 30)"}, "7": {"text": "The stock Delilah bought was 1 dollar per share more expensive than the real estate stock.", "conditions": "(T[r('Delilah')][c('prices')] - T[r('real estate')][c('prices')] == 1)"}, "8": {"text": "ABTR didn't sell for $26 per share.", "conditions": "(T[r('ABTR')][c('prices')] != 26)"}, "9": {"text": "KMPP didn't sell for $26 per share.", "conditions": "(T[r('KMPP')][c('prices')] != 26)"}, "10": {"text": "Of the stock Edith bought and JMO, one was in the financial sector and the other sold for $29 per share.", "conditions": "((T[r('JMO')][c('prices')] == 29 and T[r('Edith')][c('sectors')] == 'financial') or (T[r('Edith')][c('prices')] == 29 and T[r('JMO')][c('sectors')] == 'financial')) and (T[r('JMO')][c('clients')] != 'Edith') and (T[r('financial')][c('prices')] != 29)"}, "11": {"text": "Of the real estate stock and the stock Heathcliff bought, one sold for $29 per share and the other was GXTV.", "conditions": "((T[r('real estate')][c('prices')] == 29 and T[r('Heathcliff')][c('stock symbols')] == 'GXTV') or (T[r('Heathcliff')][c('prices')] == 29 and T[r('real estate')][c('stock symbols')] == 'GXTV')) and (T[r('real estate')][c('clients')] != 'Heathcliff') and (T[r(29)][c('stock symbols')] != 'GXTV')"}, "12": {"text": "Neither GXTV nor the energy stock was the stock Bill bought.", "conditions": "(T[r('GXTV')][c('clients')] != 'Bill' and T[r('energy')][c('clients')] != 'Bill') and (T[r('GXTV')][c('sectors')] != 'energy')"}}, "initial": [["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], "current": [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "GXTV", "Heathcliff", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]], "applied_clues": ["10", "11"], "initial_to_current": [[["prices", "stock symbols", "clients", "sectors"], [25, "", "", ""], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "", "", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", ""], [30, "", "", ""]], [["prices", "stock symbols", "clients", "sectors"], [25, "", "Edith", "financial"], [26, "GXTV", "Heathcliff", ""], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]]], "unsolvable_child": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Edith", "financial"], [26, "GXTV", "Heathcliff", "telecom"], [27, "", "", ""], [28, "", "", ""], [29, "JMO", "", "real estate"], [30, "", "", ""]], "clue_applied_to_unsolvable_child": "3"}, "outputs": {"solution": [["prices", "stock symbols", "clients", "sectors"], [25, "QMZ", "Francine", "health care"], [26, "HBW", "Bill", "utilities"], [27, "GXTV", "Geraldo", "real estate"], [28, "KMPP", "Delilah", "energy"], [29, "JMO", "Heathcliff", "telecom"], [30, "ABTR", "Edith", "financial"]], "current_status": "Unsolvable"}}
{"inputs": {"question": "Garrett County has set up a number of successful mobile libraries known as \"Bookmobiles\". Using only the clues below, match the books to the options from bookmobiles, drivers, and vehicles. Remember, as with all grid-based logic puzzles, no option in any category will ever be used more than once.", "categories": "books : 250, 300, 350, 400.\nbookmobiles : Books-4-U, Dream Machine, Explore More, Ready Reader.\ndrivers : Cynthia, Dan, Kimberly, Sheryl.\nvehicles : Airstream, Greyhound bus, Mack truck, Winnebago.", "clues": {"1": {"text": "Of \"Dream Machine\" and the Mack truck, one is driven by Sheryl and the other is driven by Kimberly.", "conditions": "((T[r('Dream Machine')][c('drivers')] == 'Sheryl' and T[r('Mack truck')][c('drivers')] == 'Kimberly') or (T[r('Dream Machine')][c('drivers')] == 'Kimberly' and T[r('Mack truck')][c('drivers')] == 'Sheryl')) and (T[r('Dream Machine')][c('vehicles')] != 'Mack truck')"}, "2": {"text": "Of \"Explore More\" and the mobile library with 400 books, one is the Airstream and the other is driven by Sheryl.", "conditions": "((T[r('Explore More')][c('vehicles')] == 'Airstream' and T[r(400)][c('drivers')] == 'Sheryl') or (T[r('Explore More')][c('drivers')] == 'Sheryl' and T[r(400)][c('vehicles')] == 'Airstream')) and (T[r('Explore More')][c('books')] != 400) and (T[r('Airstream')][c('drivers')] != 'Sheryl')"}, "3": {"text": "The Winnebago has fewer books than the bookmobile Kimberly drives.", "conditions": "(T[r('Winnebago')][c('books')] < T[r('Kimberly')][c('books')])"}, "4": {"text": "\"Ready Reader\" isn't driven by Cynthia.", "conditions": "(T[r('Ready Reader')][c('drivers')] != 'Cynthia')"}, "5": {"text": "\"Books-4-U\" is either the Airstream or the vehicle with 300 books.", "conditions": "(T[r('Books-4-U')][c('vehicles')] == 'Airstream' or T[r('Books-4-U')][c('books')] == 300) and (T[r('Airstream')][c('books')] != 300)"}, "6": {"text": "The Airstream has 100 more books than \"Dream Machine\".", "conditions": "(T[r('Airstream')][c('books')] == T[r('Dream Machine')][c('books')] + 100)"}}, "initial": [["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], "current": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "", "", ""], [350, "Dream Machine", "Kimberly", ""], [400, "", "Sheryl", "Mack truck"]], "applied_clues": ["2", "1"], "initial_to_current": [[["books", "bookmobiles", "drivers", "vehicles"], [250, "", "", ""], [300, "", "", ""], [350, "", "", ""], [400, "", "", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "", "", ""], [350, "", "", ""], [400, "", "Sheryl", ""]], [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "", "", ""], [350, "Dream Machine", "Kimberly", ""], [400, "", "Sheryl", "Mack truck"]]], "unsolvable_child": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Explore More", "", "Airstream"], [300, "Books-4-U", "", ""], [350, "Dream Machine", "Kimberly", ""], [400, "Ready Reader", "Sheryl", "Mack truck"]], "clue_applied_to_unsolvable_child": "5"}, "outputs": {"solution": [["books", "bookmobiles", "drivers", "vehicles"], [250, "Ready Reader", "Dan", "Winnebago"], [300, "Dream Machine", "Kimberly", "Greyhound bus"], [350, "Explore More", "Sheryl", "Mack truck"], [400, "Books-4-U", "Cynthia", "Airstream"]], "current_status": "Unsolvable"}}
